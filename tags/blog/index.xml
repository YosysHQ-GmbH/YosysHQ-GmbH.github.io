<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Blog on YosysHQ Blog</title>
        <link>http://blog.yosyshq.com/tags/blog/</link>
        <description>Recent content in Blog on YosysHQ Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 31 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="http://blog.yosyshq.com/tags/blog/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>TaMaRa: Towards a Triple Modular Redundancy Pass for Yosys</title>
        <link>http://blog.yosyshq.com/p/tamara-towards-a-triple-modular-redundancy-pass-for-yosys/</link>
        <pubDate>Thu, 31 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tamara-towards-a-triple-modular-redundancy-pass-for-yosys/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2025/tamara/tamara_header.jpg" alt="Featured image of post TaMaRa: Towards a Triple Modular Redundancy Pass for Yosys" /&gt;&lt;p&gt;This is a guest blog post by &lt;a class=&#34;link&#34; href=&#34;https://mlyoung.cool/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Matt Young&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;foreword&#34;&gt;
    &lt;a href=&#34;#foreword&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Foreword
&lt;/h2&gt;&lt;p&gt;Although I&amp;rsquo;m a computer scientist by education, I&amp;rsquo;ve always been interested in space since I was a kid. For a
long time, I had simply forgotten about this interest, as I got more in-depth into FPGAs, then ASICs, and
eventually EDA. I had no idea that eventually, an incredible opportunity would come to combine these two
together, thanks to Yosys!&lt;/p&gt;
&lt;p&gt;In late 2023, I pitched a research project to my academic supervisor at the University of Queensland in
Australia. Here, we have a degree &amp;ldquo;Bachelor of Computer Science (Honours)&amp;rdquo; that is somewhat similar to a
Master&amp;rsquo;s degree as it involves a one-year research thesis. At the time, I had simply pitched the design and
implementation of a simple RISC-V microcontroller. As my supervisor pointed out, this is a fun project, but
has little to no research potential.&lt;/p&gt;
&lt;p&gt;As we brainstormed ways to improve the project, I recalled hearing about a &lt;em&gt;Super Mario 64&lt;/em&gt; speedrun that was
allegedly disrupted by a random bit flip caused by a stray cosmic ray. As I did more serious research into
this topic, I found a very interesting research field with all sorts of interesting trade-offs, on top of the
ones you get in normal FPGA/ASIC design.&lt;/p&gt;
&lt;p&gt;I quickly realised that far more than just designing &lt;em&gt;one&lt;/em&gt; fault-tolerant processor, it could be possible to
design a generalised EDA flow that could make &lt;em&gt;any&lt;/em&gt; processor fault-tolerant.&lt;/p&gt;
&lt;p&gt;Thankfully, I was already familiar with Yosys. In Australia, unlike Europe and the US, we do not currently
have a very large or well-resourced domestic FPGA/ASIC research community. This means that, as university
students and researchers, we don&amp;rsquo;t often (or ever) have access to industry tools like Cadence and
Synopsys, so I had started my FPGA work using purely open-source tools. This, in fact, turns out to be a
blessing in disguise. I&amp;rsquo;m passionate about FOSS tools, and Yosys - being open-source - allows you to peel back
the hood and deeply understand &lt;em&gt;how&lt;/em&gt; it does certain synthesis passes, which allows for really deep learning,
plus the opportunity to improve the tool yourself. Very importantly, it also means that custom passes can
easily be added, which is not at all possible with restrictive commercial tools. This makes it a very
important tool in academia, and indeed, Yosys is coming up in more and more publications.&lt;/p&gt;
&lt;p&gt;The project I ended up pitching, and had approved, was titled, &amp;ldquo;An Automated Triple Modular Redundancy EDA
Flow for Yosys&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;background---what-is-triple-modular-redundancy&#34;&gt;
    &lt;a href=&#34;#background---what-is-triple-modular-redundancy&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Background - What is Triple Modular Redundancy?
&lt;/h2&gt;&lt;p&gt;For safety-critical sectors such as aerospace, defence, and medicine, ASICs and FPGAs need to be designed to
be fault tolerant to prevent catastrophic malfunctions. In the context of digital electronics, fault tolerant
means that the design is able to gracefully recover and continue operating in the event of a fault, or upset.&lt;/p&gt;
&lt;p&gt;For systems that operate in space - whether that be low-Earth orbit (LEO) or deep space - we care most about
Single-Event Upsets (SEUs). SEUs are caused when ionising radiation strikes a transistor, causing it to
transition from a 1 to a 0, or vice versa.&lt;/p&gt;
&lt;p&gt;In space, the Earth&amp;rsquo;s atmosphere is absent, and thus chips are completely unprotected from the ever-present
threat of radiation. This radiation can come from many sources: stray cosmic rays, violent bursts from the Sun, or even
extremely powerful extragalactic gamma-ray bursts. On an unprotected system, an unlucky SEU may corrupt the system’s
state to such a severe degree that it may cause destruction or loss of life - particularly important given the
safety-critical nature of a number of space-faring systems (satellites, crew capsules, etc).&lt;/p&gt;
&lt;p&gt;One way we can protect against SEUs is a design technique called Triple Modular Redundancy (TMR), which
mitigates SEUs by triplicating key parts of the design and using voter circuits to select a non-corrupted
result if an SEU occurs. Typically, TMR is manually designed by HDL designers, for example, by
manually instantiating three copies of the target module, designing a voter circuit, and linking them all
together. However, this approach is an additional time-consuming and potentially error-prone step in the
already complex design pipeline.&lt;/p&gt;
&lt;p&gt;Wouldn&amp;rsquo;t it be nice if, instead, we could just have our synthesis tool do this for us? You input a design, and
a simple &lt;code&gt;tmr&lt;/code&gt; command makes it reliable enough to run in space, with barely any extra effort?&lt;/p&gt;
&lt;p&gt;This may still be a pipe-dream, but was the goal of my thesis to explore.&lt;/p&gt;
&lt;h2 id=&#34;introducing-tamara&#34;&gt;
    &lt;a href=&#34;#introducing-tamara&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Introducing TaMaRa
&lt;/h2&gt;&lt;p&gt;&lt;em&gt;TaMaRa&lt;/em&gt; is the name for my implementation of this as a pass in Yosys. Once compiled, it introduces one new
command: &lt;code&gt;tamara_tmr&lt;/code&gt;, which aims to introduce TMR into the circuit. It also automatically calculates an &lt;code&gt;err&lt;/code&gt;
signal that is set high when a fault occurs, which can be used to, for example, re-configure an FPGA or reboot
an ASIC.&lt;/p&gt;
&lt;p&gt;Designers should only need to make one change to the design, which is to introduce the &lt;code&gt;(* tamara_error_sink *)&lt;/code&gt;
annotation on the signal they would like to use as the error signal. This will indicate to the tool which port
should be wired up to the automatically generated error signal logic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tamara_error_sink&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are hoping to use TaMaRa on an existing project - there is some bad news. Unfortunately, we have very
little time in Honours, and &lt;strong&gt;TaMaRa is absolutely not suitable for any real-world designs&lt;/strong&gt; yet. In fact, it
was only able to process a small number of simple test circuits and has a number of documented bugs on
moderately complex designs. Think of it more as a proof of concept.&lt;/p&gt;
&lt;h2 id=&#34;tamara---under-the-hood&#34;&gt;
    &lt;a href=&#34;#tamara---under-the-hood&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    TaMaRa - Under the hood
&lt;/h2&gt;&lt;p&gt;TaMaRa operates on Yosys&amp;rsquo; powerful RTLIL or RTL Intermediate Language. All Yosys frontends emit this
intermediate representation after pre-processing, lexing, parsing and elaboration. This is a very powerful
feature of Yosys - it means that the same underlying plugin can operate on any design, from Verilog, to
SystemVerilog, to VHDL.&lt;/p&gt;
&lt;p&gt;From a high-level perspective, the TaMaRa algorithm can be summarised as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Analyse the RTLIL netlist to generate &lt;code&gt;tamara::RTLILWireConnections&lt;/code&gt; mapping; which is a mapping between an
RTLIL Cell or Wire and the other Cells or Wires it may be connected to&lt;/li&gt;
&lt;li&gt;For each output port in the top module:
&lt;ol&gt;
&lt;li&gt;Perform a backwards breadth-first search through the RTLIL netlist to form a logic cone&lt;/li&gt;
&lt;li&gt;Replicate all combinational RTLIL primitives inside the logic cone&lt;/li&gt;
&lt;li&gt;Generate and insert the necessary voter(s) for each bit&lt;/li&gt;
&lt;li&gt;Wire up the newly formed netlist, including connected the voters&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Perform any necessary fixes to the wiring, if required&lt;/li&gt;
&lt;li&gt;With the initial search complete, compute any follow on/successor logic cones from the initial terminals&lt;/li&gt;
&lt;li&gt;Repeat step 2 but for each successor logic cone&lt;/li&gt;
&lt;li&gt;Continue until no more successors remain&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is also summarised by this diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2025/tamara/algorithm.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;TaMaRa TMR algorithm&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;From an implementation perspective, the TaMaRa plugin consists of just over 2,300 lines of C++20. The class
diagram of the implementation looks (mostly) like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2025/tamara/classdiagram.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;TaMaRa TMR class diagram&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;TaMaRa works by first lifting the RTLIL into a higher-level, more abstract representation: an abstract
&lt;code&gt;TMRGraphNode&lt;/code&gt; with &lt;code&gt;CellNode&lt;/code&gt;, &lt;code&gt;IONode&lt;/code&gt;, &lt;code&gt;WireNode&lt;/code&gt; and &lt;code&gt;FFNode&lt;/code&gt; specialisations. These in turn abstractly
represent the key parts of an RTLIL circuit we care about for TMR. With this, we can more easily build a
data structure mapping between these higher-level constructs and what other higher-level constructs they
connect to. Essentially, we&amp;rsquo;re building an abstracted view of the netlist for the purposes of TMR.&lt;/p&gt;
&lt;p&gt;One of the more important aspects is this algorithm is the concept of a &lt;em&gt;backwards breadth-first search&lt;/em&gt;.
Working backwards from the output ports of a module, &lt;em&gt;towards&lt;/em&gt; the input ports, we look to perform a data
structure known as a &amp;ldquo;logic cone&amp;rdquo; through a BFS.&lt;/p&gt;
&lt;p&gt;Essentially, the logic cone encapsulates all of the combinatorial RTLIL primitives between a sequential
primitive (i.e. a DFF) or an IO (i.e. the edge of the circuit, the inputs). This diagram helps to better
illustrate a logic cone:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2025/tamara/logic_cone.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Logic cone&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Once we have these logic cones, we can treat them independently to perform TMR. All of the primitives &lt;em&gt;within&lt;/em&gt;
a single logic cone can be triplicated, and a voter circuit can be inserted on the output side of the logic
cone.&lt;/p&gt;
&lt;p&gt;Insertion is no easy task - in the thesis, I refer to this as &lt;em&gt;splicing&lt;/em&gt; or &lt;em&gt;wiring&lt;/em&gt; and it remained one of
the most complex tasks of the project. RTLIL&amp;rsquo;s power is a bit of a drawback here. As it&amp;rsquo;s capable of
representing any RTL schematic at all, there are a number of edge cases to consider, and not all were able to
be considered in time.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a lot more nuance here than can realistically fit in a blog post, so if you&amp;rsquo;re interested, I highly
encourage you to read my thesis and/or code. This goes into more detail about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specifics about the backwards BFS including search termination conditions&lt;/li&gt;
&lt;li&gt;Specifically &lt;em&gt;how&lt;/em&gt; splicing is done&lt;/li&gt;
&lt;li&gt;How the voter circuit was generated using a Karnaugh map of an expression then translated into C++ macros&lt;/li&gt;
&lt;li&gt;The general purpose &lt;code&gt;FixWalker&lt;/code&gt; and &lt;code&gt;FixWalkerManager&lt;/code&gt; classes for post-algorithm netlist repair&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;verification&#34;&gt;
    &lt;a href=&#34;#verification&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Verification
&lt;/h2&gt;&lt;p&gt;For the safety critical sectors that this tool (ideally) targets, verification is extremely important. It&amp;rsquo;s
clear that the Yosys team has put a lot of effort into its verification tooling, and it shows. I was able to
use a number of Yosys tools during the thesis: SymbiYosys, eqy, mcy, Yosys&amp;rsquo; built-in SAT solver, the &lt;code&gt;mutate&lt;/code&gt;
command, and external SMT solvers.&lt;/p&gt;
&lt;p&gt;I performed equivalence checking between circuits, before and after TMR, to ensure that TaMaRa does not change
the underlying behaviour of the circuit. In addition, I used Herklotz&amp;rsquo;s
&lt;a class=&#34;link&#34; href=&#34;https://github.com/ymherklotz/verismith&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Verismith&lt;/a&gt; tool to generate random Verilog RTL in large batches,
over 10,000 files per run, and run the equivalence check. This enabled me to verify the integrity of the
algorithm at scale.&lt;/p&gt;
&lt;p&gt;By using Yosys&amp;rsquo; built-in &lt;code&gt;mutate&lt;/code&gt; command, I was also able to use the SAT-based equivalence checker to ensure
that faults were correctly mitigated. If, after injecting a fault and applying TMR, the circuit is
equivalent to its non-fault-injected counterpart, then the TMR has worked. Likewise, we can use the SAT solver
to ensure that the &lt;code&gt;err&lt;/code&gt; signal is set high when a fault is actually injected.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2025/tamara/verification.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Verification flow&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This shows that formal verification is a powerful technique to use when designing EDA algorithms, not just for
IC design itself. There&amp;rsquo;s certainly more work I&amp;rsquo;d like to perform in this area in future - perhaps fuzzing
Yosys optimisation passes at scale to verify their correctness.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;
    &lt;a href=&#34;#results&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Results
&lt;/h2&gt;&lt;p&gt;In the end, due to time constraints (and I must admit, poor project planning), TaMaRa was only able to handle
simple circuits. This &lt;em&gt;does&lt;/em&gt; include some circuits using sequential primitives, but again, only simple ones.&lt;/p&gt;
&lt;p&gt;To have a look at what the algorithm is capable of, here is a very simple circuit displayed with Yosys&amp;rsquo; &lt;code&gt;show&lt;/code&gt;
command. This particular circuit uses a 2-bit bus, feeding into a simple NOT gate.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2025/tamara/not_2bit.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;not_2bit schematic&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Now, after applying &lt;code&gt;tamara_tmr&lt;/code&gt;, you can see that the NOT gate has been replicated, and the TMR voter and error
calculation logic has been inserted:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2025/tamara/not_2bit_tmr.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;not_2bit schematic after TMR&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Because of the 2-bit bus, two voters are required, which is the reason this schematic has dramatically
inflated in size from the original. You&amp;rsquo;ll also be able to see the &lt;code&gt;$reduce_or&lt;/code&gt; cell that has been inserted
to combine the individual &lt;code&gt;err&lt;/code&gt; signals of both the voters.&lt;/p&gt;
&lt;p&gt;With the algorithm applied, we can also use the formal verification methodology above to analyse, at a larger
scale, how these protected circuits respond to injected faults. In the following graph, an
&amp;ldquo;Unmitigated circuit&amp;rdquo; refers to a pre-TMR circuit; and an &amp;ldquo;Unprotected voter&amp;rdquo; circuit refers to a circuit with
a voter, subject to fault injection, where the voter may also be hit with faults as well. For each of the
samples on the X axis, 100 randomised trials were used and the outputs formally verified.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2025/tamara/graphs.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;TaMaRa graphs&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This result shows that while the algorithm isn&amp;rsquo;t &lt;em&gt;perfect&lt;/em&gt; in close-to-real-world scenarios, it &lt;em&gt;does&lt;/em&gt; improve
the reliability of the circuit somewhat. Unprotected circuits are almost always affected by simulated SEUs,
whereas after being processed with TaMaRa TMR, mitigated circuits have above a 50% chance of mitigating the
SEU.&lt;/p&gt;
&lt;p&gt;All circuits tested generally perform the same, regardless of topology:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2025/tamara/all_comb_unprot.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;All unprotected voters&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Individual circuits also appear to respond identically regardless of bit width:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2025/tamara/mux_bit_sweep_unprot.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Individual circuit comparison&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;
    &lt;a href=&#34;#whats-next&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What&amp;rsquo;s next?
&lt;/h2&gt;&lt;p&gt;In 2026, I&amp;rsquo;m moving to start a PhD at Macquarie University&amp;rsquo;s
&lt;a class=&#34;link&#34; href=&#34;https://www.mq.edu.au/faculty-of-science-and-engineering/our-research/silicon-platforms-lab&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Silicon Platforms Lab&lt;/a&gt;,
one of the very few computer engineering focused research groups in Australia.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m planning to continue my work on domain-specific EDA, but focus more heavily on Yosys&amp;rsquo; sister project,
&lt;a class=&#34;link&#34; href=&#34;https://github.com/The-OpenROAD-Project/OpenROAD&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenROAD&lt;/a&gt;, an RTL-GDS tool for ASICs. In the case of
radiation-hardening, performing this mitigation lower-down in the stack (i.e. during physical design/PnR) has
the advantage of being able to more accurately consider the physical effects of radiation on the circuit. This
type of information can be approximated, but is hard to accurately predict, at a synthesis pre-PnR level.&lt;/p&gt;
&lt;p&gt;There are many fields that don&amp;rsquo;t suit typical, commercial EDA flows that focus on power, performance and area
(PPA) exclusively, from radiation-hardened designs to high-security processors. Proprietary tools barricade
research into this area by making them impossible to modify. Conversely, FOSS tools like Yosys and OpenROAD
give us a unique opportunity, as researchers, to customise these tools to our specific areas of interest and
improve the tool in the process. For example, during my PhD, I&amp;rsquo;m hoping to improve both Yosys and OpenROAD,
focusing on Layout Versus Schematic (LVS) and other verification techniques. My research, and increasingly
others&amp;rsquo; as well, uses Yosys and OpenROAD for high-security and/or safety critical environments. Given this,
it&amp;rsquo;s important that when we modify a tool, we know we haven&amp;rsquo;t regressed its behaviour.&lt;/p&gt;
&lt;p&gt;My hope is that if more academics and small companies become interested in FOSS EDA tools and contribute to
them, we will eventually be able to have a powerful, community-led chip design pipeline that could rival
commercial tools across a number of domains. This, I believe, would make IC design an endeavour more suitable
for hobbyists and academics without access to expensive proprietary tools; and unlock opportunities for
interesting new innovations in the EDA sector.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;
    &lt;a href=&#34;#further-reading&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Further reading
&lt;/h2&gt;&lt;p&gt;The TaMaRa thesis (22k words) is available to read &lt;a class=&#34;link&#34; href=&#34;https://mlyoung.cool/publications/An_Automated_TMR_Flow_for_Yosys.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;on my
website&lt;/a&gt;, and is available under the
permissive CC-BY licence.&lt;/p&gt;
&lt;p&gt;The code is available on &lt;a class=&#34;link&#34; href=&#34;https://github.com/mattyoung101/tamara&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;my GitHub&lt;/a&gt;, and is available under the MPL 2.0.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A reminder again that TaMaRa is absolutely &lt;em&gt;not&lt;/em&gt; suitable for anything but simple test circuits.&lt;/strong&gt; You are more
than welcome to give it a spin, or even contribute, though!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Matt Young is a Bachelor of Computer Science (Honours) student at the University of Queensland in Australia,
researching the application of novel EDA techniques to design specialised microprocessors for challenging
environments.&lt;/p&gt;
&lt;p&gt;Matt can be reached &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/mattyoung101/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;via LinkedIn&lt;/a&gt; or by emailing matt (at)
mlyoung (dot) cool. Matt&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://mlyoung.cool/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;website&lt;/a&gt; has more information on TaMaRa and other projects.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Header image attributon: &lt;a class=&#34;link&#34; href=&#34;https://esahubble.org/images/heic1509a/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://esahubble.org/images/heic1509a/&lt;/a&gt; © ESA/Hubble (CC-BY 4.0)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;As a special exemption to the copyright notice at the end of the page, the author (Matt Young) hereby
releases this article text and diagrams under &lt;a class=&#34;link&#34; href=&#34;https://creativecommons.org/licenses/by/4.0/?ref=chooser-v1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CC-BY 4.0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>RISC-V Formal Verification Framework Extension for Synopsys VC Formal</title>
        <link>http://blog.yosyshq.com/p/risc-v-formal-verification-framework-extension-for-synopsys-vc-formal/</link>
        <pubDate>Tue, 25 Mar 2025 15:00:00 +0530</pubDate>
        
        <guid>http://blog.yosyshq.com/p/risc-v-formal-verification-framework-extension-for-synopsys-vc-formal/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2025/Sby.png" alt="Featured image of post RISC-V Formal Verification Framework Extension for Synopsys VC Formal" /&gt;&lt;p&gt;This guest blog post was written by &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/v-rohith-km/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Rohith V.&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;risc-v-formal-verification-framework-extension-for-synopsys-vc-formal&#34;&gt;
    &lt;a href=&#34;#risc-v-formal-verification-framework-extension-for-synopsys-vc-formal&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    RISC-V Formal Verification Framework Extension for Synopsys VC Formal
&lt;/h1&gt;&lt;p&gt;Imagine deploying a RISC-V processor in an embedded system, only to discover an instruction-level bug after manufacturing—this could be a costly mistake. Formal verification ensures that such issues never make it past the design phase, and tools like &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/riscv-formal&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;riscv-formal&lt;/a&gt;&lt;/strong&gt; help automate this process. However, many engineers rely on proprietary tools like &lt;strong&gt;Synopsys VC Formal&lt;/strong&gt;, making integration with open-source solutions a challenge—until now.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;riscv-formal&lt;/code&gt; framework has been a game-changer, providing an open-source solution for verifying RISC-V cores against the official ISA specification. While powerful, its integration with industry-grade proprietary tools has remained complex. This project bridges that gap by extending &lt;code&gt;riscv-formal&lt;/code&gt; to seamlessly interface with &lt;strong&gt;Synopsys VC Formal&lt;/strong&gt;, enabling engineers to harness its advanced capabilities while maintaining a structured and efficient verification approach.&lt;/p&gt;
&lt;p&gt;In this post, we’ll explore the role of formal verification in RISC-V core validation, the motivation behind this integration, and the methodology that makes it possible. Ultimately, this extension enhances accessibility and usability, providing the broader verification community with a streamlined, industry-compatible solution.&lt;/p&gt;
&lt;h2 id=&#34;about-the-framework&#34;&gt;
    &lt;a href=&#34;#about-the-framework&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    About the Framework
&lt;/h2&gt;&lt;h3 id=&#34;before-we-dive-in&#34;&gt;
    &lt;a href=&#34;#before-we-dive-in&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Before We Dive In&amp;hellip;
&lt;/h3&gt;&lt;p&gt;Before diving into the project, let&amp;rsquo;s take a quick look at the &lt;code&gt;riscv-formal&lt;/code&gt; framework and understand why it plays a crucial role in RISC-V core verification.&lt;/p&gt;
&lt;h3 id=&#34;what-is-riscv-formal&#34;&gt;
    &lt;a href=&#34;#what-is-riscv-formal&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is &lt;code&gt;riscv-formal&lt;/code&gt;?
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;riscv-formal&lt;/code&gt; is an &lt;strong&gt;open-source formal verification framework&lt;/strong&gt; designed to rigorously verify RISC-V processors against the RISC-V ISA specification. Built on the &lt;strong&gt;FOSS SymbiYosys Formal Verification Flow&lt;/strong&gt;, it ensures that a processor implementation behaves correctly at the instruction and architectural levels.&lt;/p&gt;
&lt;h3 id=&#34;why-is-riscv-formal-important&#34;&gt;
    &lt;a href=&#34;#why-is-riscv-formal-important&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Why is &lt;code&gt;riscv-formal&lt;/code&gt; Important?
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automated Property Checking:&lt;/strong&gt; Ensures compliance with the RISC-V ISA without requiring manual testbenches.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Minimal Setup, Maximum Coverage:&lt;/strong&gt; Works with any RISC-V design using an RISC-V Formal Interface (RVFI) wrapper.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-it-works&#34;&gt;
    &lt;a href=&#34;#how-it-works&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    How it Works
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;RVFI Wrapper&lt;/strong&gt;: Wraps the core-under-test with an RVFI-compliant interface for compatibility.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Formal Checkers&lt;/strong&gt;: A set of predefined checkers checks the whole core thoroughly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Verification Engines&lt;/strong&gt;: Uses predefined assertions and constraints to validate core behavior.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Counterexample Analysis&lt;/strong&gt;: If a check fails, it generates a trace of execution (CEX) to debug violations.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;limitations--extending-to-proprietary-tools&#34;&gt;
    &lt;a href=&#34;#limitations--extending-to-proprietary-tools&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Limitations &amp;amp; Extending to Proprietary Tools
&lt;/h3&gt;&lt;p&gt;While &lt;code&gt;riscv-formal&lt;/code&gt; is highly effective for open-source formal verification, its native tooling (SBY/Yosys) &lt;strong&gt;does not support proprietary EDA tools&lt;/strong&gt;. This is where our &lt;strong&gt;extension&lt;/strong&gt; comes in—adapting &lt;code&gt;riscv-formal&lt;/code&gt; for &lt;strong&gt;Synopsys VC Formal&lt;/strong&gt;, bridging the gap between open-source and commercial verification flows.&lt;/p&gt;
&lt;h2 id=&#34;project-goals&#34;&gt;
    &lt;a href=&#34;#project-goals&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Project Goals
&lt;/h2&gt;&lt;p&gt;By adapting the &lt;code&gt;riscv-formal&lt;/code&gt; framework (originally built for SymbiYosys) to work with &lt;strong&gt;Synopsys VC Formal&lt;/strong&gt;, this project aims to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Seamless Integration with VC Formal&lt;/strong&gt; – Ensure that &lt;code&gt;riscv-formal&lt;/code&gt; works effortlessly with &lt;strong&gt;Synopsys VC Formal&lt;/strong&gt;, simplifying the verification process without requiring extensive modifications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improve Usability&lt;/strong&gt; – Deliver clear documentation and practical examples to help engineers effectively apply the framework.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enable Easy &lt;code&gt;.sby → .tcl&lt;/code&gt; Conversion&lt;/strong&gt; – Support straightforward translation of &lt;code&gt;.sby&lt;/code&gt; configurations into &lt;code&gt;.tcl&lt;/code&gt; scripts, even outside the framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By achieving these goals, the project enhances the &lt;strong&gt;efficiency, accessibility, and adoption&lt;/strong&gt; of formal verification for RISC-V cores, fostering wider collaboration in the verification community.&lt;/p&gt;
&lt;h2 id=&#34;key-challenges-in-transitioning-to-vc-formal&#34;&gt;
    &lt;a href=&#34;#key-challenges-in-transitioning-to-vc-formal&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Key Challenges in Transitioning to VC Formal
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Conversion from SymbiYosys Flow:&lt;/strong&gt; The &lt;code&gt;.sby&lt;/code&gt; configuration files used in riscv-formal are specific to SymbiYosys. VC Formal, on the other hand, operates using &lt;code&gt;Tcl-based&lt;/code&gt; scripts, requiring a structured translation mechanism to adapt the verification flow.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Environment Setup &amp;amp; Automation:&lt;/strong&gt; Automating the process—so that users can easily set up VC Formal verification with minimal manual intervention—was a key goal in this adaptation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;verification-process&#34;&gt;
    &lt;a href=&#34;#verification-process&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Verification Process
&lt;/h2&gt;&lt;h3 id=&#34;i-foss-symbiyosys-formal-verification-flow&#34;&gt;
    &lt;a href=&#34;#i-foss-symbiyosys-formal-verification-flow&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    i. FOSS SymbiYosys Formal Verification Flow
&lt;/h3&gt;&lt;p&gt;This flow demonstrates the formal verification process using the riscv-formal framework with the open-source SymbiYosys tool. It consists of components like RVFI, the wrapper, and &lt;code&gt;checks.cfg&lt;/code&gt;. These components are used to generate &lt;code&gt;.sby&lt;/code&gt; files, which are then processed by SymbiYosys to run verification checks and produce the results, ensuring that the RISC-V implementation adheres to formal specifications. This flow represents a streamlined, FOSS-based approach to formal verification.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2025/Sby.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;FOSS SymbiYosys formal verification flow&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;ii-synopsys-vc-formal-verification-flow&#34;&gt;
    &lt;a href=&#34;#ii-synopsys-vc-formal-verification-flow&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    ii. Synopsys VC Formal Verification Flow
&lt;/h3&gt;&lt;p&gt;This flow illustrates the modified process, where the riscv-formal framework is used with Synopsys VC Formal. The &lt;code&gt;.sby&lt;/code&gt; files from the riscv-formal framework are first converted to &lt;code&gt;.tcl&lt;/code&gt; scripts using a custom &lt;code&gt;sby to tcl&lt;/code&gt; converter before being processed by VC Formal to generate verification results.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2025/VCF.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Synopsys VC Formal verification flow&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The framework consists of &lt;strong&gt;three key stages&lt;/strong&gt;, each automated for smooth verification:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pre-Processing:&lt;/strong&gt; Converts &lt;code&gt;.sby&lt;/code&gt; files into &lt;code&gt;.tcl&lt;/code&gt; scripts for VC Formal compatibility.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Processing:&lt;/strong&gt; Runs the formal checks, collects logs, and categorizes warnings &amp;amp; errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Post-Processing:&lt;/strong&gt; Summarizes verification results, helping users quickly identify pass/fail conditions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To achieve this, we’ve extended the framework with four core components:&lt;/p&gt;
&lt;h3 id=&#34;1-sby_to_tclpy--automating-test-setup-pre-processing&#34;&gt;
    &lt;a href=&#34;#1-sby_to_tclpy--automating-test-setup-pre-processing&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    1️⃣ sby_to_tcl.py – Automating Test Setup (Pre-Processing)
&lt;/h3&gt;&lt;p&gt;The &lt;code&gt;sby_to_tcl.py&lt;/code&gt; script automates the &lt;strong&gt;conversion of SymbiYosys &lt;code&gt;.sby&lt;/code&gt; files&lt;/strong&gt; into &lt;strong&gt;VC Formal-compatible &lt;code&gt;.tcl&lt;/code&gt; scripts&lt;/strong&gt;. It also &lt;strong&gt;creates a Makefile&lt;/strong&gt; that organizes multiple verification tasks, allowing batch execution with a single command.&lt;/p&gt;
&lt;h4 id=&#34;-why-is-this-important&#34;&gt;
    &lt;a href=&#34;#-why-is-this-important&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    🔹 Why is this important?
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Eliminates manual effort in handling &lt;code&gt;.tcl&lt;/code&gt; files.&lt;/li&gt;
&lt;li&gt;Enables batch verification by processing multiple &lt;code&gt;.sby&lt;/code&gt; files at once.&lt;/li&gt;
&lt;li&gt;Organizes output systematically in a dedicated &lt;code&gt;vcf&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-vcf_cexdatash--error--warning-processing-processing-stage&#34;&gt;
    &lt;a href=&#34;#2-vcf_cexdatash--error--warning-processing-processing-stage&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    2️⃣ vcf_cexdata.sh – Error &amp;amp; Warning Processing (Processing Stage)
&lt;/h3&gt;&lt;p&gt;During the verification execution, the &lt;code&gt;vcf_cexdata.sh&lt;/code&gt; script ensures &lt;strong&gt;structured handling of warnings and errors&lt;/strong&gt;. Instead of overwriting logs, it captures and organizes logs for all checks, ensuring every warning/error is properly recorded.&lt;/p&gt;
&lt;h4 id=&#34;-key-features&#34;&gt;
    &lt;a href=&#34;#-key-features&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    🔹 Key Features:
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Prevents loss of information by storing logs separately.&lt;/li&gt;
&lt;li&gt;Formats errors in an easy-to-read structure (&lt;code&gt;warnings.txt&lt;/code&gt;, &lt;code&gt;errors.txt&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Provides a quick summary of issues across multiple checks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-vcf_res_processpy--summarizing-verification-results-post-processing&#34;&gt;
    &lt;a href=&#34;#3-vcf_res_processpy--summarizing-verification-results-post-processing&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    3️⃣ vcf_res_process.py – Summarizing Verification Results (Post-Processing)
&lt;/h3&gt;&lt;p&gt;After verification, &lt;code&gt;vcf_res_process.py&lt;/code&gt; extracts key results from each check, categorizing assertions as &lt;strong&gt;PASS, FAIL, or INCONCLUSIVE&lt;/strong&gt; and consolidating everything into a &lt;strong&gt;single summary file (&lt;code&gt;results.txt&lt;/code&gt;)&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;-why-does-this-matter&#34;&gt;
    &lt;a href=&#34;#-why-does-this-matter&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    🔹 Why does this matter?
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Saves time—no need to inspect multiple files manually.&lt;/li&gt;
&lt;li&gt;Provides a high-level overview of all formal verification checks.&lt;/li&gt;
&lt;li&gt;Helps users quickly identify issues that need further debugging.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-makefile--automating-the-entire-workflow&#34;&gt;
    &lt;a href=&#34;#4-makefile--automating-the-entire-workflow&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    4️⃣ Makefile – Automating the Entire Workflow
&lt;/h3&gt;&lt;p&gt;The &lt;strong&gt;Makefile&lt;/strong&gt; serves as the backbone of automation, orchestrating all three stages. With simple commands like &lt;code&gt;make vcf_check&lt;/code&gt;, users can run all checks, collect results, and review summaries &lt;strong&gt;without manually executing scripts&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;-key-features-1&#34;&gt;
    &lt;a href=&#34;#-key-features-1&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    🔹 Key Features:
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;One-command execution of all verification steps.&lt;/li&gt;
&lt;li&gt;Automated log collection &amp;amp; clean-up for an organized workflow.&lt;/li&gt;
&lt;li&gt;Results displayed directly in the terminal for quick review.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a &lt;strong&gt;more detailed breakdown&lt;/strong&gt; on each file/process, check out the &lt;a class=&#34;link&#34; href=&#34;https://github.com/Chaotic-VRBlue/riscv-formal-vc-formal-extension?tab=readme-ov-file#file-descriptions&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;complete repository on GitHub&lt;/a&gt;! 🚀&lt;/p&gt;
&lt;h3 id=&#34;general-applicability&#34;&gt;
    &lt;a href=&#34;#general-applicability&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    General Applicability
&lt;/h3&gt;&lt;p&gt;An interesting aspect of this process is that it is &lt;strong&gt;not exclusive to &lt;code&gt;riscv-formal&lt;/code&gt;&lt;/strong&gt;. In fact, this approach can be adapted for any &lt;code&gt;.sby&lt;/code&gt; file(s). The automation framework we&amp;rsquo;ve built for converting &lt;code&gt;.sby&lt;/code&gt; files to &lt;code&gt;.tcl&lt;/code&gt; scripts, handling formal verification results, and structuring the workflow can be applied to a wide range of formal verification tasks beyond RISC-V.&lt;/p&gt;
&lt;p&gt;This flexibility makes it a powerful solution for integrating SymbiYosys-based verification flows with commercial formal tools like Synopsys VC Formal, streamlining the entire process across different projects.&lt;/p&gt;
&lt;h2 id=&#34;going-the-other-way-from-vc-formal-to-sby&#34;&gt;
    &lt;a href=&#34;#going-the-other-way-from-vc-formal-to-sby&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Going the Other Way: From VC Formal to SBY
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s go the other way for a bit—what if we want to take &lt;code&gt;.tcl&lt;/code&gt; files from VC Formal and convert them back into &lt;code&gt;.sby&lt;/code&gt; files for SymbiYosys?&lt;/p&gt;
&lt;h3 id=&#34;initial-challenges-faced-with-symbiyosys&#34;&gt;
    &lt;a href=&#34;#initial-challenges-faced-with-symbiyosys&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Initial Challenges Faced with SymbiYosys
&lt;/h3&gt;&lt;p&gt;When I first started using SymbiYosys (SBY) for formal verification, I encountered several challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Toolchain Dependencies&lt;/strong&gt;: SBY relies on open-source tools like Yosys, Boolector, and ABC. Ensuring proper installation and configuration was time-consuming.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assertion Language Differences&lt;/strong&gt;: SystemVerilog Assertions (SVA) supported in VC Formal required workarounds in SBY due to syntax or feature limitations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Despite these hurdles, open-source formal verification tools have improved significantly and can handle complex verification tasks.&lt;/p&gt;
&lt;h3 id=&#34;automating-the-conversion-from-tcl-to-sby&#34;&gt;
    &lt;a href=&#34;#automating-the-conversion-from-tcl-to-sby&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Automating the Conversion: From &lt;code&gt;.tcl&lt;/code&gt; to &lt;code&gt;.sby&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;The scripting ideas used in our Python automation can serve as a foundation for reversing the process. Just like &lt;code&gt;sby_to_tcl.py&lt;/code&gt; converts &lt;code&gt;.sby&lt;/code&gt; to &lt;code&gt;.tcl&lt;/code&gt;, a similar script could parse &lt;code&gt;.tcl&lt;/code&gt; files and generate &lt;code&gt;.sby&lt;/code&gt; files, but key challenges remain:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lack of Direct Equivalence&lt;/strong&gt;: VC Formal scripts contain proprietary directives that do not have an exact counterpart in SymbiYosys.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complex Conversions&lt;/strong&gt;: While a fully automated VC Formal-to-SBY conversion may not be feasible, structured scripting can reduce manual effort significantly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately, once the &lt;code&gt;.sby&lt;/code&gt; files are reconstructed, the existing &lt;strong&gt;riscv-formal automation&lt;/strong&gt;—Makefile execution, error handling, and result processing—remains intact.&lt;/p&gt;
&lt;p&gt;A structured conversion process would enable &lt;strong&gt;bidirectional compatibility&lt;/strong&gt; between open-source and proprietary formal verification tools.&lt;/p&gt;
&lt;h3 id=&#34;symbiyosys-flow-vs-vc-formal-flow&#34;&gt;
    &lt;a href=&#34;#symbiyosys-flow-vs-vc-formal-flow&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    SymbiYosys Flow vs. VC Formal Flow
&lt;/h3&gt;&lt;p&gt;Comparison of &lt;strong&gt;SymbiYosys Flow&lt;/strong&gt; and &lt;strong&gt;Synopsys VC Formal (VCF)&lt;/strong&gt; flows:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Flow&lt;/strong&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;strong&gt;SymbiYosys (SBY) Flow&lt;/strong&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;strong&gt;VC Formal (VCF) Flow&lt;/strong&gt;&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Configuration File&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;.sby&lt;/code&gt; file (SBY-based)&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;.tcl&lt;/code&gt; file (Tcl-based)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Tool Used&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;SymbiYosys + Yosys&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Synopsys VC Formal&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Solver Backend&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Boolector, Yices2, etc.,&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Synopsys’ internal solvers&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Counterexample Debugging&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;GUI-based + logs&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;GUI-based + logs&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;Execution Automation&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Python, Shell &amp;amp; Makefile&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Python, Shell &amp;amp; Makefile&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;future-scope&#34;&gt;
    &lt;a href=&#34;#future-scope&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Future Scope
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Extending to Other Proprietary Tools&lt;/strong&gt;&lt;br&gt;
While this extension integrates Synopsys VC Formal with riscv-formal, the approach can be further extended to other commercial formal verification tools. Automating &lt;code&gt;.sby&lt;/code&gt; file conversion and structured result handling can help streamline workflows across multiple environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Maintaining Compatibility with File Format Changes&lt;/strong&gt;&lt;br&gt;
This extension relies on the &lt;code&gt;.sby&lt;/code&gt; file structure from riscv-formal and the &lt;code&gt;.tcl&lt;/code&gt; scripting format used by VC Formal. If either of these formats evolve, updates will be needed to ensure compatibility. Keeping the automation scripts adaptable to such modifications will be crucial for long-term usability.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By continuously adapting, this extension can remain a valuable tool for formal verification, extending its reach to new tools and maintaining alignment with updates in the riscv-formal ecosystem.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;
    &lt;a href=&#34;#results&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Results
&lt;/h2&gt;&lt;p&gt;We have successfully developed a complete extension that seamlessly integrates the &lt;strong&gt;riscv-formal framework&lt;/strong&gt; with &lt;strong&gt;Synopsys VC Formal (VCF)&lt;/strong&gt;, ensuring an efficient, automated, and user-friendly verification experience.&lt;/p&gt;
&lt;p&gt;Using this &lt;strong&gt;extended framework&lt;/strong&gt;, we formally verified our &lt;strong&gt;Single Cycle RISC-V core (SCRV32I)&lt;/strong&gt; and cross-checked results with &lt;strong&gt;SymbiYosys&lt;/strong&gt;. The verification confirms that our core adheres to the &lt;strong&gt;RISC-V ISA specifications&lt;/strong&gt;, ensuring correctness and compliance.&lt;/p&gt;
&lt;h3 id=&#34;-practical-example&#34;&gt;
    &lt;a href=&#34;#-practical-example&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    🔍 Practical Example
&lt;/h3&gt;&lt;p&gt;For a detailed walkthrough, refer to this section of the &lt;a class=&#34;link&#34; href=&#34;https://github.com/Chaotic-VRBlue/riscv-formal-vc-formal-extension?tab=readme-ov-file#running-the-example-scrv32i-processor-for-understanding-the-workflow&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;complete repository on GitHub&lt;/a&gt;, where we provide a step-by-step guide to implementing this extension on the example SCRV32I processor.&lt;/p&gt;
&lt;p&gt;The below section is dedicated to guiding you through the process of configuring custom RISC-V designs.&lt;/p&gt;
&lt;p&gt;This practical approach ensures that users can replicate adapt, and extend the verification flow to their own processor designs.&lt;/p&gt;
&lt;h2 id=&#34;configuring-a-new-risc-v-processor&#34;&gt;
    &lt;a href=&#34;#configuring-a-new-risc-v-processor&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Configuring a New RISC-V Processor
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, refer to the &lt;code&gt;riscv-formal&lt;/code&gt; repository and follow the steps outlined in the &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/riscv-formal?tab=readme-ov-file#configuring-a-new-risc-v-processor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;riscv-formal guide&lt;/a&gt;. Complete everything up to step 5. You don&amp;rsquo;t need to run step 5, as it involves using an open-source tool. For our purpose, we will run it using the VC Formal tool, so step 5 can be skipped. If you&amp;rsquo;re interested, you can explore it, but it&amp;rsquo;s not required for this process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the &lt;code&gt;RVFI&lt;/code&gt; (RISC-V Formal Interface), &lt;code&gt;wrapper.sv&lt;/code&gt; file, and &lt;code&gt;checks.cfg&lt;/code&gt; file are implemented for your RISC-V processor as per the steps in the &lt;code&gt;riscv-formal&lt;/code&gt; repository, you can proceed with running the RISC-V formal framework for your core on the Synopsys VC Formal Tool.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Note: You may need to refer to the entire repository to complete this part, not just the section linked here.)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy the &lt;code&gt;vcf_cexdata.sh&lt;/code&gt; and &lt;code&gt;Makefile&lt;/code&gt; files from the &lt;code&gt;cores/scrv32i&lt;/code&gt; folder into your core folder. (Remember to copy the &lt;code&gt;vc_formal&lt;/code&gt; folder to the root directory if you have cloned the official &lt;code&gt;riscv-formal&lt;/code&gt; repository.)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Note: Only the vc_formal folder in the root directory, the vcf_cexdata.sh file in the scrv32i folder, and a few additions to the Makefile inside the scrv32i directory were created to implement this extension. - So copy these files/folder to the right location and it should work with no hassle)&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigate to your core directory and run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; cores/&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;core&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;make vcf_clean
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;make vcf_check
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the process is complete, the terminal will display results in the following order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Warnings&lt;/li&gt;
&lt;li&gt;Errors&lt;/li&gt;
&lt;li&gt;Verification results (PASS/FAIL/INCONCLUSIVE/UNKNOWN - If failed to run)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then you can utilize features such as running specific checks (including in GUI mode), launching the GUI, and customizing checks to run or skip, as shown in the &amp;lsquo;Running the Example SCRV32I Processor (For Understanding the Workflow)&amp;rsquo; section above.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;h3 id=&#34;bridging-the-gap-risc-v-formal-meets-synopsys-vc-formal&#34;&gt;
    &lt;a href=&#34;#bridging-the-gap-risc-v-formal-meets-synopsys-vc-formal&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Bridging the Gap: RISC-V Formal Meets Synopsys VC Formal
&lt;/h3&gt;&lt;p&gt;The &lt;strong&gt;RISC-V Formal Verification Framework Extension&lt;/strong&gt; for &lt;strong&gt;Synopsys VC Formal&lt;/strong&gt; bridges the gap between open-source and industry-grade proprietary tools, making formal verification more &lt;strong&gt;accessible, efficient, and scalable&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;With &lt;strong&gt;automated .sby to .tcl conversion&lt;/strong&gt;, &lt;strong&gt;structured result handling&lt;/strong&gt;, and &lt;strong&gt;batch execution support&lt;/strong&gt;, this extension simplifies the entire verification process for RISC-V cores—and beyond.&lt;/p&gt;
&lt;h3 id=&#34;but-this-is-just-the-beginning&#34;&gt;
    &lt;a href=&#34;#but-this-is-just-the-beginning&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    But This Is Just the Beginning&amp;hellip;
&lt;/h3&gt;&lt;p&gt;The methodologies introduced here can be extended to other formal verification tasks, making it easier to integrate open-source flows with commercial EDA tools. Whether you’re using &lt;strong&gt;SymbiYosys&lt;/strong&gt;, &lt;strong&gt;VC Formal&lt;/strong&gt;, or exploring &lt;strong&gt;bidirectional compatibility&lt;/strong&gt;, this framework lays the foundation for a more automated, scalable, and interoperable verification ecosystem.&lt;/p&gt;
&lt;p&gt;🔎 Want to dive deeper? Explore the &lt;strong&gt;full implementation&lt;/strong&gt; in the GitHub repository: &lt;a class=&#34;link&#34; href=&#34;https://github.com/Chaotic-VRBlue/riscv-formal-vc-formal-extension/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;riscv-formal-vc-formal-extension&lt;/a&gt; 🚀&lt;/p&gt;
&lt;p&gt;By embracing &lt;strong&gt;automation, interoperability, and scalability&lt;/strong&gt;, we can push the boundaries of formal verification—ensuring that RISC-V processors and other designs are functionally correct and future-proof.&lt;/p&gt;
&lt;p&gt;Let’s build smarter, faster, and more robust verification flows—together! 🔬💡&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Sky130 SPICE, the KiCad way</title>
        <link>http://blog.yosyshq.com/p/sky130-kicad-spice/</link>
        <pubDate>Mon, 12 Feb 2024 19:09:55 -0800</pubDate>
        
        <guid>http://blog.yosyshq.com/p/sky130-kicad-spice/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2024/sky130-kicad/banner.png" alt="Featured image of post Sky130 SPICE, the KiCad way" /&gt;&lt;p&gt;&lt;em&gt;This guest post is by &lt;a class=&#34;link&#34; href=&#34;https://chaos.social/@lethalbit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Aki Van Ness&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;sky130-spice-the-kicad-way&#34;&gt;
    &lt;a href=&#34;#sky130-spice-the-kicad-way&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Sky130 SPICE, the KiCad way
&lt;/h1&gt;&lt;p&gt;Picture this, you&amp;rsquo;re working on a custom layout for &lt;a class=&#34;link&#34; href=&#34;https://skywater-pdk.readthedocs.io/en/main/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Sky130&lt;/a&gt;, be it a PLL, or you&amp;rsquo;re just trying your hands at making some basic building blocks. You&amp;rsquo;ve got a plan, and and ready to start laying down some nets, and that&amp;rsquo;s when you must face it, the dreaded &lt;a class=&#34;link&#34; href=&#34;https://xschem.sourceforge.io/stefan/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xschem&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;All joking aside, xschem is an incredibly powerful schematic capture system, but that power comes at a cost. xschem is fairly arcane to most, it has some graphical problems, and is just in general really hard to use if you&amp;rsquo;re just starting out which makes rapid iteration difficult.&lt;/p&gt;
&lt;p&gt;Enter &lt;a class=&#34;link&#34; href=&#34;https://kicad.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KiCad&lt;/a&gt;, a robust and Open Source EDA software package, while it is mainly used for PCB layout, we can leverage the schematic capture and built-in SPICE simulation, right?&lt;/p&gt;
&lt;h2 id=&#34;introducing-kicad-pdk-libs&#34;&gt;
    &lt;a href=&#34;#introducing-kicad-pdk-libs&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Introducing kicad-pdk-libs
&lt;/h2&gt;&lt;p&gt;A little while ago I ran into &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/lethalbit/status/1498345181359321091&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;that exact problem&lt;/a&gt;, and so I set out and made &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kicad-pdk-libs&lt;/a&gt;, a KiCad symbol library that adds schematic symbols for not only the basic building blocks of the Sky130 &lt;a class=&#34;link&#34; href=&#34;https://www.zerotoasiccourse.com/terminology/pdk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PDK&lt;/a&gt;, but also SPICE library linkage.&lt;/p&gt;
&lt;p&gt;With this you can do things as simple as just stubbing out a SPICE simulation for some of the primitive gates, or go down to the transistor level and build gates from scratch and simulate their characteristics!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/sky130-kicad/kicad_nfet.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The KiCad &amp;ldquo;Choose Symbol&amp;rdquo; dialog showing a symbol called &amp;ldquo;sky130_nfet_01v8&amp;rdquo; being selected&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;As it stands, &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kicad-pdk-libs&lt;/a&gt; has almost 100% complete symbols for both the Sky130A and Sky130B PDKs, all the cell libraries as well as the base &lt;code&gt;sky130_fd_pr&lt;/code&gt; primitives library. This allows you to not just put transistor level schematics together, but much larger schematics using all of the pre-made gates and cells in the library, including some SRAM blocks.&lt;/p&gt;
&lt;h2 id=&#34;quick-n-dirty-inverter&#34;&gt;
    &lt;a href=&#34;#quick-n-dirty-inverter&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Quick n&amp;rsquo; Dirty Inverter
&lt;/h2&gt;&lt;p&gt;The basic example that almost everyone uses as their first CMOS device is the trusty inverter. As such we will quickly go over it here, if you wish for a more step-by-step guide with additional details, see the kicad-pdk-libs &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs/blob/main/docs/intro.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;intro&lt;/a&gt; in the docs.&lt;/p&gt;
&lt;p&gt;All you need to do is to throw a &lt;code&gt;sky130_pfet_01v8&lt;/code&gt; and a &lt;code&gt;sky130_nfet_01v8&lt;/code&gt; on top of each other with their drains facing each other, hook up &lt;code&gt;VCC&lt;/code&gt; and &lt;code&gt;GND&lt;/code&gt; and then join the gates and drains, and just like that, you have an inverter using the primitive Sky130 FET models.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/sky130-kicad/inverter_sch.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The CMOS inverted as described above&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Next set up some way to drive the sim, in my case I did a VDC source and then a VPULSE to drive the inverter, these are built-in to the standard KiCad SPICE library, it should look something like this when done:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/sky130-kicad/schema.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Full view of the KiCad schematic showing the VDC and VPULSE elements along with the CMOS inverter previously shown&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;After that, you can add the following SPICE directives as a text element on the schematic, and make sure to replace &lt;code&gt;${PDK_ROOT}&lt;/code&gt; with the path to your local PDK root:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-spice&#34; data-lang=&#34;spice&#34;&gt;.tran 100f 100n
.lib ${PDK_ROOT}/sky130A/libs.tech/ngspice/sky130.lib.spice tt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And finally, we&amp;rsquo;re ready to run the sim! Open up KiCad&amp;rsquo;s simulation utility and simply click the &amp;ldquo;Run/Stop Simulation&amp;rdquo; button, if all goes well, the simulation will run and then we can plot the &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; signals.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/sky130-kicad/sim_results.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The simulation results of the simple Sky130 CMOS inverter&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Look at that! It&amp;rsquo;s a working inverter!&lt;/p&gt;
&lt;p&gt;Something important to note, this simulation uses default parameters for the Sky130 transistors, you can get more accurate results by using &lt;a class=&#34;link&#34; href=&#34;http://opencircuitdesign.com/magic/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;magic&lt;/a&gt; to extract the transistor parameters from a layout and then attach them to the KiCad symbols by setting the &lt;code&gt;Sim.Params&lt;/code&gt; property on the transistor.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;p&gt;I hope this gives you a brief idea of what the &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kicad-pdk-libs&lt;/a&gt; is all about, and how you can use it to simulate your schematics for use in ASIC layout.&lt;/p&gt;
&lt;p&gt;While it may not be as powerful and scriptable as something like &lt;a class=&#34;link&#34; href=&#34;https://xschem.sourceforge.io/stefan/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xschem&lt;/a&gt;, especially right out of the box, I hope it is a useful tool for those just starting out, or for people who just need to throw things together quickly. Especially with the promising improvements coming to KiCad 8&amp;rsquo;s simulation workspace, which will allow much more comprehensive and complete analysis.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kicad-pdk-libs&lt;/a&gt; and what you&amp;rsquo;ve read here, give it an &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs/blob/main/docs/install.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;install&lt;/a&gt;, and check out the &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs/blob/main/docs/intro.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;intro&lt;/a&gt; and the &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs/tree/main/examples&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;examples&lt;/a&gt; for more detailed information.&lt;/p&gt;
&lt;p&gt;Go have fun and make something cool!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Logic Locking with Moosic</title>
        <link>http://blog.yosyshq.com/p/logic-locking-with-moosic/</link>
        <pubDate>Tue, 30 Jan 2024 12:00:00 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/logic-locking-with-moosic/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2024/locking.png" alt="Featured image of post Logic Locking with Moosic" /&gt;&lt;p&gt;&lt;em&gt;This guest post is by Gabriel Gouvine.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;applying-logic-locking-to-a-tinytapeout-design-with-moosic&#34;&gt;
    &lt;a href=&#34;#applying-logic-locking-to-a-tinytapeout-design-with-moosic&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Applying logic locking to a TinyTapeout design with Moosic
&lt;/h1&gt;&lt;p&gt;When creating a design, most of us are not in possession of the lithography and manufacturing tools necessary to actually create the chip: we send our design to a foundry and they make the chip for us.&lt;/p&gt;
&lt;p&gt;This requires a great deal of trust in the toolchain and the foundry: a malicious actor could introduce backdoors, or just steal the design to reuse it themselves.
For security-conscious designers, countermeasures are necessary.&lt;/p&gt;
&lt;p&gt;One such countermeasure is logic locking: we are going to lock our design, so that it does not work without a secret key.
We do it by adding or changing some gates in the design to use the key: if the key is incorrect, the design behaviour will be completely modified.
This is going to make it harder to reuse the design without authorization (you have to find the key) or to introduce backdoors (you have to understand what it does).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/locking.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;My Image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;We built a Yosys plugin &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/moosic-yosys-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;to do just that&lt;/a&gt;.
The plugin provides a &lt;code&gt;logic_locking&lt;/code&gt; command that will mangle the design as much as it can.&lt;/p&gt;
&lt;p&gt;To illustrate, let&amp;rsquo;s make a design on &lt;a class=&#34;link&#34; href=&#34;https://tinytapeout.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TinyTapeout&lt;/a&gt;, lock it and synthesize it all the way to silicon.&lt;/p&gt;
&lt;h2 id=&#34;what-is-logic-locking&#34;&gt;
    &lt;a href=&#34;#what-is-logic-locking&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is logic locking
&lt;/h2&gt;&lt;p&gt;The goal of logic locking is to make the design unusable without the right key.
Usually, we apply it after synthesis, when the design is already mapped to logic gates.
Logic locking adds new gates that will change the behaviour of the design unless the right key is provided.
Our tool does it by adding Xor and Xnor gates, as shown below, but you can imagine a lot of ways to insert or replace gates.
If a 0 is set for a Xor gate, or a 1 for a Xnor gate, the design works as before.
It acts as a countermeasure rather than a cryptographic security.
Much like software countermeasures it will not stop a determined attacker with unlimited resources, but it&amp;rsquo;s one more thing that an attacker will have to break.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/XOR_NXOR_insertion.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Xor insertion&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The logic locking tool needs to decide where to insert the gates.
Its goal is to disrupt the design as much as possible, and ideally make the key hard to guess by running and analyzing the design.
The tool will analyze the impact of inserting a locking gate, and pick the places that maximize its estimated security, typically signals that have a large impact on the design&amp;rsquo;s behaviour.
Ultimately, it&amp;rsquo;s a tradeoff between security and performance: for security, the more gates you insert the better, but this makes the circuit bigger and slower.&lt;/p&gt;
&lt;p&gt;Just a few percents of the gates locked is almost always enough to completely corrupt the design.
We can explore the tradeoff with the plugin.
For example, on this benchmark, locking just 13% of the signals breaks all outputs and all testcases:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/pareto_front.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Corruptibility&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;locking-a-design&#34;&gt;
    &lt;a href=&#34;#locking-a-design&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Locking a design
&lt;/h2&gt;&lt;p&gt;We are going to make a toy design to experiment with logic locking. I wrote a counter, that is incremented at each clock cycle where &lt;code&gt;do_incr&lt;/code&gt; is set:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do_incr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rst_n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_out&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rst_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;do_incr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We run Yosys with the &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/moosic-yosys-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Moosic plugin&lt;/a&gt;. Since logic locking works on a netlist, we first synthesize our counter with the default library:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;read_verilog&lt;/span&gt; src&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;counter.v
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;synth&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we apply locking and save our netlist. To fit in our 8-bit input port, I picked a small 6-bit key. With only 64 possible values, it is easy to brute-force, so make it a lot bigger if you use it in the wild! And don&amp;rsquo;t lose the key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;logic_locking&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;key-bits &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;key &lt;span class=&#34;mi&#34;&gt;39&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;write_verilog&lt;/span&gt; src&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;locked_counter.v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the file, our module is now a netlist with an additional port &lt;code&gt;moosic_key&lt;/code&gt;. Following TinyTapeout&amp;rsquo;s philosophy, it all runs as a &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/locked-tapeout/actions/runs/7582853506/workflow&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github action&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;do_incr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rst_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moosic_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do_incr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rst_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moosic_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tinytapeout&#34;&gt;
    &lt;a href=&#34;#tinytapeout&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    TinyTapeout
&lt;/h2&gt;&lt;p&gt;With TinyTapeout, we can synthesize this design to silicon.
We will have to make a wrapper in order to load the key on our design&amp;hellip; and test that our design works as expected when the key is provided.
The &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/locked-tapeout/blob/main/src/project.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;main project file&lt;/a&gt; will be responsible for loading the key.
We are going to keep it simple and read the key directly from the primary inputs. On a production design, getting the key in would be part of the boot sequence.&lt;/p&gt;
&lt;p&gt;To make sure it all works, we wrote a &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/locked-tapeout/blob/main/test/test.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;testbench&lt;/a&gt; that checks that our counter behaves as expected&amp;hellip; and is indeed broken with the wrong key.&lt;/p&gt;
&lt;p&gt;And finally we have the full masks for the design! The code for the TinyTapeout project is available &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/locked-tapeout&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;, and our locked counter will be on the TT06 chip when it tapes out.
If you want to go further, have a look at &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/moosic-yosys-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the project page&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://peertube.f-si.org/videos/watch/7f250190-6d8f-4a67-8ed6-d07deda7fba0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;our Free Silicon Conference presentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For power users, the plugin provides a lot of additional options to pick your security metrics, or to balance security and performance.
Logic locking is an active area of research, and we are happy to provide an open-source tool to apply it to your designs.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Solving a Sudoku with SBY and Formal Verification</title>
        <link>http://blog.yosyshq.com/p/solving-sudoku-with-sby/</link>
        <pubDate>Mon, 06 Nov 2023 12:00:00 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/solving-sudoku-with-sby/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/cover_sby_sudoku.png" alt="Featured image of post Solving a Sudoku with SBY and Formal Verification" /&gt;&lt;p&gt;&lt;em&gt;This guest post is by Theophile Loubiere.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;solving-a-sudoku-with-sby-and-formal-verification&#34;&gt;
    &lt;a href=&#34;#solving-a-sudoku-with-sby-and-formal-verification&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Solving a Sudoku with SBY and Formal Verification
&lt;/h1&gt;&lt;p&gt;Recently, I began using SBY to formally verify my designs. You can check out my first attempt on my blog &lt;a class=&#34;link&#34; href=&#34;https://learn-fpga-easily.com/trying-formal-verification-with-symbiyosys-and-chisel/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;learn-fpga-easily&lt;/a&gt;. Formal Verification helps ensure that certain properties of your design always remain true, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bus arbitration&lt;/strong&gt;: &amp;ldquo;Only one master can receive the bus grant at any given time.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Overflow and Underflow&lt;/strong&gt;: &amp;ldquo;The FIFO buffer will never overflow or underflow.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;State Machine Reachability&lt;/strong&gt;: &amp;ldquo;The state machine can never transition from state_1 to state_3.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These kinds of properties would normally require an extensive functional testbench for coverage. However, with formal verification and SBY, they can be easily addressed with just a few assertions and assumptions.&lt;/p&gt;
&lt;p&gt;Given my newfound knowledge, it seemed completely natural that after embarrassingly failing to solve a Sudoku puzzle with my grandfather – a hit to my pride – I decided to repurpose the use of SBY just to figure out a Sudoku solution.&lt;/p&gt;
&lt;p&gt;Today, I am excited to share with you my overkill attempt to solve a simple Sudoku puzzle with SBY and Formal Verification.&lt;/p&gt;
&lt;h2 id=&#34;modeling-the-sudoku&#34;&gt;
    &lt;a href=&#34;#modeling-the-sudoku&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Modeling the Sudoku
&lt;/h2&gt;&lt;p&gt;In Verilog, we can represent a Sudoku grid straightforwardly: a two-dimensional register encompassing 9 rows and 9 columns, where each cell occupies 4 bits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudoku&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Internal 9x9 grid to make operations more intuitive
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keep&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`ifdef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FORMAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// see next section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;`endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the (* keep *) attribute ensures our register won&amp;rsquo;t be discarded during synthesis, even if it isn&amp;rsquo;t used anywhere.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it! Now, let&amp;rsquo;s dive into the interesting part: Formal Verification.&lt;/p&gt;
&lt;h2 id=&#34;how-to-solve-a-sudoku-with-formal-verification-&#34;&gt;
    &lt;a href=&#34;#how-to-solve-a-sudoku-with-formal-verification-&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    How to solve a sudoku with Formal Verification ?
&lt;/h2&gt;&lt;p&gt;Formal verification involves setting specific properties that your design must always satisfy. The formal solver then evaluates a vast array of mathematically choosen scenarios. If a property doesn&amp;rsquo;t always hold true, the solver will tell you: &amp;ldquo;Nope, your property does not hold true in this counter-example.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;But here&amp;rsquo;s the catch: If we lay down just one property, the solver might churn out a completely irrelevant solution. Take Sudoku: Every row in a correctly solved grid has every digits from 1 to 9. One obvious property is the sum of digits in a row totaling 45 (because 1+2+3+&amp;hellip;+9=45). Yet, with just this, the solver might suggest a row like: 0,0,0,0,0,0,0,0,45. Clearly flawed, given illegal numbers and the repetition.&lt;/p&gt;
&lt;p&gt;We must assume additional properties to narrow down the solution space and obtain relevant counterproofs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In digital design, we assume valid input behavior, focusing assertions on internal and output signals.&lt;/li&gt;
&lt;li&gt;For this Sudoku escapade, where we&amp;rsquo;re playfully repurposing the tool, assumptions will lean on the sudoku_grid register (typically a target for assertions).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, what assumptions should we make for Sudoku? The basic rules.&lt;/p&gt;
&lt;h3 id=&#34;assuming-the-basic-rules&#34;&gt;
    &lt;a href=&#34;#assuming-the-basic-rules&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Assuming the Basic Rules
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;All digits should be between 1 and 9&lt;/strong&gt;. Which translates to:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`ifdef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FORMAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// variables declaration for all forloops
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;genvar&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// assume all the digits are between 1 and 9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;generate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;digit_assumption_i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;digit_assumption_j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;&amp;#39;d9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;&amp;#39;d1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endgenerate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With these assumptions, the solver won&amp;rsquo;t try any numbers that are outside of this range.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;All digits in a row are all different&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;generate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;column_j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;column_k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endgenerate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;All digits in a column are all different&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;generate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;column_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row_j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row_k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endgenerate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;All digits in a box are all different&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;generate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_row_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_col_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row_i_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col_j_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row_m_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;						&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col_n_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;						&lt;span class=&#34;c1&#34;&gt;// Make sure we&amp;#39;re not comparing the same cell to itself
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;							&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;								&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;								&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;							&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;						&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endgenerate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;The initial grid cannot be changed&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// assume the intial grid
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initialization&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 6
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 7
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 8
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;using-sby-to-solve-the-grid&#34;&gt;
    &lt;a href=&#34;#using-sby-to-solve-the-grid&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Using SBY to solve the Grid
&lt;/h3&gt;&lt;p&gt;With the game rules handed over to our solver, we want it to return the solution now.&lt;/p&gt;
&lt;p&gt;As highlighted before, in a correctly solved Sudoku, every row, column, or box&amp;rsquo;s digit sum is 45. We simply need to request an example where this property holds true. And since there&amp;rsquo;s only one such example, it elegantly unfolds as our desired Sudoku solution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Ask SBY to explicitly cover the (only) case where sum=45s
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;cover&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;&amp;#39;d45&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`endif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FORMAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;lets-run-the-verification&#34;&gt;
    &lt;a href=&#34;#lets-run-the-verification&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Let&amp;rsquo;s run the verification
&lt;/h2&gt;&lt;p&gt;To install SBY and all the required formal solvers, I recommend following the straightforward installation process provided by &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/oss-cad-suite-build&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;oss-cad-suite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To execute the verification, we&amp;rsquo;ll need our sudoku.v file and a SBY configuration file named sudoku.sby with the content below:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[options]
mode cover

[engines]
smtbmc

[script]
read -formal sudoku.v
prep -top sudoku

[files]
sudoku.v
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All we have to do is run the following command :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sby -f sudoku.sby
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And as you can see&amp;hellip; it fails&amp;hellip; WAIT! WHAT?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2023/unreached_cover_statement.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;em&gt;SBY log&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Unreached cover statement&amp;hellip;&amp;rdquo; What does that mean?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The line assumptions are correct.&lt;/li&gt;
&lt;li&gt;The row assumptions are correct.&lt;/li&gt;
&lt;li&gt;The box assumptions are correct.&lt;/li&gt;
&lt;li&gt;The&amp;hellip; line 2 of the initialization is wrong&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;assume(sudoku_grid[1][5]==3); // wrong
assume(sudoku_grid[1][4]==3); // correct
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When I visited my grandfather, I handed him the original and copied it onto a paper to solve it myself&amp;hellip; I made a copying error(deep breath)&amp;hellip; At least we stumble upon a unexpected feature : we now know how to identify an unfeasible grid !&lt;/p&gt;
&lt;p&gt;Now, after correcting my mistake, it works as expected: SBY generates the solution for me!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the solution viewed through gtkwave (SBY give you the path of the vcd file):
&lt;img src=&#34;http://blog.yosyshq.com/static-2023/unreadable_solution.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;em&gt;GTKWave screenshot&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hmm&amp;hellip; that&amp;rsquo;s not very user-friendly to interpret.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take the futility of this exercise a step further and craft a Python script to visualize the solution. I&amp;rsquo;ve employed the pyDigitalWaveTools Python library to convert my VCD file into JSON format and have requested ChatGPT to create a script that reads the JSON and displays the solution in my terminal. All the sources can be accessed my &lt;a class=&#34;link&#34; href=&#34;https://github.com/LearnFpgaEasily/Solving-Sudoku-with-symbiyosys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, the moment we&amp;rsquo;ve all been waiting for - the solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s wrap this up. First off, if you&amp;rsquo;re ever stuck on that pesky Sudoku during a lazy Sunday afternoon, you now know there’s a&amp;hellip; let&amp;rsquo;s call it an “alternative” way to crack it. And check it is actually feasible.&lt;/p&gt;
&lt;p&gt;Now, on the real note: diving into techy stuff using simple problems we already know? It&amp;rsquo;s golden! It’s like trying to learn a new dance step with a song you already love. You get the hang of it faster and, more importantly, it&amp;rsquo;s fun. Playing around with SBY in this wild way just shows how cool and flexible these tools can be.&lt;/p&gt;
&lt;p&gt;Big Thanks to YosysHQ for letting me write on their blog. And to you, dear reader, remember: mix things up, try the unexpected, and most importantly, have some fun while you’re at it. Till next time!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How I went from blinker to RISC-V in 3 months</title>
        <link>http://blog.yosyshq.com/p/blinker-to-risc-v/</link>
        <pubDate>Mon, 15 May 2023 12:00:00 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/blinker-to-risc-v/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/blinker-to-riscv.jpg" alt="Featured image of post How I went from blinker to RISC-V in 3 months" /&gt;&lt;p&gt;&lt;em&gt;This guest post is by Bastian Löher.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;how-i-went-from-blinker-to-risc-v-in-3-months&#34;&gt;
    &lt;a href=&#34;#how-i-went-from-blinker-to-risc-v-in-3-months&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    How I went from blinker to RISC-V in 3 months
&lt;/h1&gt;&lt;p&gt;How does one get started with programming &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Field-programmable_gate_array&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FPGAs&lt;/a&gt; (field-programmable gate arrays)? Where does one even begin? Also, if you&amp;rsquo;ve ever wondered how a &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Central_processing_unit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CPU&lt;/a&gt; works and how you can build your own, keep reading!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;TL;DR:&lt;/em&gt; Getting into FPGA programming nowadays isn&amp;rsquo;t hard anymore. Get a &lt;a class=&#34;link&#34; href=&#34;https://www.joelw.id.au/FPGA/CheapFPGADevelopmentBoards&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cheap board&lt;/a&gt; with at least one LED that is supported by an open toolchain,
&lt;a class=&#34;link&#34; href=&#34;https://www.startpage.com/sp/search?query=fpga&amp;#43;vhdl&amp;#43;verilog&amp;#43;tutorial&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;search for a tutorial&lt;/a&gt;, and get that LED blinking!&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Introduction
&lt;/h2&gt;&lt;p&gt;As an experimental physicist, I have been working with FPGAs for many years. These versatile devices enable creating customized electronics for all kinds of applications. FPGAs typically contain thousands of mostly simple logic units that can be connected in sophisticated ways using a hardware description language (HDL). I have experience writing efficient software for low-latency embedded processors and have so far only made small adjustments to existing VHDL or Verilog projects. However, only recently have I had the opportunity to take a deeper dive into writing new logic designs from scratch.&lt;/p&gt;
&lt;p&gt;It does not feel that long ago that FPGA boards were prohibitively expensive devices, and the tools and IP cores were not accessible to everyone. Starting development for FPGAs used to be a costly investment and close to impossible to do on a small budget. Luckily, this situation has changed. Small FPGA chips now sell for as low as $10, and a lot of development is done on free and open-source toolchains. As it turns out, with enough ambition and a bit of courage, one can achieve reasonable results in FPGA-land today without breaking the bank!&lt;/p&gt;
&lt;h2 id=&#34;first-find-a-project&#34;&gt;
    &lt;a href=&#34;#first-find-a-project&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    First, find a project
&lt;/h2&gt;&lt;p&gt;For me, it all started with a new project that involved creating a device capable of measuring arrival time and length of logic signals with sub-nanosecond precision. The idea was to create a low-cost spectrometer for measuring high-intensity gamma radiation and replacing the commonly used ADC (analog-to-digital converter) circuit with a TDC (time-to-digital converter) implemented in an FPGA. So, instead of measuring the amplitude of the signal, only the time the signal spends above a certain threshold (&lt;a class=&#34;link&#34; href=&#34;https://ieeexplore.ieee.org/document/603658&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;time-over-threshold&lt;/a&gt;) is measured. This design reduces the system complexity but requires custom logic.&lt;/p&gt;
&lt;h2 id=&#34;choose-your-tools&#34;&gt;
    &lt;a href=&#34;#choose-your-tools&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Choose your tools
&lt;/h2&gt;&lt;p&gt;I have seen many projects written in VHDL and Verilog, but for this one, I wanted to try one of the new HDL alternatives. My language of choice happened to be the Python-based &lt;a class=&#34;link&#34; href=&#34;https://amaranth-lang.org/docs/amaranth/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Amaranth HDL&lt;/a&gt; (formerly known as nMigen), primarily because I had in mind to write the accompanying firmware for the device in &lt;a class=&#34;link&#34; href=&#34;https://micropython.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MicroPython&lt;/a&gt;. I was also intrigued by &lt;a class=&#34;link&#34; href=&#34;https://clash-lang.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Clash&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/SpinalHDL/SpinalHDL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpinalHDL&lt;/a&gt;, but Amaranth seemed to have an easier learning curve. So, with the clear goal of creating a working TDC, I jumped headfirst into writing Amaranth code. Over the course of the next year (where I spent most of the time on system design and writing software), I became more familiar with the language and successfully finished the project on time for our customer.&lt;/p&gt;
&lt;h2 id=&#34;set-priorities&#34;&gt;
    &lt;a href=&#34;#set-priorities&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Set priorities
&lt;/h2&gt;&lt;p&gt;While I was working on the project, I encountered &lt;a class=&#34;link&#34; href=&#34;https://hdl.github.io/awesome/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;many&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://www.fpga4fun.com/HDLtutorials.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;excellent&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://nandland.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;resources&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/RobertBaruch/nmigen-tutorial&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;introductory&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://vivonomicon.com/2020/04/14/learning-fpga-design-with-nmigen/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;courses&lt;/a&gt; for FPGA programming and logic design, and I read various code examples in different HDLs. I also questioned whether Amaranth was the right choice or if I should have chosen a more conventional language. One tutorial that particularly captured my attention was &lt;a class=&#34;link&#34; href=&#34;https://github.com/BrunoLevy/learn-fpga/blob/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV/README.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bruno Levy&amp;rsquo;s &amp;ldquo;Blinker to RISC-V&amp;rdquo;&lt;/a&gt;. The concept intrigued me; one starts with an innocent and all-too-familiar &amp;lsquo;blinky&amp;rsquo; example but ends up with a fully functional &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/RISC-V&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RISC-V&lt;/a&gt; CPU that can run code written by someone else. Following the tutorial for just 24 steps (the CPU executes the first code after step 7), I was curious to try it out immediately. However, I set it aside during the TDC project and only returned to it afterward.&lt;/p&gt;
&lt;h2 id=&#34;define-your-goals&#34;&gt;
    &lt;a href=&#34;#define-your-goals&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Define your goals
&lt;/h2&gt;&lt;p&gt;At that point, I had enough experience with Amaranth to tackle the tutorial as a practice exercise. Instead of using verilog, I followed Bruno&amp;rsquo;s tutorial in Amaranth HDL, using the open-source &lt;a class=&#34;link&#34; href=&#34;https://f4pga.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;F4PGA&lt;/a&gt; (formerly Symbiflow) toolchain and an FPGA board that was not supported in the tutorial (&lt;a class=&#34;link&#34; href=&#34;https://digilent.com/reference/programmable-logic/cmod-a7&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Digilent CMOD A7&lt;/a&gt; with &lt;a class=&#34;link&#34; href=&#34;https://www.xilinx.com/products/silicon-devices/fpga/artix-7.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xilinx Artix 7&lt;/a&gt;). I wanted to see how far I could go and was unaware of the obstacles that lay ahead.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2023/cmod_board.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;br&gt;
&lt;em&gt;Digilent CMOD A7 FPGA board with Xilinx Artix7. USB-UART dongle in the back.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;and-get-going&#34;&gt;
    &lt;a href=&#34;#and-get-going&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    And get going!
&lt;/h2&gt;&lt;p&gt;I started the course in December 2022 and &lt;a class=&#34;link&#34; href=&#34;https://github.com/bl0x/learn-fpga-amaranth&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;published the first version&lt;/a&gt;, including step 18 (mandelbrot generator), by the end of February 2023. Here are some of the things I learned during these three months: even though I had used Amaranth HDL before, I needed to learn a few more tricks to translate the tutorial code. I learned how valuable instant feedback through test benches and simulations can be. Most of the time, if the simulated logic was working correctly, the hardware implementation was doing the right thing. I had long wondered what makes a CPU a CPU: what are the essential parts, and how do they all work together to execute a set of instructions and manipulate memory and/or pixels on the screen?&lt;/p&gt;
&lt;p&gt;This is the question that the tutorial answered in great detail in the first 18 steps and unraveling the mystic black box that a CPU usually is, contributed to at least half the joy I experienced while putting together my own CPU. Bruno explains the &lt;a class=&#34;link&#34; href=&#34;https://riscv.org/technical/specifications/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RISC-V ISA&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-cc.adoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ABI&lt;/a&gt;, and together we build a more and more capable version of the processor step-by-step. At the same time, I learned the corresponding assembly language for RISC-V, which is essential for testing and programming the CPU at every step. The later steps focus on compiling third-party code with GCC and how to configure the linker so that code is executed from the correct piece of memory in the FPGA. I also learned a lot about compiled objects and ELF formats, which one usually doesn&amp;rsquo;t have to worry about when compiling for Linux-based systems.&lt;/p&gt;
&lt;h2 id=&#34;theres-more-to-it&#34;&gt;
    &lt;a href=&#34;#theres-more-to-it&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    There&amp;rsquo;s more to it!
&lt;/h2&gt;&lt;p&gt;In addition to the obvious takeaways, there were also several unexpected events that occurred along the way. One significant obstacle was that Bruno&amp;rsquo;s tutorial came with a &lt;a class=&#34;link&#34; href=&#34;https://github.com/BrunoLevy/learn-fpga/blob/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV/riscv_assembly.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;custom RISC-V assembler&lt;/a&gt;, written in Verilog, which assembled the instructions while compiling or simulating the logic. This meant that I had to figure out how to seamlessly integrate it with Amaranth. Moreover, I had to fill in jump offsets manually, which is not very convenient. To streamline the process, I went on a longer tangent to implement the &lt;a class=&#34;link&#34; href=&#34;https://github.com/bl0x/learn-fpga-amaranth/blob/main/tools/riscv_assembler.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;assembler in Python&lt;/a&gt;. It was a challenging task, but I succeeded in achieving seamless integration with Amaranth, without the need for manual jump offsets. At a later step, Bruno incorporates the &lt;a class=&#34;link&#34; href=&#34;https://github.com/olofk/corescore/blob/master/rtl/corescore_emitter_uart.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tiny UART sender&lt;/a&gt; by Olof Kindgren, I successfully ported it to Amaranth as well, which was a pleasant surprise since it almost worked on the first try.&lt;/p&gt;
&lt;p&gt;However, when I attempted to compile for the FPGA boards I had on hand, I realized that they were not supported by the &lt;a class=&#34;link&#34; href=&#34;https://github.com/amaranth-lang/amaranth-boards&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;amaranth-boards&lt;/a&gt; repository. Fortunately, I was able to modify a similar board description with the help of the reference manual for my hardware (and even get the code merged in time for this post). Meanwhile, I also discovered and fixed a bug in Amaranth itself, as well as some typos in Bruno&amp;rsquo;s tutorial. On more than one occasion I found out that I can effectively discover my own bugs by actually executing code on the CPU. I also learned how to use many great tools, such as &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.net/yosys/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://trabucayre.github.io/openFPGALoader/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;openFPGAloader&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://gtkwave.sourceforge.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GTKWave&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://www.veripool.org/verilator/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Verilator&lt;/a&gt;, and &lt;a class=&#34;link&#34; href=&#34;https://github.com/olofk/edalize&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Edalize&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m currently working through the last parts of Bruno&amp;rsquo;s tutorial, and while I still have a few steps to go, I&amp;rsquo;ve already learned a lot. Converting the examples to Amaranth HDL has been challenging, but not impossible. Personally, I enjoy working with Amaranth because its semantics are clear and it offers the full power of Python when needed. While some things are more verbose in Amaranth (such as Mux() and Repl()) than their Verilog counterparts, others can be written more concisely.&lt;/p&gt;
&lt;h2 id=&#34;i-could-not-have-done-it-alone&#34;&gt;
    &lt;a href=&#34;#i-could-not-have-done-it-alone&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    I could not have done it alone
&lt;/h2&gt;&lt;p&gt;During the process, I&amp;rsquo;ve had many questions about Amaranth, the build system, the toolchain, and the hardware. Luckily, the helpful community on IRC (#amaranth-lang on libera.chat) and &lt;a class=&#34;link&#34; href=&#34;https://github.com/amaranth-lang/amaranth&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; has always been quick to respond. Additionally, documentation for open toolchains and developing with these tools has greatly improved in the past year.&lt;/p&gt;
&lt;p&gt;Still, some endurance is needed to pull through, when things don&amp;rsquo;t work as expected. For example, my board and one of my chips were not supported by Amaranth, and I encountered issues compiling on an older laptop with an unsupported 32-bit host architecture. I also found myself in &lt;a class=&#34;link&#34; href=&#34;https://medium.com/knerd/the-nine-circles-of-python-dependency-hell-481d53e3e025&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;python package hell&lt;/a&gt; on more than one occasion. And as they say, the devil is in the details, since some seemingly small steps have taken considerably more time than anticipated (&amp;ldquo;proceed after you have a working RISC-V assembler&amp;rdquo;, &amp;ldquo;we&amp;rsquo;ll use this existing UART module&amp;rdquo;, &amp;ldquo;now just convert the ELF to HEX format&amp;rdquo;).&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;
    &lt;a href=&#34;#final-thoughts&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Final thoughts
&lt;/h2&gt;&lt;p&gt;Despite these challenges, my plan is to continue with the tutorial and get the SPI interface working. In the meantime, I&amp;rsquo;m also working on getting support for the &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/apicula&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;free Gowin toolchain&lt;/a&gt; (project apicula) into Amaranth&amp;rsquo;s build system. Looking ahead, I&amp;rsquo;m excited to apply the things I&amp;rsquo;ve learned from (not strictly) following Bruno&amp;rsquo;s tutorial to other projects. I&amp;rsquo;d also encourage anyone interested in these concepts to take their favorite HDL and port the tutorial. For me, this has been a great experience, and I&amp;rsquo;m certain that with a growing user base, FPGA design will become even more accessible than it is today!&lt;/p&gt;
&lt;h2 id=&#34;about-the-author&#34;&gt;
    &lt;a href=&#34;#about-the-author&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    About the author
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Dr. Bastian Löher&lt;/strong&gt; (Twitter: &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/y__&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@y__&lt;/a&gt;, Mastodon: &lt;a class=&#34;link&#34; href=&#34;https://mastodon.social/@bl0x@mastodon.social&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@bl0x@mastodon.social&lt;/a&gt;) ported &lt;a class=&#34;link&#34; href=&#34;https://github.com/BrunoLevy/learn-fpga/blob/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV/README.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bruno Levy&amp;rsquo;s FPGA tutorial&lt;/a&gt; to &lt;a class=&#34;link&#34; href=&#34;https://github.com/bl0x/learn-fpga-amaranth&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Amaranth HDL&lt;/a&gt;. He is a physicist and control systems engineer for nuclear physics experiments with heavy ion beams. He designs efficient data acquisition software for large heterogeneous particle detection systems and builds mobile radiation sensors for fun.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>First gateware on the Colorlight 5A-75B board </title>
        <link>http://blog.yosyshq.com/p/colorlight-part-2/</link>
        <pubDate>Tue, 28 Mar 2023 18:17:00 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/colorlight-part-2/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/colorlight_5a75b.jpg" alt="Featured image of post First gateware on the Colorlight 5A-75B board " /&gt;&lt;p&gt;&lt;em&gt;Welcome to the second part of the Colorlight 5A-75B article. You can find the &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/colorlight-part-1/&#34; &gt;first part here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this blogpost I will show you how to set up, synthesize and program your first Verilog program on the ECP5 FPGA using the Yosys suite.&lt;/p&gt;
&lt;h2 id=&#34;the-fpga-toolchain&#34;&gt;
    &lt;a href=&#34;#the-fpga-toolchain&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    The FPGA toolchain
&lt;/h2&gt;&lt;p&gt;The FPGA workflow consists of a few more steps compared to the usual software toolchain workflow.&lt;/p&gt;
&lt;p&gt;The Verilog source, which is a description of the logic that makes up the FPGA design, first needs to be synthesized.
The synthesis process scans through all the source files and libraries to find out the hierarchy of the modules, starting with the specified top module.
The result of this process is a low level logical representation of all the abstract components that will make up the final design.
In the FPGA flow, this step is done by the &lt;code&gt;yosys&lt;/code&gt; program, and results in a JSON file.&lt;/p&gt;
&lt;p&gt;The next step in the toolchain is place-and-route.
This is where the process becomes specific to the target FPGA family, because it takes the abstract components and maps it to physical parts that make up the FPGA.
The logical design is translated into configuration data for all the switches, lookup tables and registers in the FPGA&amp;rsquo;s macroblocks.
Yosys suite includes the Nextpnr tool which does this step.
For our board, which runs on the Lattice ECP5 fpga, we will have to use the &lt;code&gt;nextpnr-ecp5&lt;/code&gt; program.
This will give us a &lt;code&gt;.config&lt;/code&gt; file which represents the configuration of the fpga.&lt;/p&gt;
&lt;p&gt;The last step is to upload the configuration data to the target FPGA.
This step can have many forms, but in Yosys it has two parts: packing and uploading.
First, the configuration data needs to be packed into a format that is recognized by the FPGA controller.
This is done with the &lt;code&gt;ecppack&lt;/code&gt; executable. We will use &lt;code&gt;ecppack&lt;/code&gt; to create an SVF (Serial Vector Format).
The SVF is a pretty ingenious hack - the file contains plain JTAG commands that need to be sent to the target, which makes it independent from the JTAG adapter.
Using SVF, in principle, you can program any JTAG device with any JTAG adapter.
The second part is the actual upload of the SVF to the device.
We will use &lt;code&gt;openocd&lt;/code&gt; to communicate with our JTAG adapter and upload the SVF file with configuration data to it. After the upload is complete, the FPGA will start running.&lt;/p&gt;
&lt;h2 id=&#34;hello-blink&#34;&gt;
    &lt;a href=&#34;#hello-blink&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Hello, blink!
&lt;/h2&gt;&lt;p&gt;For our journey into getting the board to blink, we will use the following Verilog.
It&amp;rsquo;s a simple clock divisor module whose output is connected to an IO pin on the FPGA that is connected to the onboard LED.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module top(input clk_i, output led_o);
   reg  led_reg;
   wire baseclk;

   clkdiv #(.DIV(2000000)) slowclk (clk_i, baseclk);

   always @(posedge baseclk) begin;
      led_reg &amp;lt;= !led_reg;
   end

   assign led_o = led_reg;
endmodule


module clkdiv #(parameter DIV = 24&#39;d5000)(
    input wire clk_i,
    output wire clk_o
    );

    reg [24:0] count = 25&#39;b0;
    reg clk_o_internal = 1;
    //on this board we have a 25MHz clock

    always @(posedge clk_i) begin
        count &amp;lt;= count + 25&#39;b1;
        if(count == DIV) begin
            count &amp;lt;= 25&#39;b0;
            clk_o_internal &amp;lt;= ~clk_o_internal;
        end
    end
    assign clk_o = clk_o_internal;
endmodule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This piece of Verilog will take the clock input from the onboard oscillator, divide it by 500 thousand and output the divided clock to output led_o.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve called the file &lt;code&gt;blink.v&lt;/code&gt;. Now we need to synthesize it using &lt;code&gt;yosys&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yosys -p &amp;quot;synth_ecp5 -top top -json blink.json&amp;quot; blink.v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to specify the top module by name using the &lt;code&gt;-top &amp;lt;name&amp;gt;&lt;/code&gt; option.
Otherwise yosys may pick the wrong module as the top and later cause an error due to unconstrained IOs.&lt;/p&gt;
&lt;p&gt;The next step is to assign the logic IOs from the verilog modules to physical pins on the FPGA.
This is necesary for the Place and Route step and is done by a constraints file.
Looking up &lt;a class=&#34;link&#34; href=&#34;https://github.com/q3k/chubby75/blob/master/5a-75b/hardware_V8.0.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;q3k&amp;rsquo;s repository&lt;/a&gt; on the 5A-75B board we can find out that the clock is connected to FPGA pin P6, and the onboard led is connected to T6.
Here is how the LPF file looks like. I saved it as blink.lpf:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LOCATE COMP &amp;quot;clk_i&amp;quot; SITE &amp;quot;P6&amp;quot;;
IOBUF PORT &amp;quot;clk_i&amp;quot; IO_TYPE=LVCMOS33;

LOCATE COMP &amp;quot;led_o&amp;quot; SITE &amp;quot;T6&amp;quot;;
IOBUF PORT &amp;quot;led_o&amp;quot; IO_TYPE=LVCMOS25;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can run the Place and Route program, &lt;code&gt;nextpnr-ecp5&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nextpnr-ecp5 --json blink.json --textcfg blink_out.config --25k --package CABGA256 --lpf blink.lpf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We specify the parameters of the ECP5 FPGA: device type &lt;code&gt;LFE5U-25F&lt;/code&gt; (&lt;code&gt;--25k&lt;/code&gt;) and the package type.&lt;/p&gt;
&lt;p&gt;With the output config file all we need to do is to pack the bitstream into an SVF file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ecppack --svf blink.svf blink_out.config blink.bit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the SVF file it&amp;rsquo;s time to program the bitstream into the FPGA. Connect it to your JTAG adapter and power.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openocd -f colorlight_5a75b.cfg -c &amp;quot;svf -quiet -progress blink.svf; exit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The file colorlight_5a75b.cfg contains my openocd configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source [find interface/jlink.cfg]
adapter_khz 500
transport select jtag

jtag newtap ecp5 tap -irlen 8 -expected-id 0x41111043

init
scan_chain
targets

svf -tap ecp5.tap -quiet -progress blink.svf
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the &lt;code&gt;jtag newtap ...&lt;/code&gt; line defines a new Test Access Port that corresponds to the FPGA&amp;rsquo;s TAP. The first line configures openocd to use a JLink as the adapter. If you have a different adapter, then modify this file to your needs.&lt;/p&gt;
&lt;p&gt;The example project, along with a Makefile is &lt;a class=&#34;link&#34; href=&#34;https://github.com/polprog/colorlight_hello&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;available on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;about-the-author&#34;&gt;
    &lt;a href=&#34;#about-the-author&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    About the author
&lt;/h2&gt;&lt;p&gt;Chris &amp;ldquo;polprog&amp;rdquo; Lasocki (&lt;a class=&#34;link&#34; href=&#34;https://twitter.com/polprogpl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@polprogpl&lt;/a&gt;)
is a long time electronics hacker and an aspiring physicist. FPGAs are
one of his hobbies and he is currently writing a thesis in that field.
His other interests include laser physics as well as embedded programming
projects. He runs a blog at &lt;a class=&#34;link&#34; href=&#34;https://polprog.net&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;polprog.net&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tillitis and YosysHQ</title>
        <link>http://blog.yosyshq.com/p/tillitis-and-yosyshq/</link>
        <pubDate>Mon, 06 Feb 2023 11:56:24 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tillitis-and-yosyshq/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/tillitis.jpg" alt="Featured image of post Tillitis and YosysHQ" /&gt;&lt;p&gt;We are happy to announce that we are working with &lt;a class=&#34;link&#34; href=&#34;https://tillitis.se/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tillitis&lt;/a&gt; on their next generation of USB security key.&lt;/p&gt;
&lt;p&gt;Their current model TKey™ is &lt;a class=&#34;link&#34; href=&#34;https://github.com/tillitis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;open source hardware and software&lt;/a&gt;. It uses a Lattice iCE40, chosen due to it being supported by our open source FPGA tools.&lt;/p&gt;
&lt;p&gt;The new version includes an upgraded FPGA with more security features. YosysHQ will be working to add support for this FPGA to NextPNR.&lt;/p&gt;
&lt;p&gt;The best news is that the work will be open sourced so you will soon have a new family of FPGAs to experiment with!&lt;/p&gt;
&lt;p&gt;Follow Tillitis on &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/company/tillitis-ab/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linkedin&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/TillitisAB&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>3D raytraced game with open source C to FPGA toolchain</title>
        <link>http://blog.yosyshq.com/p/3d-raytracing/</link>
        <pubDate>Fri, 03 Feb 2023 12:00:00 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/3d-raytracing/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/sphery.png" alt="Featured image of post 3D raytraced game with open source C to FPGA toolchain" /&gt;&lt;p&gt;&lt;em&gt;This guest post is by Victor Suarez Rovere and Julian Kemmerer.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;3d-raytraced-game-using-fully-open-source-c-to-fpga-toolchain&#34;&gt;
    &lt;a href=&#34;#3d-raytraced-game-using-fully-open-source-c-to-fpga-toolchain&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    3D raytraced game using fully open source “C to FPGA” toolchain
&lt;/h1&gt;&lt;p&gt;Sphery vs. Shapes is the world&amp;rsquo;s first 3D raytraced game implemented completely as digital logic. This is all made possible by combining the OSS CAD Suite with CFlexHDL and PipelineC.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;
    &lt;a href=&#34;#summary&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Summary
&lt;/h2&gt;&lt;p&gt;In this article we present a tool flow that takes C++ code describing a raytraced game, and produces digital logic that can be implemented in off-the-shelf FPGAs (with no hard or soft CPU used). We aim for these tools to achieve a software friendly C-to-FPGA flow, making the development + simulation process exceptionally fast and easy, while providing high performance and low power hardware results.&lt;/p&gt;
&lt;p&gt;Thanks to project Trellis, Yosys and nextpnr can complete an open source synthesis and place and route flow for ECP5 FPGAs. This was the final piece needed to complete our C-&amp;gt;Bitstream workflow based on fully open source tools.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215363908-0625eb6e-a3db-485a-89e2-10267fca6b7c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;em&gt;Demo &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=hn3sr3VMJQU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;video&lt;/a&gt; and full sources: &lt;a class=&#34;link&#34; href=&#34;https://github.com/JulianKemmerer/PipelineC-Graphics&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/JulianKemmerer/PipelineC-Graphics&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;fpga-as-a-raytracer&#34;&gt;
    &lt;a href=&#34;#fpga-as-a-raytracer&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    FPGA as a raytracer
&lt;/h2&gt;&lt;p&gt;Interactive ray tracing hardware is novel in FPGA and our work serves as a perfect example that such complex data processing circuits can be developed, tested, and implemented in hardware all from a C language based flow that greatly eases the design process over traditional hardware description languages.&lt;/p&gt;
&lt;p&gt;Ultra-fast compiled C based emulation and C++ based tools like Verilator allow for fast simulation with realtime debug. This quick workflow is essential, being able to compile-as-C and see the results of code changes executed in realtime is a requirement for developing an interactive game, something not possible with standard FPGA simulators.&lt;/p&gt;
&lt;p&gt;The project generates each video pixel in hard-realtime “chasing the beam”, without a frame buffer and with zero jitter. Medium size Xilinx Artix 7 FPGAs have reached up to 1080p 60FPS (148.5MHz pixel clock). This article describes using an Lattice ECP5 FPGA to reach 480p 60FPS (25MHz pixel clock). Pipelining the entire ray tracer produces a position-to-color latency of a few microseconds at most. 1080p requires about ~400 pipeline stages, 480p requires ~70 stages - in both cases this pipelining is done automatically as part of the tool flow.&lt;/p&gt;
&lt;p&gt;The Xilinx Artix 7 FPGA achieves about 70 GFLOP/s using less than 1 watt, thanks to the pipeline with dozens of hardware resources working in parallel. Using that 28nm Xilinx 7 series FPGA, power reduction was calculated to be about 50X less compared with a modern  7nm CPU running heavily vector optimized instructions.&lt;/p&gt;
&lt;h2 id=&#34;workflow&#34;&gt;
    &lt;a href=&#34;#workflow&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Workflow
&lt;/h2&gt;&lt;p&gt;The workflow allows writing algorithms involving complex types like structures, floating point types and operations on vectors of those, all keeping a clean and familiar syntax.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215365602-9d1493ef-e8f1-444e-b794-b9ba7a898a08.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The source code is first converted by the &lt;a class=&#34;link&#34; href=&#34;https://github.com/suarezvictor/CflexHDL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CflexHDL&lt;/a&gt; tool from C++ to C. Then this subset of C can be converted to VHDL by &lt;a class=&#34;link&#34; href=&#34;https://github.com/JulianKemmerer/PipelineC&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PipelineC&lt;/a&gt; . GHDL and Yosys are used to convert the output VHDL into netlists that nextpnr can use.&lt;/p&gt;
&lt;p&gt;In addition to simple conversion to VHDL, PipelineC is primarily the mechanism for producing pipelined digital logic from the pure combinatorial logic derived from C code. PipelineC is aware of the FPGA timing characteristics of the specific device (by iterating with nextpnr) and adds pipelining as needed to meet timing. This avoids the tedious and error-prone task of manual pipelining that digital designers are familiar with. The flow reports a preliminary estimate of resources prior to synthesis and the amount of pipeline stages required to implement the user’s functionality.&lt;/p&gt;
&lt;p&gt;To produce a final bitstream GHDL+Yosys are used to generate a flattened single Verilog file version of the design that can easily be incorporated into existing build flows for board specific bitstream support, ex. Litex Orange Crab.&lt;/p&gt;
&lt;p&gt;Alternatively, the sources can be compiled and run “as C”, as a kind of  ultra-fast emulation/simulation (the game can be played in FullHD at 60FPS during debug on PC), or the Verilog sources can be processed by Verilator and graphically simulated by another tool we provided.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215365530-4c922851-9ad5-431d-b85e-fa4d94d0a197.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;From inside the PipelineC-Graphics repository there is one command to go from C file to the final bitstream generation and load your FPGA board:  &lt;code&gt;make load&lt;/code&gt;. See additional instructions on github.&lt;/p&gt;
&lt;h2 id=&#34;hardware-architecture&#34;&gt;
    &lt;a href=&#34;#hardware-architecture&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Hardware architecture
&lt;/h2&gt;&lt;p&gt;The project uses a fully open source board based on a Lattice ECP5 FPGA with 85K LUTs (the OrangeCrab board) plus a PMOD-compatible digital video connector for direct connection to a monitor by adapting 3.3V signals to the required CML levels (Machdyne DDMI), they publish schematics as well. For simplicity, only the positive polarity and ground were connected: it works since the differential levels are met, at least on our test setup. The integrated button on the FPGA board is used to play the game.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215365509-20f5e573-07dc-49b0-bcbc-73465a991a50.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This setup allowed 640x480 resolution (25MHz clock) instead of 1920x1080 (148.5MHz clock) as achieved with the original setup using a Xilinx 7 series FPGA device.&lt;/p&gt;
&lt;p&gt;The FPGA design consists of two main blocks: a state machine computing frame-by-frame animation and a long pixel rendering pipeline.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215365576-37c2fbdb-069d-4d61-9b17-71be7b165314.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;To meet 25MHz timing on the Lattice ECP5 FPGA the PipelineC tool created a pixel rendering pipeline of approximately ~70 stages. Below is a visual breakdown of how many stages each major function takes and roughly where/when in the pipeline it occurs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215365466-eae48ae2-8c27-408c-919a-190692aa10d4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The above pipeline uses operations on custom floating and fixed point types.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Operation&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Stages&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fixed Compare&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1 stage&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fixed Addition/Subtraction&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fixed Multiplication&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Compare&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Multiplication&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Addition/Subtraction&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Fast Reciprocal&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Fast Reciprocal Square Root&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Fast Square Root&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Fast Division&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;4 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float 3D Vector Dot Product&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float 3D Vector Normalize&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;7 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Ray Plane Intersection&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;10 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Ray Sphere Intersection&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;22 stages&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Float types use a 14 bit mantissa instead of the typical 23 bits, and fixed point values are represented with a total of 22 bits: 12 for integer portion, 10 for the fractional bits. Those types are provided by CflexHDL types and the effects of reduced precision can be readily appreciated with the provided graphical simulation tool, so the optimal size is easy to determine by performing the fast simulations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215368154-a9abd122-1308-4c15-b39b-7b19be07082d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;br&gt;
&lt;em&gt;Full precision vs. reduced precision in simulator window&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Typical times for development/test cycles are as follows:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Build command&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Build time&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Speed @1080p&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fast CPU simulation&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;make sim&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1s&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;60-86 FPS&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Precise CPU simulation&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;make gen&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5s&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;40FPS&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Logic simulation&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;make verilator&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1min 50s&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;50s per frame&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;software-architecture-and-components&#34;&gt;
    &lt;a href=&#34;#software-architecture-and-components&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Software architecture and components
&lt;/h2&gt;&lt;p&gt;All software and tools used in this project are Open Source. We integrated the following components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/JulianKemmerer/PipelineC&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PipelineC&lt;/a&gt; for C to VHDL, autopipelining (uses &lt;a class=&#34;link&#34; href=&#34;https://github.com/eliben/pycparser&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pycparser&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/suarezvictor/CflexHDL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CflexHDL&lt;/a&gt; for C++ parsing, fixed point types and arbitrary width floating point types, and vector of these using operator overloading&lt;/li&gt;
&lt;li&gt;Clang’s &lt;a class=&#34;link&#34; href=&#34;https://github.com/llvm-mirror/clang/blob/master/bindings/python/clang/cindex.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cindex&lt;/a&gt; to help in parsing C++&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.veripool.org/verilator/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Verilator&lt;/a&gt; for logic level simulation&lt;/li&gt;
&lt;li&gt;Custom &lt;a class=&#34;link&#34; href=&#34;https://github.com/JulianKemmerer/PipelineC-Graphics/blob/main/simulator_main.cpp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;simulator&lt;/a&gt; based on the &lt;a class=&#34;link&#34; href=&#34;https://www.libsdl.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SDL libraries&lt;/a&gt; (used when compiling the raytracer, or after Verilator C++ generation)&lt;/li&gt;
&lt;li&gt;YosysHQ&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.net/yosys/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys&lt;/a&gt; for Verilog parsing and synthesis&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/gatecat/nextpnr-xilinx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NextPNR&lt;/a&gt; for place and route (project &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/prjtrellis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Trellis&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://ghdl.free.fr/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GHDL&lt;/a&gt; from a &lt;a class=&#34;link&#34; href=&#34;https://github.com/ghdl/ghdl-yosys-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys plugin&lt;/a&gt; for VHDL to Verilog conversion (used by Verilator and for synthesis)&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/enjoy-digital/litex&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LiteX&lt;/a&gt; for Orange Crab SoC design, and its video core with serialized digital outputs (DVI)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;about-oss-cad-suite-integration&#34;&gt;
    &lt;a href=&#34;#about-oss-cad-suite-integration&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    About OSS CAD Suite Integration
&lt;/h2&gt;&lt;p&gt;The first version of the project used a commercial FPGA board and closed-source synthesis tools. After Project Trellis reverse-engineered the ECP5 device there were only a few minor workarounds that were needed to complete the chain of “everything open source” with Yosys and nextpnr.&lt;/p&gt;
&lt;p&gt;Part of PipelineC’s autopipelining iterations involve synthesizing the design purely as combinatorial logic (pre-pipelining). The share pass that Yosys uses by default for synth_ecp5 does not handle the massive combinatorial network that defines the ray tracer design very well. RAM usage (typically ~8GB max) quickly jumps past the 16GB we had on our workstations. Disabling the share pass required editing the Yosys source code to remove the specific ECP5 run step.&lt;/p&gt;
&lt;p&gt;The second issue we ran into was that in early versions of ECP5 place and route support, nextpnr was not able to pack LUTs+FFs into the shared primitive block as effectively as today. As such, early attempts failed to place and route the design while still having relatively plenty of resources remaining. But after the packing support improved, nextpnr began to produce fully placed and routed designs that could be further iterated on for pipelining. Related: often the nextpnr tool would end up in an infinite loop trying to fix a few remaining overused/unrouted wires - but recent changes seem to have reduced that issue as well.&lt;/p&gt;
&lt;p&gt;Since the PipelineC tool generates VHDL, we needed to convert the final generated sources to &lt;a class=&#34;link&#34; href=&#34;https://github.com/JulianKemmerer/PipelineC-Graphics/blob/main/verilog/top-gsd_orangecrab.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;a single&lt;/a&gt; Verilog file  (to be used in Verilator simulation and to generate the bitstream). This is done using the GHDL plugin for Yosys and the Yosys write_verilog command. Occasionally Yosys passes like opt and flatten  were needed during the import process in order to avoid spikes in RAM usage.&lt;/p&gt;
&lt;p&gt;None of these issues were blockers for long. We credit success to the fantastic open source community that provided lots of help in forums and discussions.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;
    &lt;a href=&#34;#conclusions&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Conclusions
&lt;/h2&gt;&lt;p&gt;We showed a ready-to-use toolchain for hardware design that greatly accelerates development time by using fast simulators at different stages, based on a known programming language syntax. The code can be translated to a logic circuit or run on a off-the-shelf CPU. A example application requiring complex processing was demonstrated by writing a game that implements the usual math operations for raytracing applications, with a clean syntax for math and all the algorithms. Since we apply an automatically calculated -and possibly long- pipeline, the system is capable of performing very well even compared to powerful modern CPUs, but using smaller and embeddable chips, at low power.&lt;/p&gt;
&lt;h2 id=&#34;about-the-authors&#34;&gt;
    &lt;a href=&#34;#about-the-authors&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    About the authors
&lt;/h2&gt;&lt;p&gt;This work is a result of the tight interactions between Julian Kemmerer (@pipelinec_hdl; fosstodon.org/@pipelinec) and Victor Suarez Rovere (Twitter: &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/suarezvictor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@suarezvictor&lt;/a&gt;) during almost a year.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Victor Suarez Rovere&lt;/strong&gt; is the author of &lt;a class=&#34;link&#34; href=&#34;https://github.com/suarezvictor/CflexHDL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CflexHDL&lt;/a&gt; tool used in this project (parser/generator and math types library) and of the Sphery vs. Shapes game. He’s a software and hardware developer and consultant experienced in Digital Signal Processing, mainly in the medical ﬁeld. Victor was awarded the ﬁrst prize in the Argentine National Technology contest, a gold medal from WIPO as &amp;ldquo;Best young inventor&amp;rdquo; and some patents related to a multitouch technology based on tomography techniques.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Julian Kemmerer&lt;/strong&gt; is the author of the &lt;a class=&#34;link&#34; href=&#34;https://github.com/JulianKemmerer/PipelineC&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PipelineC&lt;/a&gt; tool (C-like HDL w/ auto-pipelining) used in this work. He earned a Masters degree in Computer Engineering from Drexel University in Philadelphia where his work focused on EDA tooling. Julian currently works as an FPGA engineer at an AI focused SDR company called Deepwave Digital. He is a highly experienced digital logic designer looking to increase the usability of FPGAs by moving problems from hardware design into a familiar C language look.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Logic Primitive Transformations with Yosys Techmap</title>
        <link>http://blog.yosyshq.com/p/logic-primitive-transformations-with-yosys-techmap/</link>
        <pubDate>Thu, 24 Nov 2022 09:38:52 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/logic-primitive-transformations-with-yosys-techmap/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/yosys_techmap/SB_MAC16_block_diagram.png" alt="Featured image of post Logic Primitive Transformations with Yosys Techmap" /&gt;&lt;p&gt;&lt;em&gt;This guest post is by &lt;a class=&#34;link&#34; href=&#34;https://tomverbeure.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tom Verbeure&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Introduction
&lt;/h1&gt;&lt;p&gt;If you&amp;rsquo;re reading this you probably already know that &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys&lt;/a&gt;
is an open source logic synthesis tool. You may also know that it&amp;rsquo;s much more than that: in
my &lt;a class=&#34;link&#34; href=&#34;https://tomverbeure.github.io/2020/08/08/CXXRTL-the-New-Yosys-Simulation-Backend.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;earlier blog post about CXXRTL&lt;/a&gt;
I call it the &lt;em&gt;swiss army knife of digital logic manipulation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In most cases, using Yosys
means running pre-made scripts that contain Yosys commands: when I&amp;rsquo;m synthesizing RTL for an FPGA of the
Lattice iCE40 family, the &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/synth_ice40.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;synth_ice40&lt;/code&gt; command&lt;/a&gt; is
usually sufficient to convert my RTL into a netlist that can be sent straight to
&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/nextpnr&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;nextpnr&lt;/a&gt;
for place, route, and bitstream creation.&lt;/p&gt;
&lt;p&gt;My current version of Yosys has 232 commands, and many of these commands have an impressive list
of additional options, but sometimes you want to perform very particular logic operations that
don&amp;rsquo;t come standard with the tool.&lt;/p&gt;
&lt;p&gt;In this blog post, I&amp;rsquo;ll talk about the &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/techmap.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;techmap&lt;/code&gt; command&lt;/a&gt;,
a particularly powerful command that allows one to make custom logic transformations by replacing a
logic cell instance of a given type to one or more different ones.&lt;/p&gt;
&lt;h1 id=&#34;mapping-a-multiplication-to-an-fpga-dsp-cell&#34;&gt;
    &lt;a href=&#34;#mapping-a-multiplication-to-an-fpga-dsp-cell&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Mapping a multiplication to an FPGA DSP Cell
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;There is a companion &lt;a class=&#34;link&#34; href=&#34;https://github.com/tomverbeure/yosys_techmap_blog&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;yosys_techmap_blog project on GitHub&lt;/a&gt;
that contains the Verilog source files and the scripts to generate the graphics and Yosys results
of this blog post.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A good example of a &lt;code&gt;techmap&lt;/code&gt; operation is one where a generic multipication
is converted into a DSP block of an FPGA. For those who are unfamiliar with the technology,
FPGAs usually have only a few core logic primitives: lookup-table cells (LUTs) are used to construct
any kind of random logic circuit, RAM cells are, well, RAMs, and DSPs are larger cells that contain one
or more hardware multipliers, often in combination with an accumulator.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at this Verilog module, &lt;a class=&#34;link&#34; href=&#34;https://github.com/tomverbeure/yosys_techmap_blog/blob/main/mul.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;mul.v&lt;/code&gt;&lt;/a&gt;,
that multiplies two 10-bit values into a 20-bit result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When reading in the Verilog file, Yosys translates it into RTLIL (RTL Internal Language),
the internal representation of the design. The multiplication operation becomes a &lt;code&gt;$mul&lt;/code&gt; primitive,
and the whole design looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module \top
  wire width 10 input 1 \op0
  wire width 10 input 2 \op1
  wire width 20 output 3 \result
  cell $mul $mul$mul.v:3$1
    parameter \A_SIGNED 0
    parameter \A_WIDTH 10
    parameter \B_SIGNED 0
    parameter \B_WIDTH 10
    parameter \Y_WIDTH 20
    connect \A \op0
    connect \B \op1
    connect \Y \result
  end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yosys has the super useful &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/show.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;show&lt;/code&gt; command&lt;/a&gt;
that renders an RTLIL representation as a graph. I usually add the &lt;code&gt;-width -signed&lt;/code&gt; options to
annotate signals with their size and to show which cell ports are signed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/mul_rtlil.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top module as a graph with $mul instance&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This primitive must be converted into cells of the target technology. Most FPGAs from the
iCE40 family have a handful of DSPs. When you synthesize this module to the iCE40 technology with
&lt;code&gt;synth_ice40 -dsp&lt;/code&gt;, the &lt;code&gt;$mul&lt;/code&gt; primitive gets converted to an &lt;code&gt;SB_MAC16&lt;/code&gt; cell which is the DSP
primitive of the iCE40 family.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/SB_MAC16_block_diagram.png&#34; &gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/SB_MAC16_block_diagram.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SB_MAC16 internal block diagram&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;SB_MAC16&lt;/code&gt; DSP has a ton of data path and configuration signals, and the multiplier inputs and
output can be up to 16 and 32-bits wide respectively. It&amp;rsquo;s up to a &lt;code&gt;techmap&lt;/code&gt; step to assign all the right
values to the configuration signals, and to correctly tie down unused input data bits or ignore excess
output bits so that the DSP performs the desired 10-bit x 10-bit multiplication.&lt;/p&gt;
&lt;p&gt;After cleaning up some irrelevant cruft, the post-synthesis RTLIL looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module \top
  wire width 10 input 1 \op0
  wire width 10 input 2 \op1
  wire width 20 output 3 \result
  wire \result_SB_MAC16_O_ACCUMCO
  wire \result_SB_MAC16_O_CO
  wire width 12 \result_SB_MAC16_O_O
  wire \result_SB_MAC16_O_SIGNEXTOUT
  cell \SB_MAC16 \result_SB_MAC16_O
    parameter \A_REG 1&amp;#39;0
    parameter \A_SIGNED 0
    parameter \BOTADDSUB_CARRYSELECT 2&amp;#39;00
    parameter \BOTADDSUB_LOWERINPUT 2&amp;#39;10
    parameter \BOTADDSUB_UPPERINPUT 1&amp;#39;1
    parameter \BOTOUTPUT_SELECT 2&amp;#39;11
    parameter \BOT_8x8_MULT_REG 1&amp;#39;0
    parameter \B_REG 1&amp;#39;0
    parameter \B_SIGNED 0
    parameter \C_REG 1&amp;#39;0
    parameter \D_REG 1&amp;#39;0
    parameter \MODE_8x8 1&amp;#39;0
    parameter \NEG_TRIGGER 1&amp;#39;0
    parameter \PIPELINE_16x16_MULT_REG1 1&amp;#39;0
    parameter \PIPELINE_16x16_MULT_REG2 1&amp;#39;0
    parameter \TOPADDSUB_CARRYSELECT 2&amp;#39;11
    parameter \TOPADDSUB_LOWERINPUT 2&amp;#39;10
    parameter \TOPADDSUB_UPPERINPUT 1&amp;#39;1
    parameter \TOPOUTPUT_SELECT 2&amp;#39;11
    parameter \TOP_8x8_MULT_REG 1&amp;#39;0
    connect \A { 6&amp;#39;000000 \op0 }
    connect \ACCUMCI 1&amp;#39;x
    connect \ACCUMCO \result_SB_MAC16_O_ACCUMCO
    connect \ADDSUBBOT 1&amp;#39;0
    connect \ADDSUBTOP 1&amp;#39;0
    connect \AHOLD 1&amp;#39;0
    connect \B { 6&amp;#39;000000 \op1 }
    connect \BHOLD 1&amp;#39;0
    connect \C 16&amp;#39;0000000000000000
    connect \CE 1&amp;#39;0
    connect \CHOLD 1&amp;#39;0
    connect \CI 1&amp;#39;x
    connect \CLK 1&amp;#39;0
    connect \CO \result_SB_MAC16_O_CO
    connect \D 16&amp;#39;0000000000000000
    connect \DHOLD 1&amp;#39;0
    connect \IRSTBOT 1&amp;#39;0
    connect \IRSTTOP 1&amp;#39;0
    connect \O { \result_SB_MAC16_O_O \result }
    connect \OHOLDBOT 1&amp;#39;0
    connect \OHOLDTOP 1&amp;#39;0
    connect \OLOADBOT 1&amp;#39;0
    connect \OLOADTOP 1&amp;#39;0
    connect \ORSTBOT 1&amp;#39;0
    connect \ORSTTOP 1&amp;#39;0
    connect \SIGNEXTIN 1&amp;#39;x
    connect \SIGNEXTOUT \result_SB_MAC16_O_SIGNEXTOUT
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And here&amp;rsquo;s the equivalent graphical representation. (&lt;em&gt;Click to enlarge&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/mul_ice40.png&#34; &gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/mul_ice40.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top module as a graph after synthesis&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All Yosys commands are written in C++, but in the case of &lt;code&gt;techmap&lt;/code&gt; the specific mapping
operations are described in&amp;hellip; Verilog! It&amp;rsquo;s a very neat system that makes it possible for
anyone to create their own custom mapping operations without the need to touch a line of C++.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see exactly how that works for our example, and look at the source code of the &lt;code&gt;synth_ice40&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Yosys places all the technology-specific operations under the &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/tree/master/techlibs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;techlibs&lt;/code&gt;&lt;/a&gt;
directory. The code for &lt;code&gt;synth_ice40&lt;/code&gt; can be found in
&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/techlibs/ice40/synth_ice40.cc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;techlibs/ice40/synth_ice40.cc&lt;/code&gt;&lt;/a&gt;.
&lt;code&gt;synth_ice40&lt;/code&gt; doesn&amp;rsquo;t really have any smarts by itself: it&amp;rsquo;s a macro command, a series of lower level
Yosys commands strung together into a recipe.&lt;/p&gt;
&lt;p&gt;When you run &lt;code&gt;help synth_ice40&lt;/code&gt; in Yosys, you&amp;rsquo;ll see the following command line option:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    -dsp
        use iCE40 UltraPlus DSP cells for large arithmetic
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&amp;rsquo;s easy to see &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/853f4bb3c695d9f5183ef5064ec4cf9cdd8b5300/techlibs/ice40/synth_ice40.cc#L329-L341&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;which steps are activated in the source code&lt;/a&gt; when DSP mapping is enabled:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;memory_dff&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;no_rw_check_opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ice40_dsp will merge registers, reserve memory port registers first
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wreduce t:$mul&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;techmap -map +/mul2dsp.v -map +/ice40/dsp_map.v -D DSP_A_MAXWIDTH=16 -D DSP_B_MAXWIDTH=16 &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;-D DSP_A_MINWIDTH=2 -D DSP_B_MINWIDTH=2 -D DSP_Y_MINWIDTH=11 &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;-D DSP_NAME=$__MUL16X16&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;(if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;select a:mul2dsp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;              (if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;setattr -unset mul2dsp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;        (if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;opt_expr -fine&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;                (if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wreduce&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;                       (if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;select -clear&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;                 (if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ice40_dsp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;                     (if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;chtype -set $mul t:$__soft_mul&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;(if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s quite a bit going on here, but the most interesting command is this one:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    techmap -map +/mul2dsp.v -map +/ice40/dsp_map.v 
        -D DSP_A_MAXWIDTH=16 -D DSP_B_MAXWIDTH=16
        -D DSP_A_MINWIDTH=2 -D DSP_B_MINWIDTH=2 -D DSP_Y_MINWIDTH=11
        -D DSP_NAME=$__MUL16X16
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What we see here is that &lt;code&gt;techmap&lt;/code&gt; is performing the &lt;code&gt;$mul&lt;/code&gt; to &lt;code&gt;SB_MAC16&lt;/code&gt; conversion in two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;convert &lt;code&gt;$mul&lt;/code&gt; to a generic, technology independent DSP multiplier cell.&lt;/li&gt;
&lt;li&gt;convert the generic multiplier DSP cell to an iCE40 DSP cell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Step 1: mul2dsp.v&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Step 1 is done by &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/techlibs/common/mul2dsp.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;mul2dsp.v&lt;/code&gt;&lt;/a&gt;.
The code is a bit convoluted, but it has the answer as to why there&amp;rsquo;s this intermediate step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it deals with cases where a single &lt;code&gt;$mul&lt;/code&gt; operation requires more than one DSP.&lt;/p&gt;
&lt;p&gt;For example, a 32-bit x 32-bit to 64-bit multiplication is split into 4
16x16=32 multiplications and some additions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it doesn&amp;rsquo;t do the conversion when the inputs of the multiplication are too small&lt;/p&gt;
&lt;p&gt;This avoids wasting precious DSP resources on something that can be implemented with core logic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;-D ...&lt;/code&gt; arguments of the &lt;code&gt;techmap&lt;/code&gt; command specify Verilog defines that are passed to the techmap
file. It&amp;rsquo;s used to parameterize the conversion process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-D DSP_A_MAXWIDTH=16 -D DSP_B_MAXWIDTH=16&lt;/code&gt; informs &lt;code&gt;mul2dsp&lt;/code&gt; that the maximum input size of
the DSP is 16 bits.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D DSP_A_MINWIDTH=2 -D DSP_B_MINWIDTH=2 -D DSP_Y_MINWIDTH=11&lt;/code&gt; provides the minimum requirements
that must be satisfied to do the conversion.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D DSP_NAME=$__MUL16X16&lt;/code&gt; provides the name of the generic multiplier cells that should be created.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can run that first step by ourselves and check the result:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;read_verilog mul.v
clean -purge
techmap -map +/mul2dsp.v -D DSP_A_MAXWIDTH=16 -D DSP_B_MAXWIDTH=16 -D DSP_A_MINWIDTH=2 -D DSP_B_MINWIDTH=2 -D DSP_Y_MINWIDTH=11 -D DSP_NAME=$__MUL16X16
clean -purge
show -width -signed -format png -prefix mul_mul2dsp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/mul_mul2dsp.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top module after mul2dsp phase&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;In case you were wondering, here&amp;rsquo;s what this first step looks like for a 20-bit x 20-bit to 40-bit multiplier:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/large_mul_techmap.png&#34; &gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/large_mul_techmap.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top module for $mul 20x20=40 after mul2dsp phase&#34;
	
	
&gt;&lt;/a&gt;
&lt;em&gt;(Click to enlarge)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yosys can often create very long internal labels that stretch the graphical representation, so
I zoomed the image to the part that counts. The 3 red rectangles are the &lt;code&gt;$__MUL16X16&lt;/code&gt; cells that will be converted
to iCE40 DSPs. The blue rectangle is a &lt;code&gt;$__soft_mul&lt;/code&gt; cell that will be converted into random logic
at a large stage, and the 3 green rectangles are &lt;code&gt;$add&lt;/code&gt; cells to bring the results of the different multipliers
together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: ice40/dsp_map.v&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Step 2 of the &lt;code&gt;techmap&lt;/code&gt; process, &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/techlibs/ice40/dsp_map.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;ice40/dsp_map.v&lt;/code&gt;&lt;/a&gt;
is trivial: it converts the generic &lt;code&gt;$__MUL16X16&lt;/code&gt; multiplier cell into an &lt;code&gt;SB_MAC16&lt;/code&gt; cell, wires up the data path inputs and output,
and straps all the other configuration inputs so that the cell is configured as a straight
multiplier.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$__MUL16X16&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;SB_MAC16&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NEG_TRIGGER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C_REG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_REG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_REG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D_REG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TOP_8x8_MULT_REG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOT_8x8_MULT_REG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PIPELINE_16x16_MULT_REG1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PIPELINE_16x16_MULT_REG2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TOPOUTPUT_SELECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TOPADDSUB_LOWERINPUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TOPADDSUB_UPPERINPUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TOPADDSUB_CARRYSELECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOTOUTPUT_SELECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOTADDSUB_LOWERINPUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOTADDSUB_UPPERINPUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOTADDSUB_CARRYSELECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MODE_8x8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_REPLACE_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;a-horribly-contrived-example-problem&#34;&gt;
    &lt;a href=&#34;#a-horribly-contrived-example-problem&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    A Horribly Contrived Example Problem
&lt;/h1&gt;&lt;p&gt;Have a look at the following Verilog example code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;top_unsigned&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The graphical representation is as expected:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add_orig.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned original version&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I sometimes use &lt;a class=&#34;link&#34; href=&#34;https://tomverbeure.github.io/2020/08/08/CXXRTL-the-New-Yosys-Simulation-Backend.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CXXRTL&lt;/a&gt; to simulate my designs.
When I run &lt;code&gt;write_cxxrtl&lt;/code&gt;, the generated file contains the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_top__unsigned&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_uu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_op0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is exactly as expected, and there&amp;rsquo;s nothing wrong with it. But one thing that bothers me is that CXXRTL
uses 32-bit integer values (&amp;ldquo;chunks&amp;rdquo;) for all its operations. In the code above, there&amp;rsquo;s a 64-bit addition, and
CXXRTL implements those by
&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/853f4bb3c695d9f5183ef5064ec4cf9cdd8b5300/backends/cxxrtl/cxxrtl.h#L521-L532&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;splitting things up into multiple 32-bit additions&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;n&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Invert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CarryIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*CarryOut*/&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;alu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;carry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CarryIn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Invert&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;carry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msb_mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;carry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;carry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;carry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s a hand-crafted carry-ripple adder. Now, don&amp;rsquo;t worry, things are really not as bad as it seems,
because all the variables that are used for the &lt;code&gt;if&lt;/code&gt; conditionals and the &lt;code&gt;for&lt;/code&gt; loop are constants. Any
good C++ compiler will optimize the addition above into only a few assembler instructions.&lt;/p&gt;
&lt;p&gt;If you know your binary adder basics, you see that the addition of a 7-bit and a 6 bit operand will result
at most in an 8-bit result. All higher bits will always be 0. It&amp;rsquo;s overkill to have a 64-bit adder.&lt;/p&gt;
&lt;p&gt;Yosys already has the &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/wreduce.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;wreduce&lt;/code&gt; command&lt;/a&gt; that reduces logic
operations to just the number of bits that are really needed.&lt;/p&gt;
&lt;p&gt;We can see this when we run the following commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;read_verilog add.v
hierarchy -top top_unsigned
wreduce
clean -purge
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add_wreduce.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned after wreduce&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;And here&amp;rsquo;s the relevant CXXRTL generated code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_top__unsigned&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_uu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_op0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That looks better, but is that really true? The addition returns an 8-bit value, but since
the smallest chunk is 32-bits, the &lt;code&gt;slice&amp;lt;7,0&amp;gt;&lt;/code&gt; command now requires a read-modify-write
operation.&lt;/p&gt;
&lt;p&gt;What I really want is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_top__unsigned&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_uu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_op0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;		&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unfortunately, Yosys doesn&amp;rsquo;t have a command that does this for me, and I really don&amp;rsquo;t
want to modify the &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/passes/opt/wreduce.cc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;C++ code of the &lt;code&gt;wreduce&lt;/code&gt; command&lt;/a&gt;
to make it so.&lt;/p&gt;
&lt;h1 id=&#34;a-custom-techmap-transformation-to-the-rescue&#34;&gt;
    &lt;a href=&#34;#a-custom-techmap-transformation-to-the-rescue&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    A Custom Techmap Transformation to the Rescue!
&lt;/h1&gt;&lt;p&gt;If you start Yosys, running &lt;code&gt;help techmap&lt;/code&gt; will give you an exhaustive list of all the features that
you might ever need. But instead of repeating everything in there, let&amp;rsquo;s create an &lt;code&gt;add_reduce&lt;/code&gt; techmap
transformation to solve the problem of the previous section.&lt;/p&gt;
&lt;p&gt;Here are some of the basics of a techmap transformation Verilog module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a techmap transformation only operates on a single design cell.&lt;/p&gt;
&lt;p&gt;You can not use &lt;code&gt;techmap&lt;/code&gt; to perform multi-cell optimizations such mapping a &lt;code&gt;$mul&lt;/code&gt; followed
by an &lt;code&gt;$add&lt;/code&gt; onto an FPGA DSP has multiply-accumulator support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a design cell that is transformed by a techmap is selected by a string that contains a list of cell
types that are specified with the &lt;code&gt;(* techmap_celltype &amp;quot;...&amp;quot;)&lt;/code&gt; attribute. If the techmap module doesn&amp;rsquo;t have
such an attribute, then it&amp;rsquo;s determined by the name of the Verilog module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;by default, a techmap operation will iterate on itself until there&amp;rsquo;s nothing left that matches.&lt;/p&gt;
&lt;p&gt;If a techmap operation replaces an &lt;code&gt;$add&lt;/code&gt; primitive by a new &lt;code&gt;$add&lt;/code&gt; primitive, techmap will run again
on the second one. Without some kind of abort mechanism, this will result in an endless loop!&lt;/p&gt;
&lt;p&gt;There are multiple ways to avoid such an endless loop though. I&amp;rsquo;ll get to that later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it&amp;rsquo;s always a good idea to normalize the configuration on which you want to do the main transformation.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a good example of what I mean by that: we want to reduce the size of an adder
based on the size of its inputs. But an adder has 2 inputs, and if these inputs have a different
size, then the transformation will have a different code path depending on which input is largest.&lt;/p&gt;
&lt;p&gt;However, an addition is commutative: the order of the inputs doesn&amp;rsquo;t matter.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s easier first do a normalization where the A input is guaranteed to be larger or equal than
the B input by swapping the inputs, so that actual reduction transformation only has to deal with one case.&lt;/p&gt;
&lt;p&gt;The earlier discussed &lt;code&gt;mul2dsp&lt;/code&gt; techmap module
&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/techlibs/common/mul2dsp.v#L97-L108&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;does the same thing&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The add_reduce techmap module declaration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this example, I want a transformation that only works on an &lt;code&gt;$add&lt;/code&gt; instance, so I could
create a techmap Verilog module like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But I prefer to use a descriptive name for the module and use the &lt;code&gt;(* techmap_celltype ...)&lt;/code&gt; option to select
the cell types on which the module operates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;techmap_celltype&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;$add&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;The add_reduce techmap module interface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The techmap module interface should be the same as the cell on which it operates. Both the
input/output signals and the parameters must be the same. Yosys has a Verilog file called
&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/techlibs/common/simlib.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;simlib.v&lt;/code&gt;&lt;/a&gt; that
contains the reference simulation modules of all its internal primitives. You can use
this to check out the interface details of particular primitive.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/techlibs/common/simlib.v#L834-L844&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the one for the &lt;code&gt;$add&lt;/code&gt; primitive&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;add_reduce&lt;/code&gt; techmap module has the same interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;techmap_celltype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;$add&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_reduce&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;force_downto&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;force_downto&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;force_downto&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;force_downto&lt;/code&gt; attribute ensures that the highest numbered bit of each signal is
the MSB. When this attribute is present, Yosys will automatically swap around the bits of connected
wires so that you don&amp;rsquo;t need to worry about wackos who use bit 0 as MSB.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;add_reduce stop conditions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since we&amp;rsquo;re replacing an &lt;code&gt;$add&lt;/code&gt; primitive with another &lt;code&gt;$add&lt;/code&gt; primitive, we need to make sure that
there are special conditions to prevent the &lt;code&gt;techmap&lt;/code&gt; operation to run forever.&lt;/p&gt;
&lt;p&gt;We can tell the &lt;code&gt;techmap&lt;/code&gt; command to stop transforming the current cell instance
by assigning a non-zero value to the &lt;code&gt;_TECHMAP_FAIL_&lt;/code&gt; wire:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_FAIL_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For this operation, we want stop transforming an &lt;code&gt;$add&lt;/code&gt; primitive for a number of conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;when the size of the adder is already equal or smaller than the minimal desired adder.&lt;/p&gt;
&lt;p&gt;We can set the minimum size with the `Y_MIN_WIDTH define.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the size of the adder can&amp;rsquo;t be reduced because it would change the result of the calculation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When it&amp;rsquo;s a signed addition and we only want to transform unsigned additions.&lt;/p&gt;
&lt;p&gt;The `REDUCE_SIGNED define must be set to allow signed adder transformation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This translates into the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;localparam&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SIGNED_ADDER&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;generate&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;`Y_MIN_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_FAIL_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_FAIL_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIGNED_ADDER&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;`REDUCE_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_FAIL_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are other ways to prevent &lt;code&gt;techmap&lt;/code&gt; to run forever.  For example, in the &lt;code&gt;mul2dsp.v&lt;/code&gt; code,
a &lt;code&gt;$__soft_mul&lt;/code&gt; cell used instead of a &lt;code&gt;$mul&lt;/code&gt; primitive. Yosys has no such primitive, but
in a later step, after &lt;code&gt;techmap&lt;/code&gt; has been completed, this &lt;code&gt;$__soft_mul&lt;/code&gt; cell is converted
back to a &lt;code&gt;$mul$&lt;/code&gt; cell:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chtype -set $mul t:$__soft_mul
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;add_reduce normalization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The normalization code of &lt;code&gt;add_reduce&lt;/code&gt; is pretty much a straight copy of the one
from &lt;code&gt;mul2dsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;generate&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;are&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;swapped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_REPLACE_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;               &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;               &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When using &lt;code&gt;_TECHMAP_REPLACE_&lt;/code&gt; as instance name of the swapped &lt;code&gt;$add&lt;/code&gt; primitive, it
will inherit the instance name of the original instance. This is one of the
many predefined variables that are explained by running &lt;code&gt;help techmap&lt;/code&gt; in Yosys.&lt;/p&gt;
&lt;p&gt;Since we replace &lt;code&gt;$add&lt;/code&gt; with &lt;code&gt;$add&lt;/code&gt;, running &lt;code&gt;techmap&lt;/code&gt; will result in the
&lt;code&gt;$add&lt;/code&gt; cell being transformed twice times if B is larger than A: the first time
to swap the inputs, and the second time for the actual reduction.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;techmap&lt;/code&gt; needs to transform the same cell multiple times, it can
be hard to debug. You can use the &lt;code&gt;-max_iter &amp;lt;number&amp;gt;&lt;/code&gt; option to limit
the number of transformations.&lt;/p&gt;
&lt;p&gt;For example, here&amp;rsquo;s what the design originally looked like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add_orig.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned original version&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;And here&amp;rsquo;s how things look when stopping the &lt;code&gt;add_reduce&lt;/code&gt; operation after the
first iteration:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;techmap -map add_reduce.v -max_iter 1
clean -purge
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add_swap_clean.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned after swapping inputs&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;op1&lt;/code&gt; with the largest input size of 7 is now connected to A!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The actual add_reduce transformation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that all preliminary formalities are behind use, the actual reduction
code is pretty straightfoward:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;localparam&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ADDER_WIDTH&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;`MAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;`Y_MIN_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ADDER_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_REPLACE_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ADDER_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; 	&lt;span class=&#34;c1&#34;&gt;// Reduced output size
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Higher bits are 0 or sign extension
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ADDER_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ADDER_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIGNED_ADDER&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ADDER_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The final &lt;code&gt;add_reduce.v&lt;/code&gt; code can be found &lt;a class=&#34;link&#34; href=&#34;https://github.com/tomverbeure/yosys_techmap_blog/blob/main/add_reduce.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.
We can run the whole thing with:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;techmap -map add_reduce.v -D Y_MIN_WIDTH=32
clean -purge
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result is exactly what we wanted, as shown in the graphical diagram&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add_reduce.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned after custom reduce&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;and in the CXXRTL-generated code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_top__unsigned&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_uu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_op0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;formal-equivalence-check&#34;&gt;
    &lt;a href=&#34;#formal-equivalence-check&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Formal Equivalence Check
&lt;/h1&gt;&lt;p&gt;Whenever you do logic transformations, it&amp;rsquo;s not a bad idea to check that the pre- and
post-transformation logic behaves exactly the same. Yosys has a basic built-in equivalence
checker. It&amp;rsquo;s not a performance monster, but it&amp;rsquo;s good enough for this kind of use case.&lt;/p&gt;
&lt;p&gt;In the example below, I&amp;rsquo;m verifying the &lt;code&gt;add_reduce&lt;/code&gt; techmap on a design with an adder that
has an output that&amp;rsquo;s 10 instead of 64 bits, and the minimum size is set to 8.
This makes the size of the graphs more managable.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Load the original design
read_verilog add.v
hierarchy -top top_unsigned10
rename top_unsigned10 top_unsigned

# Make a golden reference copy of the unmodified design
copy top_unsigned top_unsigned_gold

# Select the original version to do the techmap
select top_unsigned

# Do the techmap on top_unsigned
techmap -map add_reduce.v -D Y_MIN_WIDTH=8 
clean -purge
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So far, so good: Yosys now has 2 designs. &lt;code&gt;top_unsigned_gold&lt;/code&gt; is the original one:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add10_gold.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned10 golden&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;top_unsigned&lt;/code&gt; has been transformed with the techmap:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add10_reduce.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned10 reduce&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s compare them:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;equiv_make top_unsigned_gold top_unsigned top_equiv
select top_equiv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;equiv_make&lt;/code&gt; has the golden and the transformed design as input and creates a new
design with &lt;code&gt;$equiv&lt;/code&gt; primitive cells inserted at the output of both designs. These cells
will tell the equivalence checker which nets to check for formal equivalence. The
new design &lt;code&gt;top_equiv&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add10_equiv_make.png&#34; &gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add10_equiv_make.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned10 equiv_make&#34;
	
	
&gt;&lt;/a&gt;
&lt;em&gt;(Click to enlarge)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the new design has both the golden and the transformed logic on the left,
driven by the same inputs. For there are 10 &lt;code&gt;$equiv&lt;/code&gt; cells, one for each bit of the output.&lt;/p&gt;
&lt;p&gt;We can now run the equivalence check:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;equiv_simple
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You&amp;rsquo;ll see something like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;8. Executing EQUIV_SIMPLE pass.
Found 10 unproven $equiv cells (1 groups) in top_equiv:
 Grouping SAT models for \sum0:
  Trying to prove $equiv for \sum0 [0]: success!
  Trying to prove $equiv for \sum0 [1]: success!
  Trying to prove $equiv for \sum0 [2]: success!
  Trying to prove $equiv for \sum0 [3]: success!
  Trying to prove $equiv for \sum0 [4]: success!
  Trying to prove $equiv for \sum0 [5]: success!
  Trying to prove $equiv for \sum0 [6]: success!
  Trying to prove $equiv for \sum0 [7]: success!
  Trying to prove $equiv for \sum0 [8]: success!
  Trying to prove $equiv for \sum0 [9]: success!
Proved 10 previously unproven $equiv cells.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Each individual bit has been proven to be correct.&lt;/p&gt;
&lt;p&gt;We can make Yosys fail if there were any unproven &lt;code&gt;$equiv&lt;/code&gt; cells, like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;equiv_status -assert
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, in our case, all is well:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;9. Executing EQUIV_STATUS pass.
Found 10 $equiv cells in top_equiv:
  Of those cells 10 are proven and 0 are unproven.
  Equivalence successfully proven!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&amp;rsquo;ve now proven that our &lt;code&gt;add_reduce&lt;/code&gt; techmap is correct, but that doesn&amp;rsquo;t mean
it&amp;rsquo;s guaranteed bug free: we&amp;rsquo;ve only tested one combination of input and output
signal sizes. To be absolutely sure, you&amp;rsquo;d need more variety of test cases.&lt;/p&gt;
&lt;p&gt;This is only a quick example of what Yosys can do, there&amp;rsquo;s a variety of additional
equivalence and logic proof features, most of which I don&amp;rsquo;t know much about! You
could start by checking out the help information for the &lt;code&gt;equiv_*&lt;/code&gt;, &lt;code&gt;miter&lt;/code&gt;, and &lt;code&gt;sat&lt;/code&gt;
commands to learn more.&lt;/p&gt;
&lt;h1 id=&#34;cleaning-up&#34;&gt;
    &lt;a href=&#34;#cleaning-up&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Cleaning Up
&lt;/h1&gt;&lt;p&gt;When Yosys creates new cells and reconnects wires, it won&amp;rsquo;t immediately delete older cells and wires
that aren&amp;rsquo;t used anymore. You need to expliclity tell Yosys to do so with the &lt;code&gt;clean -purge&lt;/code&gt;
command that you can see in some of the command sequences above.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what the reduced adder looks like without first running a clean:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add_reduce_unclean.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned after custom reduce without clean&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why you see a &lt;code&gt;clean -purge&lt;/code&gt; statement all over the place
&lt;a class=&#34;link&#34; href=&#34;https://github.com/tomverbeure/yosys_techmap_blog/blob/main/add_reduce.yosys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;in the script&lt;/a&gt;
generates all the pretty pictures of this blog post.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h1&gt;&lt;p&gt;Techmap is a very nice tool to have to transform single cells into something that better maps to
your chosen target. The example that I&amp;rsquo;ve given here is a bit dumb (I&amp;rsquo;m not even sure if it would
actually result in better compiled CXXRTL code!), but it shows some of the potential of what
can be achieved.&lt;/p&gt;
&lt;p&gt;I have only scratched the surface of what can be done with it: there are ways to make a &lt;code&gt;techmap&lt;/code&gt;
module behave differently based on whether or not certain input bits are constant, you can
instruct Yosys to run another  Yosys command after performing a &lt;code&gt;techmap&lt;/code&gt; iteration, and
so forth.&lt;/p&gt;
&lt;p&gt;If you want to go deeper, you should definitely start by checking out the help instructions, not
only of &lt;code&gt;techmap&lt;/code&gt; command, but also some of the other ones.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;
    &lt;a href=&#34;#references&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    References
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Main Yosys repo on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/tomverbeure/yosys_techmap_blog&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;yosys_techmap_blog repo on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Contains the Verilog code and the Yosys scripts to generate all the graphs of this blog post.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Introducing the Colorlight 5A-75B board</title>
        <link>http://blog.yosyshq.com/p/colorlight-part-1/</link>
        <pubDate>Sun, 16 Oct 2022 18:17:00 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/colorlight-part-1/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/colorlight_5a75b.jpg" alt="Featured image of post Introducing the Colorlight 5A-75B board" /&gt;&lt;p&gt;&lt;em&gt;This guest post is the first in a two part series by Chris Lasocki.
Part 2 is &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/colorlight-part-2/&#34; &gt;now available here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It seems that it was an accident - a generic part of a LED display has
become a low cost FPGA development board. The board in question is the
Colorlight 5A-75B, which is a so-called receiver card. Featuring a
Lattice ECP5 FPGA, supported by Yosys, it allows you to leverage a
fully open-source FPGA development toolchain. Priced on average at
20-25 USD, it is a very accessible board.&lt;/p&gt;
&lt;p&gt;The Colorlight 5A-75B was originally a part of a modular LED display
standard. It&amp;rsquo;s a receiver card, which means that it sits between the
computer controlling the show, and the LED panels themselves. It fulfills a
basic but crucial task of receiving the video signal and driving the
RGB panels accordingly. This takes a lot of bandwidth, so it is
equipped with a moderately fast ECP5 LFE5U25-F FPGA and two Gigabit
Ethernet interfaces. There is also a 16Mbit SDRAM for temporary
storage and a Flash memory of the same size for storing the
bitstream. It features 8 output ports of a known pinout (HUB75) and 5V
outputs. The board has caught attention of hardware hackers and
soon after was fully &lt;a class=&#34;link&#34; href=&#34;https://github.com/q3k/chubby75&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;reverse
engineered&lt;/a&gt; by q3k and others. A
schematic with pinouts is available, as well as other
documentation. A great amount of work has been done here and this is
what enables the Colorlight board to be used in the hacker spirit way.&lt;/p&gt;
&lt;p&gt;Accidentally, this board design happens to be a great compromise
between feature-rich and IO-rich. The only on-board peripherals are the
basic or high speed ones, which would be hard to connect over the 0.1&amp;quot;
pin headers. It is also the only development board with a dual Gigabit
Ethernet interface in its price range. Since it&amp;rsquo;s just an FPGA, the
16MBit SDRAM should be enough for most applications, while being easy
to implement a controller for.&lt;/p&gt;
&lt;h2 id=&#34;hacking-the-board&#34;&gt;
    &lt;a href=&#34;#hacking-the-board&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Hacking the board
&lt;/h2&gt;&lt;p&gt;With the on-board JTAG port, you just need to solder on
a 4 pin header and you are ready to upload your own bitstreams to the
ECP5 FPGA. This FPGA is fully supported by the &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/oss-cad-suite-build&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys toolchain&lt;/a&gt;, from
the verilog compiler through place and route engine to the bitstream
generator, and along with an open source JTAG adapter like the Bus
Pirate (or anything else, really) it only takes a moment to send the
bitstream down and see your code run. There is a
great deal of user accessible IO broken out on the HUB75 headers.&lt;/p&gt;
&lt;p&gt;The FPGA has a 25MHz clock directed to it, as well as one onboard LED
and a button, which is plenty enough for a Verilog &amp;ldquo;Hello, world!&amp;rdquo;
project - blinking the LED.&lt;/p&gt;
&lt;p&gt;The only downside of this board is lack of inputs by default - You
need to replace the 74HC245 output drivers with bidirectional level
shifters. However there exists a pin compatible level shifter IC,
SN74CBT3245A which can replace the default output driver providing 3v3
bidirectional IO. Other options, such as fabricating tiny PCBs that
replace the shifters with wires, or connecting the direction pin of the
output drivers to an IO pin are also a possibility.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;
    &lt;a href=&#34;#summary&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Summary
&lt;/h2&gt;&lt;p&gt;The Colorlight 5A-75B is a good choice for those who want to try
open-source FPGA programming but do not wish to spend a significant
amount of money for a classic development board. The on-board
peripherals are enough for a first project to get acquainted with the
toolchain. Gigabit Ethernet and SDRAM could also come in handy in
future more advanced projects.&lt;/p&gt;
&lt;p&gt;In the next post I will describe how to write, compile and upload a
Verilog project that will blink the onboard led of the 5A-75B board.&lt;/p&gt;
&lt;h2 id=&#34;about-the-author&#34;&gt;
    &lt;a href=&#34;#about-the-author&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    About the author
&lt;/h2&gt;&lt;p&gt;Chris &amp;ldquo;polprog&amp;rdquo; Lasocki (&lt;a class=&#34;link&#34; href=&#34;https://twitter.com/polprogpl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@polprogpl&lt;/a&gt;)
is a long time electronics hacker and an aspiring physicist. FPGAs are
one of his hobbies and he is currently writing a thesis in that field.
His other interests include laser physics as well as embedded programming
projects. He runs a blog at &lt;a class=&#34;link&#34; href=&#34;https://polprog.net&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;polprog.net&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Autotune</title>
        <link>http://blog.yosyshq.com/p/sby-autotune/</link>
        <pubDate>Wed, 27 Jul 2022 14:41:35 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/sby-autotune/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/autotune.png" alt="Featured image of post Autotune" /&gt;&lt;p&gt;Sby, our frontend for formal verification, makes it easy to use Yosys with the various open source verification tools that are included in our CAD suites. Sby integrates these tools as engines and provides a unified interface. Additionally, many of the verification tools internally use lower-level tools like SAT and SMT solvers and allow the user to select between different supported solvers.&lt;/p&gt;
&lt;p&gt;Most verification tasks can be performed by several of the supported engines and solvers. Depending on the specific verification task at hand, there can be large performance differences between them. Thus, it makes sense to try several engines and solvers to pick the best performing one.&lt;/p&gt;
&lt;p&gt;With Sby, switching the engine or solver only requires changing a single line in the “[engines]” section of the .sby file. Still, the large number of engine and solver configurations made it impractical to manually try all of them for every verification task, so it was easy to leave performance on the table by sticking with a worse performing configuration.&lt;/p&gt;
&lt;p&gt;To help you get the best performance out of Sby, we now introduced the &amp;ndash;autotune option. If you add this option to your usual Sby invocation, it will go ahead and automatically try all recommended engine and solver combinations, producing a report that lists the best performing configurations. You can then copy a configuration from this report into your .sby file to use a faster engine for future sby invocations. From time to time, when updating the CAD suite, or making significant changes to your design, you can run autotune again to see if you are still using the best performing engine.&lt;/p&gt;
&lt;p&gt;Sby  &amp;ndash;autotune is also a lot smarter than just trying every configuration in sequence. It runs in parallel and knows how to use timeouts and retries so that a single slow engine that would take hours doesn’t keep Sby from quickly discovering a better configuration that finishes in seconds. When selecting the recommended engines and solvers, it also takes into account the design and settings in your .sby file to avoid known incompatibilities or performance issues.&lt;/p&gt;
&lt;p&gt;More details on how to use and configure the automatic engine selection can be found in the &lt;a class=&#34;link&#34; href=&#34;https://symbiyosys.readthedocs.io/en/latest/autotune.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;corresponding section of the Sby documentation&lt;/a&gt;. If you want to try out the new autotune feature yourself, but don’t have a suitable Sby project at hand, you can try it on the &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/sby/tree/master/docs/examples/autotune&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;small example project we prepared&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As always, we&amp;rsquo;re &lt;a class=&#34;link&#34; href=&#34;https://www.yosyshq.com/contact&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;interested to hear how you get on with our tools&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Formal Tristate Support</title>
        <link>http://blog.yosyshq.com/p/formal-trisate-support/</link>
        <pubDate>Fri, 17 Jun 2022 17:28:17 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/formal-trisate-support/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/tristate.png" alt="Featured image of post Formal Tristate Support" /&gt;&lt;p&gt;Sby, our formal verification tool has recently got better support for tristate circuits. A tristate output is one that can either drive the connected wire to a high or low logic level or be in a high impedance state where it does not drive the output. This allows directly connecting multiple tristate outputs as long as no two are driving the output simultaneously. With tribuf (tristate buffer) support turned on, sby will automatically create assertions for any tristate signals that can be driven via multiples outputs. If more than one tristate output can drive the same wire, such an  assertion will fail. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module module1 (input wire active, output wire tri_out);
    assign tri_out = active ? 1&#39;b0 : 1&#39;bz;
endmodule

module module2 (input wire active, output wire tri_out);
    assign tri_out = active ? 1&#39;b0 : 1&#39;bz;
endmodule

module top_fail (input wire clk, input wire active1, input wire active2, output wire out);
    module1 module1 (.active(active1), .tri_out(out));
    module2 module2 (.active(active2), .tri_out(out));
endmodule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And an .sby file with a script section that includes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prep -top top_fail
flatten; tribuf -formal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Will fail with a message like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Assert failed in top: tristates.v:3 ($tribuf_conflict$$flatten/module1.$verific$i6$tristates.v:3$9)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By ensuring that only one tristate module is active at once, for example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module top_pass (input wire clk, input wire active1, output wire out);
    module1 module1 (.active(active1), .tri_out(out));
    module2 module2 (.active(!active1), .tri_out(out));
endmodule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sby will now finish with no errors. There is no need to add any assertion to the design, with the tribuf -formal command enabled in the [script] section of the sby file, the assertions are added automatically. Note that the flatten command is required when any module outputs can be tristate and that it has to precede the tribuf -formal command.&lt;/p&gt;
&lt;p&gt;You can try the example out here: &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/sby/tree/master/docs/examples/tristate&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/YosysHQ/sby/tree/master/docs/examples/tristate&lt;/a&gt;
The sby file makes use of 2 different task sections.&lt;/p&gt;
&lt;p&gt;I recently used this feature to prove the safety of the tristate bus for an ASIC design. The ASIC combines 13 smaller projects with 45 verilog files. Sby completes a full proof with a depth of 5 clock cycles in 10 seconds. You can take a look at the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mattvenn/zero_to_asic_MPW6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;project&amp;rsquo;s repository&lt;/a&gt; and the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mattvenn/zero_to_asic_mpw6/blob/mpw6/tribuf.sby&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;.sby file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This shows that verifying meaningful properties of a larger design doesn&amp;rsquo;t have to take hours or even days. The time required to prove a property is not set by the overall design complexity. State of the art solvers are very good at cutting through a ton of logic to identify just the relevant parts. In solver terminology this is called an unsatisfiable core and on the hardware side this corresponds to a subcircuit that alone ensures that a property holds. That means you could change everything that is not part of this core circuit and the property would still hold. The complexity of this subcircuit is a much better indicator of the required solver effort.&lt;/p&gt;
&lt;p&gt;If you are familiar with the cone of influence concept, where you find the relevant logic by following the circuit&amp;rsquo;s structure, this might sound familiar. An important difference is that solvers do not only consider the structure but also the behavior implemented by a circuit, which is more precise. Thus for the same property, an unsatisfiable core circuit can be much smaller than the cone of influence.&lt;/p&gt;
&lt;p&gt;For selecting between different projects within a single ASIC design, most of the projects&amp;rsquo; logic is not part of the unsatisfiable core. Only the logic responsible for selecting which tristate outputs are active together with the automatically added conflict checks needs to be considered. This is great because for medium to large projects with many source files, the solver can still provide an answer very quickly.&lt;/p&gt;
&lt;p&gt;If you have experience with proving simple properties in large designs please let us know - we’re always interested in how people are using our tools.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teodor-Dumitru and the Complexity of Adder Implementations in Hardware</title>
        <link>http://blog.yosyshq.com/p/optimising-adders/</link>
        <pubDate>Fri, 06 May 2022 09:38:52 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/optimising-adders/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/adders.jpg" alt="Featured image of post Teodor-Dumitru and the Complexity of Adder Implementations in Hardware" /&gt;&lt;p&gt;Teodor-Dumitru Ene will be presenting his work on adder optimisations, he&amp;rsquo;ll be covering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prefix sums&lt;/li&gt;
&lt;li&gt;His research&lt;/li&gt;
&lt;li&gt;Adder-specific quirks and optimizations&lt;/li&gt;
&lt;li&gt;Future goals&lt;/li&gt;
&lt;li&gt;Questions!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please join us:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tuesday, 10 May · 17:30 – 18:30 CEST&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=P7wjB2DKAIA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Streaming on youtube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Open Source Silicon with Yosys</title>
        <link>http://blog.yosyshq.com/p/open-source-silicon-with-yosys/</link>
        <pubDate>Mon, 28 Feb 2022 11:23:54 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/open-source-silicon-with-yosys/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Yosys&lt;/a&gt; is probably best known for providing synthesis for FPGA targets, but it&amp;rsquo;s a very flexible tool capable of a lot more.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://openlane-docs.readthedocs.io/en/rtd-develop/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenLane&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://www.siliconcompiler.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SiliconCompiler&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;http://coriolis.lip6.fr/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Coriolis2&lt;/a&gt; are 3 examples of open source ASIC flows, which has been an active field of development over the last year.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re very happy to see our tools get used in the first Google sponsored tapeouts, helping to make the world&amp;rsquo;s first chips made with an open source PDK, and open source all the way down to the designs.&lt;/p&gt;
&lt;p&gt;If you want to find out more about what happened in the world of open source silicon in 2021, you can see our CSO Matt Venn&amp;rsquo;s recent presentation for Hackaday Remoticon here:&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/iK2yGvFety4&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>Hello World!</title>
        <link>http://blog.yosyshq.com/p/hello/</link>
        <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/hello/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.yosyshq.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;YosysHQ.com&lt;/a&gt; is the new home for the team maintaining Yosys and the related Open Source EDA projects, and the commercial products and services we offer.&lt;/p&gt;
&lt;p&gt;Our team is led by N. Engelhardt as CEO, Claire Wolf as CTO, and Matt Venn as CSO. We are looking to work with more people, so feel free to contact us: &lt;a class=&#34;link&#34; href=&#34;mailto:contact@yosyshq.com&#34; &gt;contact@yosyshq.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tabby CAD Suite is a bundle of our well-known Open Source EDA software packages, combined with additional components that allow seamless integration of our tools in typical industrial digital design environments.&lt;/p&gt;
&lt;p&gt;We also provide support and training for users of our Tabby CAD Suite package and for developers building their work on top of our open source projects.&lt;/p&gt;
&lt;p&gt;In addition, we welcome opportunities to get involved with new projects large and small. We are looking to grow our collaborations with industry and academic partners on improving and expanding our synthesis, place and route, and formal verification flows.&lt;/p&gt;
&lt;p&gt;We look forward to a positive relationship with the Open Source EDA community and external partners.&lt;/p&gt;
&lt;p&gt;Make sure you visit our website &lt;a class=&#34;link&#34; href=&#34;https://www.yosyshq.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.yosyshq.com&lt;/a&gt; and send us an email or tweet at us &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/yosyshq&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@YosysHQ&lt;/a&gt; to say hi!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
