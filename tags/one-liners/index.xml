<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>One Liners on YosysHQ Blog</title>
        <link>http://localhost:1313/tags/one-liners/</link>
        <description>Recent content in One Liners on YosysHQ Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 12 Jun 2023 16:52:39 +0200</lastBuildDate><atom:link href="http://localhost:1313/tags/one-liners/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Yosys One Liners - Rename</title>
        <link>http://localhost:1313/p/yosys-one-liners-rename/</link>
        <pubDate>Mon, 12 Jun 2023 16:52:39 +0200</pubDate>
        
        <guid>http://localhost:1313/p/yosys-one-liners-rename/</guid>
        <description>&lt;img src="http://localhost:1313/static-2023/oneliners.jpeg" alt="Featured image of post Yosys One Liners - Rename" /&gt;&lt;p&gt;Scenario: you&amp;rsquo;re developing some Verilog RTL and after synthesis the ASIC tools you&amp;rsquo;re using fail on the design! It won&amp;rsquo;t accept square brackets in the input!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the DUT:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module test(
    input   wire [7:0] a,
    input   wire [7:0] b,
    output  wire [8:0] sum
);

    assign sum = a + b;

endmodule

module gen(
    input   wire [23:0] a,
    input   wire [23:0] b,
    output  wire [26:0] c,
);
    genvar i;
    generate
    for (i=0; i&amp;lt;=2; i=i+1) begin
        test test (
            .a      (a[i*8+:8]),
            .b      (b[i*8+:8]),
            .sum    (c[i*9+:9])
        );
    end
    endgenerate
endmodule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here we see the square brackets in the output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yosys -qp &#39;read_verilog generate.v; prep -top gen; write_verilog out.v&#39;

grep test out.v
    test \genblk1[0].test  (
    test \genblk1[1].test  (
    test \genblk1[2].test  (
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your challenge is to write a yosys one liner that renames the generated module names so they no longer contain square brackets.&lt;/p&gt;
&lt;p&gt;Our solution is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yosys -p &#39;read_verilog generate.v; prep -top gen; rename -hide */c:*[*; rename -enumerate -pattern bracket_% */c:$auto$rename*; write_verilog out.v&#39;

grep test out.v 
    test bracket_0 (
    test bracket_1 (
    test bracket_2 (
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to find out more about the Yosys rename command, &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/rename.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;please read the documentation here&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Yosys One Liners - AXI</title>
        <link>http://localhost:1313/p/yosys-one-liners-axi/</link>
        <pubDate>Mon, 17 Apr 2023 13:25:38 +0200</pubDate>
        
        <guid>http://localhost:1313/p/yosys-one-liners-axi/</guid>
        <description>&lt;img src="http://localhost:1313/static-2023/oneliners.jpeg" alt="Featured image of post Yosys One Liners - AXI" /&gt;&lt;p&gt;The AXI spec says &amp;ldquo;On Manager and Subordinate interfaces, there must be no combinatorial paths between input and output signals.&amp;rdquo; If we have a design containing an AXI Manager or Subordinate as netlist (i.e. post &lt;code&gt;proc&lt;/code&gt;) and the AXI ports contain &lt;code&gt;axi_&lt;/code&gt; we can check this automatically using this Yosys one liner:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;flatten; select -assert-none i:*axi_* %coe* o:*axi_* %cie* %i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If that fails we can use &lt;code&gt;show i:*axi_* %coe* o:*axi_* %cie* %i&lt;/code&gt; to then see the combinational path (or using dump/printattrs/select -list instead of show when the design is too large for show).&lt;/p&gt;
&lt;p&gt;Here &lt;code&gt;i:*axi_* %coe&lt;/code&gt; selects the combinational output cone of all input ports containing &lt;code&gt;axi_&lt;/code&gt; and &lt;code&gt;o:*axi_* %cie*&lt;/code&gt; selects the combinational input cone of all output ports containing &lt;code&gt;axi_&lt;/code&gt; and &lt;code&gt;%i&lt;/code&gt; takes the intersection of those two selections, leaving you with only the combinational paths that start and end in such an input/output.&lt;/p&gt;
&lt;p&gt;We also flatten the design, as selecting input/output cones doesnâ€™t work across submodules.&lt;/p&gt;
&lt;p&gt;If you want to find out more about the Yosys select command, &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/select.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;please read the documentation here&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
