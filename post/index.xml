<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on YosysHQ Blog</title>
        <link>http://blog.yosyshq.com/post/</link>
        <description>Recent content in Posts on YosysHQ Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 19 Feb 2025 16:00:00 +0100</lastBuildDate><atom:link href="http://blog.yosyshq.com/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>An open source FPGA toolchain for a large European space-grade FPGA </title>
        <link>http://blog.yosyshq.com/p/an-open-source-fpga-toolchain-for-a-large-european-space-grade-fpga/</link>
        <pubDate>Wed, 19 Feb 2025 16:00:00 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/an-open-source-fpga-toolchain-for-a-large-european-space-grade-fpga/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2025/esa.png" alt="Featured image of post An open source FPGA toolchain for a large European space-grade FPGA " /&gt;&lt;p&gt;In what was a major achievement in open source FPGA development, &lt;a class=&#34;link&#34; href=&#34;https://nebula.esa.int/4000141380&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;we have now added support for the largest FPGA&lt;/a&gt; so far supported by open source tooling! 500,000 LUTs!&lt;/p&gt;
&lt;p&gt;In November 2024 we successfully concluded the European Space Agency funded &lt;a class=&#34;link&#34; href=&#34;https://activities.esa.int/4000141380&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;project&lt;/a&gt; in collaboration with &lt;a class=&#34;link&#34; href=&#34;https://nanoxplore.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NanoExplore&lt;/a&gt;, known for their space rated FPGAs.&lt;/p&gt;
&lt;p&gt;The tool provides developers with a flexible and customizable option for designing for NG-Ultra FPGAs, offering increased reliability through the ability to cross-verify designs using two independent tools.&lt;/p&gt;
&lt;p&gt;Future work could focus on expanding support within nextpnr to cover additional FPGA primitives, such as high-speed I/O blocks and SoC integration making it more useful for high complexity designs.&lt;/p&gt;
&lt;p&gt;For more information about the project’s results you can read the official report here:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://nebula.esa.int/4000141380&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;An open source FPGA toolchain for a European space-grade FPGA | Nebula Public Library&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20241211 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20241211-released/</link>
        <pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20241211-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20241211 released!" /&gt;&lt;p&gt;The December release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixed some recurring issues with &lt;code&gt;verific -lib&lt;/code&gt; mode. You should no longer see errors when the module definitions to be loaded as blackboxes have contents that instantiate other, unknown modules. Also, parameter values on blackbox modules and their instantiations should now be imported correctly into Yosys again.&lt;/li&gt;
&lt;li&gt;Additional &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/pull/4678&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;functions for design inspection&lt;/a&gt; have been added to the TCL integration.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;setenv&lt;/code&gt; command has been added to allow setting environment variables from within yosys scripts. This is useful e.g. to set variables used in file lists before loading them with &lt;code&gt;verific -f xxx.f&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a class=&#34;link&#34; href=&#34;https://blog.yosyshq.com/p/logic-locking-with-moosic/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Moosic plugin&lt;/a&gt; we wrote about at the start of the year is now &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/posts/yosyshq_at-the-beginning-of-the-year-gabriel-gouvine-activity-7269730388191715329-Rp0H?utm_source=share&amp;amp;utm_medium=member_desktop&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;silicon proven&lt;/a&gt;!&lt;/li&gt;
&lt;li&gt;We recently released initial &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ-GmbH/prjbeyond-db&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;support for the NanoXplore NG-Ultra in nextpnr&lt;/a&gt;. This was an activity funded under the &lt;a class=&#34;link&#34; href=&#34;https://activities.esa.int/4000141380&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;European Space Agency&amp;rsquo;s Open Space Innovation Platform&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;At our most recent YUG, &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/katharina-ceesay-seitz-ba521087/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Katharina Ceesay-Seitz&lt;/a&gt; presented her work on using formal verification for detecting microarchitectural information leakage - watch the recording &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=Kxp-5kNMt40&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy December, and if you need a last minute gift idea - why not consider the gift of formal verification!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20241105 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20241105-released/</link>
        <pubDate>Tue, 05 Nov 2024 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20241105-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20241105 released!" /&gt;&lt;p&gt;The November release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String attributes are represented more efficiently in the in-memory RTLIL netlist, using a different implementation than bit vector attributes. We have observed reductions in peak memory usage of up to 30% for real world designs.&lt;/li&gt;
&lt;li&gt;For plugin maintainers, this means some breaking changes if you were directly accessing the &lt;code&gt;bits&lt;/code&gt; member of an &lt;code&gt;RTLIL::Const&lt;/code&gt;. The &lt;code&gt;bits&lt;/code&gt; member has been removed. To access any attribute as a bit vector, use the &lt;code&gt;bits()&lt;/code&gt; method instead, which returns a const iterator. To modify a &lt;code&gt;Const&lt;/code&gt;, you can call &lt;code&gt;std::vector&amp;amp;lt;RTLIL::State&amp;gt;&amp;amp; get_bits()&lt;/code&gt; which forces the implementation to a bit vector. To get the number of bits, use the new &lt;code&gt;Const::size()&lt;/code&gt; method instead of &lt;code&gt;bits.size()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;After a long summer break, &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/yug&#34; &gt;Yosys Users Group&lt;/a&gt; meetings have resumed again. Our last meeting on October 29th had Katharina CeesaySeitz from ETH Zürich present her work on using special netlist transformations in a custom Yosys pass in combination with formal verification to detect microarchitectural information leakage via hardware timing side channels. If you&amp;rsquo;d like to be notified of our next YUG meeting, subscribe to our &lt;a class=&#34;link&#34; href=&#34;https://www.yosyshq.com/newsletter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;newsletter&lt;/a&gt;! Watch her talk on our &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=Kxp-5kNMt40&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Youtube channel&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy November,&lt;/p&gt;
&lt;p&gt;The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20241017 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20241017-released/</link>
        <pubDate>Thu, 17 Oct 2024 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20241017-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20241017 released!" /&gt;&lt;p&gt;The October release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixed an issue in SBY that could lead to the wrong hierarchical path being printed for an assertion failure if multiple instances of the same module exist in the design.&lt;/li&gt;
&lt;li&gt;Builds for &lt;a class=&#34;link&#34; href=&#34;https://drive.google.com/drive/folders/1IA4oTVJOsj1V2-Jp4qask-_ZUcBDcmZU?usp=drive_link&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Macs with Apple silicon&lt;/a&gt; will now be included in the releases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our team will be gathering for our first in-person get-together in Vienna next week. Please excuse any delayed response times as folks zip across the globe!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy October,&lt;/p&gt;
&lt;p&gt;The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20240903 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240903-released/</link>
        <pubDate>Tue, 03 Sep 2024 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240903-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20240903 released!" /&gt;&lt;p&gt;The September release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;synth_nanoexplore&lt;/code&gt; adds experimental synthesis support for the NanoXplore NG-Ultra radiation-hardened FPGA family.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Matt attended ORConf in Sweden and met with members of the community and YosysHQ customers. All the talks have been published already and we’re sure you’ll find something that interests you: &lt;a class=&#34;link&#34; href=&#34;https://fossi-foundation.org/orconf/2024&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://fossi-foundation.org/orconf/2024&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy September,&lt;/p&gt;
&lt;p&gt;The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20240806 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240806-released/</link>
        <pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240806-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20240806 released!" /&gt;&lt;p&gt;The August release of Tabby CAD Suite is now available for download in &lt;a class=&#34;link&#34; href=&#34;https://drive.google.com/drive/folders/1XfdX1XCn5qeBvtdxjWuo2cUyyqAC4PiA?usp=sharing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Releases&lt;/a&gt;. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Documentation in PDF format is now included with Tabby CAD Suite downloads, in case you are not able to access our &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;online documentation&lt;/a&gt; or need to look up an old version.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recordings of the talks at this year&amp;rsquo;s Free Silicon Conference are now &lt;a class=&#34;link&#34; href=&#34;https://peertube6.f-si.org/c/fsic2024/videos&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;online&lt;/a&gt;! Check out &lt;a class=&#34;link&#34; href=&#34;https://peertube6.f-si.org/w/nLjx998SVEuJPQRqbSVBbM&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the opening day keynote from our CSO Matt&lt;/a&gt;, or &lt;a class=&#34;link&#34; href=&#34;https://peertube6.f-si.org/w/p1cAaHTZY39bpaQ9pVbaXk&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this talk from researchers at ETH Zürich about how to get competitive performance out of the Yosys+OpenRoad ASIC flow&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy August,&lt;/p&gt;
&lt;p&gt;The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Community Spotlight - Teaching with Open Source Tools</title>
        <link>http://blog.yosyshq.com/p/community-spotlight-teaching-with-open-source-tools/</link>
        <pubDate>Wed, 17 Jul 2024 16:00:00 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/community-spotlight-teaching-with-open-source-tools/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2024/spotlight/hsc/hsc.png" alt="Featured image of post Community Spotlight - Teaching with Open Source Tools" /&gt;&lt;h1 id=&#34;teaching-with-open-source-tools&#34;&gt;
    &lt;a href=&#34;#teaching-with-open-source-tools&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Teaching with Open Source Tools
&lt;/h1&gt;&lt;p&gt;Welcome to another &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/tags/community-spotlight/&#34; &gt;community spotlight&lt;/a&gt; article where we shine a light on open source EDA-related projects. If you want to &lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSdIEgu6FJZam0-V3PMTjw-eDebJdg_JuIlN4MkLNDr4vs-a5A/viewform?usp=sf_link&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;submit a project, please do so here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post recounts experiences from using the Open Source Tools for teaching! Many people have wondered how stable the tools are and whether they can be used in classes. Here is one experience, from UC Santa Cruz!&lt;/p&gt;
&lt;h1 id=&#34;dustin-richmond-bio&#34;&gt;
    &lt;a href=&#34;#dustin-richmond-bio&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Dustin Richmond Bio:
&lt;/h1&gt;&lt;p&gt;I am an Assistant Professor of Computer Science and Engineering in the
&lt;a class=&#34;link&#34; href=&#34;https://engineering.ucsc.edu/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Baskin School of Engineering&lt;/a&gt; at UC
Santa Cruz. I did my postdoc in the &lt;a class=&#34;link&#34; href=&#34;https://github.com/bespoke-silicon-group&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bespoke Silicon
Group&lt;/a&gt; at the Paul Allen
School of Computer Science at the University of Washington, and earned
my Ph.D. with the &lt;a class=&#34;link&#34; href=&#34;https://kastner.ucsd.edu/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Kastner Research Group&lt;/a&gt;
at the University of California, San Diego.&lt;/p&gt;
&lt;p&gt;You can find more about my research and projects on &lt;a class=&#34;link&#34; href=&#34;https://www.dustinrichmond.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;my
website&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;what-motivated-you-to-use-the-open-source-tools-in-teaching&#34;&gt;
    &lt;a href=&#34;#what-motivated-you-to-use-the-open-source-tools-in-teaching&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What motivated you to use the open source tools in teaching?
&lt;/h1&gt;&lt;p&gt;I’ve always been curious about reducing barriers in hardware
education. One part of my PhD studied how to make hardware design
easier for non-hardware engineers and laypeople. This is a critical
challenge we’re facing today, as we face a workforce shortage in chip
design.&lt;/p&gt;
&lt;p&gt;When I started at UCSC I asked: “What is stopping us from
training more hardware engineers?”. Or alternatively, ”How can we
scale hardware design education?”&lt;/p&gt;
&lt;p&gt;This is not a universal opinion, but I personally can’t imagine
teaching hundreds of students per quarter (our goal) with vendor
tools. They’re excellent when you’re an expert, but I like to compare
them to a “Point and Click Adventure Game”. They’re complex! I’m not
saying the vendor tools are bad, they’re just complex to install,
maintain, use, and write tutorials. And when you’re trying to scale
limited teaching resources, that complexity has an opportunity cost.&lt;/p&gt;
&lt;p&gt;Logically, that led to the open source tools. They’re less complex –
and more transparent.&lt;/p&gt;
&lt;h1 id=&#34;describe-the-class-that-uses-these-tools&#34;&gt;
    &lt;a href=&#34;#describe-the-class-that-uses-these-tools&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Describe the class that uses these tools.
&lt;/h1&gt;&lt;p&gt;The class I teach is the third course in the Computer Engineering
series, and the second in hardware design with Verilog. The first
course focuses purely on logic design with structural Verilog. This
course introduces behavioral Verilog, verification, and some advanced
digital design concepts.&lt;/p&gt;
&lt;p&gt;We review structural verilog and then move quickly through always
blocks, memories, Look-up-Tables, DSPs, Synthesis, Place &amp;amp; Route,
Clocking, functional/formal verification. All of the assignments have
some sort of implementation demo on the FPGA we use.&lt;/p&gt;
&lt;h1 id=&#34;what-tools-do-you-use-in-your-class&#34;&gt;
    &lt;a href=&#34;#what-tools-do-you-use-in-your-class&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What tools do you use in your class?
&lt;/h1&gt;&lt;p&gt;Students use &lt;a class=&#34;link&#34; href=&#34;https://www.veripool.org/verilator/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Verilator&lt;/a&gt; and
&lt;a class=&#34;link&#34; href=&#34;https://github.com/steveicarus/iverilog&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Icarus Verilog&lt;/a&gt; for
simulation, &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.net/yosys/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys&lt;/a&gt; for synthesis, and
&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/nextpnr&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NextPNR&lt;/a&gt; for Placement, Route and
STA. Students also use
&lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/sby/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Symbiyosys&lt;/a&gt;
for formal verification. Students can also use Verilator for linting –
which I highly encourage. To view waveforms, we use
&lt;a class=&#34;link&#34; href=&#34;https://surfer-project.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Surfer&lt;/a&gt;, or
&lt;a class=&#34;link&#34; href=&#34;https://gtkwave.sourceforge.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GTKWave&lt;/a&gt;. To view schematics we use
&lt;a class=&#34;link&#34; href=&#34;https://github.com/nturley/netlistsvg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;netlistsvg&lt;/a&gt; or the dot files
emitted by Yosys.&lt;/p&gt;
&lt;p&gt;It’s not critical, but to eliminate tool installation overhead and
misconfigurations, this is all distributed in a Dockerfile. The
Dockerfile is ingested by &lt;a class=&#34;link&#34; href=&#34;https://github.com/features/codespaces&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub
Codespaces&lt;/a&gt;, so students can
run the tools in the cloud via VSCode. To view waveforms, we use the
Surfer VSCode Plugin. The end result is an all-in-one interface using
VSCode with zero installation overhead.&lt;/p&gt;
&lt;p&gt;For implementation, we use the &lt;a class=&#34;link&#34; href=&#34;https://1bitsquared.com/products/icebreaker&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Icebreaker
Board&lt;/a&gt; with various PMOD
peripherals (HDMI, I2S2, Joystick, keypad, Seven-Segment, etc). Not a
large board, but we can do streaming audio/video processing.&lt;/p&gt;
&lt;p&gt;Finally, I use &lt;a class=&#34;link&#34; href=&#34;https://www.cocotb.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cocotb&lt;/a&gt; for writing
testbenches that test student code. To parameterize tests, I use
&lt;a class=&#34;link&#34; href=&#34;https://github.com/themperek/cocotb-test&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cocotb-test&lt;/a&gt;. This all
feeds into an autograder, Gradescope, using a library called
&lt;a class=&#34;link&#34; href=&#34;https://github.com/ucsb-gradescope-tools/pytest_utils&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pytest_utils&lt;/a&gt;. We
have an open-source autograder at UCSC that I intend to switch to long
term.&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-most-surprising-thing-youve-learned&#34;&gt;
    &lt;a href=&#34;#what-is-the-most-surprising-thing-youve-learned&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the most surprising thing you’ve learned?
&lt;/h1&gt;&lt;p&gt;The open source tools are stable, at least as stable as the vendor
tools. I think this is the most common worry – “If I switch, will it
explode?”. I can confidently say: &lt;strong&gt;No&lt;/strong&gt;. And even better, when they do
explode, you (or a TA) can pretty quickly figure out why. We’ve even
had a colleague push through a Verilator pull request mid-quarter.&lt;/p&gt;
&lt;h1 id=&#34;what-are-some-of-the-benefits-of-switching&#34;&gt;
    &lt;a href=&#34;#what-are-some-of-the-benefits-of-switching&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What are some of the benefits of switching?
&lt;/h1&gt;&lt;h2 id=&#34;verification&#34;&gt;
    &lt;a href=&#34;#verification&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Verification
&lt;/h2&gt;&lt;p&gt;How many people have written a testbench that breaks when they switch
computers? Or versions? Or vendors? The downside of using one tool for
simulation is that it is very easy to write testbenches in Verilog
that are secretly dependent on an internal simulation model. By using
two simulators we can highlight how Verilog is evaluated, and how a
good, tool-agnostic testbench is constructed.&lt;/p&gt;
&lt;p&gt;In the class, students spend two weeks writing testbenches. I give
them working &amp;amp; buggy code that has been synthesized through Yosys
(another benefit). Using testbenches they write, they have to find the
working modules and assemble them into a working design.&lt;/p&gt;
&lt;h2 id=&#34;speed&#34;&gt;
    &lt;a href=&#34;#speed&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Speed
&lt;/h2&gt;&lt;p&gt;It takes less time to Synthesize, Place, and Route a design than it
takes to open some vendor tools. I think this is a critical aspect for
exploration. Waiting 5-minutes just to see a light flash is a
buzzkill.&lt;/p&gt;
&lt;h2 id=&#34;introspection&#34;&gt;
    &lt;a href=&#34;#introspection&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Introspection
&lt;/h2&gt;&lt;p&gt;This is a pretty universal theme in the tools. Since they’re open
source we can actually see what happens when we simulate, synthesize,
place and route, etc. We can even open the algorithms in class and dissect them.&lt;/p&gt;
&lt;p&gt;With the Lattice FPGAs, it is easier to explain the architecture and
then extrapolate to more complex architectures like Intel and AMD.&lt;/p&gt;
&lt;p&gt;This introspection extends to visualisation. We use yosys to generate
schematics and view the .dot files, or use netlistsvg. We can do this
at different steps in the flow to see the abstract circuit, and
progressively optimize it. We also do this during lab check-off to
ensure that students are synthesizing to memories instead of arrays of
registers (or something worse).&lt;/p&gt;
&lt;h1 id=&#34;what-are-some-of-the-drawbacks&#34;&gt;
    &lt;a href=&#34;#what-are-some-of-the-drawbacks&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What are some of the drawbacks?
&lt;/h1&gt;&lt;h2 id=&#34;lack-of-legacy&#34;&gt;
    &lt;a href=&#34;#lack-of-legacy&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Lack of Legacy
&lt;/h2&gt;&lt;p&gt;The vendor tools have 40-odd years of legacy support. There are entire
message boards dedicated to solving issues encountered in every tool
vendor. When you do encounter an issue in the vendor tools, it is
likely many other people have encountered it, if not solved it.&lt;/p&gt;
&lt;p&gt;This is changing, and the open source community is great and strong,
but 40 years is a lot of ground to make up.&lt;/p&gt;
&lt;h2 id=&#34;student-resistance&#34;&gt;
    &lt;a href=&#34;#student-resistance&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Student Resistance
&lt;/h2&gt;&lt;p&gt;Students read job postings, and they want to learn the tools they see
in job postings. Our class is titled “Logic Design with Verilog”, so
we can focus on the language, not the tools. But where do we draw that
line? We’re exploring ideas like using vendor tools in the final weeks
of the quarter, after they’ve learned the language, or pushing vendor
tools to a capstone.&lt;/p&gt;
&lt;p&gt;This is an active area of discussion. Vendor tools should be part of a
computer engineering curriculum. How much? And when?&lt;/p&gt;
&lt;h1 id=&#34;how-can-the-community-support-you&#34;&gt;
    &lt;a href=&#34;#how-can-the-community-support-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    How can the community support you?
&lt;/h1&gt;&lt;p&gt;Come visit UC Santa Cruz! The &lt;a class=&#34;link&#34; href=&#34;https://hsc.ucsc.edu/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hardware Systems
Collective&lt;/a&gt; has a weekly seminar series and we
love hearing about cool open source projects.&lt;/p&gt;
&lt;h1 id=&#34;how-can-we-get-in-touch&#34;&gt;
    &lt;a href=&#34;#how-can-we-get-in-touch&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    How can we get in touch?
&lt;/h1&gt;&lt;p&gt;Feel free to email! I am happy to share teaching materials, but
they&amp;rsquo;re in repositories, but not in a public form yet.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20240709 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240709-released/</link>
        <pubDate>Tue, 09 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240709-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20240709 released!" /&gt;&lt;p&gt;The July release of Tabby CAD Suite is now available for download. This month&amp;rsquo;s notable changes mainly affect the build process, so are not relevant if you download our binaries. For those of you subscribing to the YosysHQ Verific Patch and building from source:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have reorganized the build flags for compiling with Verific to try to support more flavors of Verific (more documentation to follow). We have tried to keep existing configurations working, but if you encounter any build issues when updating to the latest release, try a full clean (&lt;code&gt;make clean&lt;/code&gt; and &lt;code&gt;make clean-abc&lt;/code&gt;) and check if you need to set any of the new &lt;!-- raw HTML omitted --&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/pull/4459&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ENABLE_VERIFIC_*&lt;/a&gt;&lt;!-- raw HTML omitted --&gt; flags in your &lt;!-- raw HTML omitted --&gt;Makefile.conf&lt;!-- raw HTML omitted --&gt;.&lt;/li&gt;
&lt;li&gt;The minimum supported C++ standard version has been updated to C++17. The compiler flags in the Makefile have been changed to reflect this, but if you are manually setting an older flag, you may need to update your configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The recordings of the FPGA Lightning talks from our last Yosys Users Group meeting are now online! Check them out on &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/@YosysHQ/videos&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;our youtube channel&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy July,&lt;/p&gt;
&lt;p&gt;The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Community Spotlight - MIRMIS</title>
        <link>http://blog.yosyshq.com/p/community-spotlight-mirmis/</link>
        <pubDate>Wed, 12 Jun 2024 16:00:00 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/community-spotlight-mirmis/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2024/spotlight/mirmis/esa-hero.bmp" alt="Featured image of post Community Spotlight - MIRMIS" /&gt;&lt;h1 id=&#34;mirmis&#34;&gt;
    &lt;a href=&#34;#mirmis&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    MIRMIS
&lt;/h1&gt;&lt;p&gt;The Modular Infrared Molecules and Ices Sensor (&lt;!-- raw HTML omitted --&gt;MIRMIS&lt;!-- raw HTML omitted --&gt;) is a
hyperspectral infrared imaging instrument set to launch on ESA&amp;rsquo;s
&lt;a class=&#34;link&#34; href=&#34;https://www.esa.int/Science_Exploration/Space_Science/Comet_Interceptor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Comet Interceptor&lt;/a&gt; mission in 2029. Its development is led by the University
of Oxford&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://www.space.ox.ac.uk/our-people/neil-bowles&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Professor Neil Bowles&lt;/a&gt; (Instrument Lead Scientist) and it has
three sensors—&lt;!-- raw HTML omitted --&gt;TIRI&lt;!-- raw HTML omitted --&gt;
(University of Oxford), &lt;!-- raw HTML omitted --&gt;MIR&lt;!-- raw HTML omitted --&gt;, and
&lt;!-- raw HTML omitted --&gt;NIR&lt;!-- raw HTML omitted --&gt; (VTT Finland)—that will image a
pristine comet to measure its structure, chemical composition, and temperature,
allowing researchers to gain insight into the formation of the Solar system.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/spotlight/mirmis/vibe.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;MIRMIS STM mounted for vibration testing&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The MIRMIS structural–thermal model (STM) mounted for vibration testing
at 35g in the Space Instrumentation group&amp;rsquo;s vibration test facility.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://www.physics.ox.ac.uk/research/group/space-instrumentation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Space Instrumentation group&lt;/a&gt; at the University of Oxford is building the
common structures and mechanisms for MIRMIS, building and calibrating the TIRI
sensor, integrating the MIR/NIR sensors, and building MIRMIS&amp;rsquo; command and
data-handling unit (&lt;!-- raw HTML omitted --&gt;CDHU&lt;!-- raw HTML omitted --&gt;). The CDHU is the interface to the
spacecraft and is based around a radiation-hard microcontroller and
radiation-tolerant FPGA that together process commands from Earth, control
pointing mirrors to track the target comet, operate the imaging sensors, and
carry out housekeeping over the instrument&amp;rsquo;s multi-year trip through deep space.&lt;/p&gt;
&lt;p&gt;YosysHQ support FPGA development on MIRMIS by providing formal verification
tools, including SymbiYosys for &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Safety_and_liveness_properties&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;safety and liveness property&lt;/a&gt; checking and
reachability checking.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/spotlight/mirmis/ltm.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Lunar Thermal Mapper&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Lunar Thermal Mapper (launching November 2024 on NASA&amp;rsquo;s Lunar Trailblazer),
the previous-generation instrument on which MIRMIS/TIRI is based, shown
without its protective covering.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;space-instruments-at-oxford&#34;&gt;
    &lt;a href=&#34;#space-instruments-at-oxford&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Space instruments at Oxford
&lt;/h1&gt;&lt;p&gt;Part of the University of Oxford&amp;rsquo;s Atmospheric, Oceanic, and Planetary Physics
(&lt;!-- raw HTML omitted --&gt;AOPP&lt;!-- raw HTML omitted --&gt;) sub-department, the Space Instrumentation group and our
sister &lt;a class=&#34;link&#34; href=&#34;https://www.physics.ox.ac.uk/about-us/our-facilities-and-services/infrared-multilayer-laboratory&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Infrared Multilayer Laboratory&lt;/a&gt; have a long history of building science
instruments. Our contributions include, among many others:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2029 — &lt;a class=&#34;link&#34; href=&#34;https://www.esa.int/Science_Exploration/Space_Science/Comet_Interceptor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Comet Interceptor&lt;/a&gt;, MIRMIS, and &lt;a class=&#34;link&#34; href=&#34;https://arielmission.space/index.php/ariel-media/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ARIEL telescope&lt;/a&gt; (Sun–Earth L&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;)&lt;/li&gt;
&lt;li&gt;2024 — &lt;a class=&#34;link&#34; href=&#34;https://science.nasa.gov/mission/prefire/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PREFIRE&lt;/a&gt;, infrared filters (Earth)&lt;/li&gt;
&lt;li&gt;2021 — &lt;a class=&#34;link&#34; href=&#34;https://webb.nasa.gov/content/about/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;James Webb Space Telescope&lt;/a&gt;, Mid-Infrared Instrument filters (Sun–Earth L&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;)&lt;/li&gt;
&lt;li&gt;2018 — &lt;a class=&#34;link&#34; href=&#34;https://science.nasa.gov/mission/insight/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;InSight&lt;/a&gt;, Short-period Seismometer (Mars)&lt;/li&gt;
&lt;li&gt;2010 — &lt;a class=&#34;link&#34; href=&#34;https://science.nasa.gov/mission/sofia/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Stratospheric Observatory for Infrared Astronomy&lt;/a&gt;, filters (Earth)&lt;/li&gt;
&lt;li&gt;2005 — &lt;a class=&#34;link&#34; href=&#34;https://science.nasa.gov/mission/mars-reconnaissance-orbiter/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mars Reconnaissance Orbiter&lt;/a&gt;, Mars Climate Sounder optics (Mars)&lt;/li&gt;
&lt;li&gt;2004 — &lt;a class=&#34;link&#34; href=&#34;https://aura.gsfc.nasa.gov/about.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Aura&lt;/a&gt;, High-Resolution Dynamics Limb Sounder (Earth)&lt;/li&gt;
&lt;li&gt;1997 — &lt;a class=&#34;link&#34; href=&#34;https://science.nasa.gov/mission/cassini/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cassini-Huygens&lt;/a&gt;, Composite Infrared Spectrometer cooler and optics (Saturn)&lt;/li&gt;
&lt;li&gt;1989 — &lt;a class=&#34;link&#34; href=&#34;https://science.nasa.gov/mission/galileo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Galileo&lt;/a&gt;, Near-Infrared Mapping Spectrometer (Jupiter)&lt;/li&gt;
&lt;li&gt;1978 — &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Pioneer_Venus_Orbiter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pioneer 12&lt;/a&gt;, VORTEX (Venus)&lt;/li&gt;
&lt;li&gt;1970 — &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Nimbus_4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nimbus 4&lt;/a&gt;, Selective Chopper Radiometer (Earth)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to the work done by the Space Instrumentation group and the
Infrared Multilayer Laboratory, the more than 100 members of AOPP research and
contribute to the study of exoplanets and planetary physics, atmospheric,
climate, and weather theory and modelling, Earth&amp;rsquo;s oceans, and Earth&amp;rsquo;s
cryosphere. AOPP is based out of the Clarendon Laboratory in the centre of
Oxford, where it has a range of space-related facilities including cleanrooms,
a variety of vacuum chambers, metrology, spectroscopy, optics, and
vibration-testing facilities, and electronics and mechanical workshops.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/spotlight/mirmis/cirs-em.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;CIRS engineering model&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Engineering model (EM) of the focal plane assembly for the CIRS instrument on
Cassini-Huygens, which operated in Saturn orbit from 2004 until 2017.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;why-build-mirmis&#34;&gt;
    &lt;a href=&#34;#why-build-mirmis&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Why build MIRMIS?
&lt;/h1&gt;&lt;p&gt;Comets and other interstellar objects can tell us a lot about how our Solar
system formed. As they were often ejected a long time ago, they act as a time
capsule holding the chemicals and materials that were around in the early Solar
system. This means that, if we can accurately measure their properties, we have
a direct view into the past. One challenge with this is finding a &amp;lsquo;pristine&amp;rsquo;
object—we tend to see these objects as they pass through the inner Solar
system, where the heat and radiation from the Sun will change them. MIRMIS will
be launched as part of Comet Interceptor to the Sun–Earth L&lt;!-- raw HTML omitted --&gt;2&lt;!-- raw HTML omitted --&gt;
&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Lagrange_point&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Lagrange point&lt;/a&gt;, around 1.5 million kilometres away and where the James Webb
Space Telescope is stationed, so that it can move quickly to intercept a
pristine comet after it&amp;rsquo;s detected but before it&amp;rsquo;s spent too long transiting
the Solar system.&lt;/p&gt;
&lt;h1 id=&#34;what-makes-you-excited-about-mirmis&#34;&gt;
    &lt;a href=&#34;#what-makes-you-excited-about-mirmis&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What makes you excited about MIRMIS?
&lt;/h1&gt;&lt;p&gt;The MIRMIS instrument is exciting both because of the science data it will
produce but also because of the engineering behind it. It continues a process
of refining and improving our equipment—its CDHU and TIRI are evolutions
of Lunar Thermal Mapper, while the infrared filters have heritage to Diviner
and further back.&lt;/p&gt;
&lt;p&gt;The technology behind MIRMIS also has the potential to impact life on Earth
more directly. One use we&amp;rsquo;ve been exploring is launching a MIRMIS-like
instrument to detect wildfires on Earth. The instrument itself is compact
(around the size of a large briefcase), weighs around 9kg, and draws around
11W peak. A small constellation could launch on a single rocket and provide
multiple observations of the entire surface of the Earth per day, and with the
Space Instrumentation group&amp;rsquo;s extensive background in high-resolution infrared
imaging the results could exceed current capabilities.&lt;/p&gt;
&lt;h1 id=&#34;what-are-some-of-the-challenges-you-face&#34;&gt;
    &lt;a href=&#34;#what-are-some-of-the-challenges-you-face&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What are some of the challenges you face?
&lt;/h1&gt;&lt;h2 id=&#34;there-are-no-debug-probes-in-space&#34;&gt;
    &lt;a href=&#34;#there-are-no-debug-probes-in-space&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    There are no debug probes in space
&lt;/h2&gt;&lt;p&gt;Verification and validation are huge parts of building a space instrument. Not
only is deep space a radiation-harsh environment but getting there on a rocket
puts a lot of forces on the relatively delicate glassware in optical systems
and, once you&amp;rsquo;ve launched, there&amp;rsquo;s no replacing a broken part. This is part of
our reason for using Yosys and SymbiYosys in particular—formal
verification of the FPGA components gives us a lot more confidence and
functional coverage than plain unit tests and testbenches can provide.&lt;/p&gt;
&lt;h2 id=&#34;space-hardware-lags-the-leading-edge&#34;&gt;
    &lt;a href=&#34;#space-hardware-lags-the-leading-edge&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Space hardware lags the leading edge
&lt;/h2&gt;&lt;p&gt;It takes a lot of time to qualify a part for space, and for integrated circuits
they often need to be made with different processes from normal commercial
parts. This means that the performance tends to be significantly lower, too.
The FPGA in the MIRMIS CDHU, for example, requires more than a little effort to
close timing at 100MHz and has no niceties like DSP blocks, large block RAMs,
PLLs, high-density logic elements, or extensive IP core libraries. And that&amp;rsquo;s
before having to build in triple redundancy and other safeguards against
radiation flipping a bit in a register or transiently changing the value on a
signal line.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/spotlight/mirmis/efm.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;MIRMIS EFM&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Electrical functional model (EFM) of the MIRMIS command and data-handling
unit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;what-could-the-community-do-to-support-you&#34;&gt;
    &lt;a href=&#34;#what-could-the-community-do-to-support-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What could the community do to support you?
&lt;/h1&gt;&lt;p&gt;Keep being interested in space and in planetary science. Science is a
collaborative endeavour, and the more people we have contributing to and
advancing the field the better the results can be for all humanity. And keep
developing high-quality, open-source tools to support the science.&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-link-for-the-project&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-link-for-the-project&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best link for the project?
&lt;/h1&gt;&lt;p&gt;ESA&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://www.cosmos.esa.int/web/comet-interceptor/documentation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Comet Interceptor Red Book&lt;/a&gt; is a great deep dive into the mission,
including MIRMIS as well as the other instruments.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in postgraduate study, have a look at our
&lt;a class=&#34;link&#34; href=&#34;https://www.physics.ox.ac.uk/study/postgraduates/dphil-atmospheric-oceanic-and-planetary-physics/planetary-and-exoplanetary&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;open DPhil projects&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;liam-mcsherrys-bio&#34;&gt;
    &lt;a href=&#34;#liam-mcsherrys-bio&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Liam McSherry&amp;rsquo;s bio
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/spotlight/mirmis/mcsherry.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Headshot of Liam McSherry&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m an engineer working across electronics, FPGA, and software disciplines. I
split my time between the Space Instrumentation group at Oxford, as Principal
Engineer currently leading FPGA development on the MIRMIS CDHU, and &lt;a class=&#34;link&#34; href=&#34;https://www.l3harris.com/en-gb/united-kingdom&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;L3Harris&lt;/a&gt;,
as a Principal Engineer architecting and helping build high-performance RF and
signal-processing systems. In my work I&amp;rsquo;ve had a hand in projects including
radio direction-finding systems, control systems for ion-trap quantum
computing, GNSS anti-jam/anti-spoof, and both ground and space sides of
satellite payloads, as well as delivering talks and training courses on C++,
software-defined radios, and FPGAs.&lt;/p&gt;
&lt;p&gt;Outside of work, I like to take a relaxed approach. I read a lot, I cook and
bake, and occasionally badly play badminton. Being in Oxford, I like to take
advantage of the many green spaces, too.&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-way-for-people-to-contact-you&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-way-for-people-to-contact-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best way for people to contact you?
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Neil Bowles (Instrument Lead Scientist, MIRMIS): neil.bowles [at] physics.ox.ac.uk&lt;/li&gt;
&lt;li&gt;Liam McSherry: liam.mcsherry [at] physics.ox.ac.uk&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20240607 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240607-released/</link>
        <pubDate>Fri, 07 Jun 2024 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240607-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20240607 released!" /&gt;&lt;p&gt;The June release of Tabby CAD Suite is now available for download. There are no notable user-facing changes in this version, as our dev team has been mostly busy with a revamp of our CI infrastructure.&lt;/p&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prof. Andrew Kahng&amp;rsquo;s keynote at the &lt;a class=&#34;link&#34; href=&#34;https://efcl.ethz.ch/efcl-summer-school.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;EFCL summer school&lt;/a&gt; was on accelerating innovation with open source tools. Of particular interest was using the results from open source tools as a proxy for the proprietary tools. For more info and links to Andrew’s slides - check &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:7205509547061424128/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Matt’s report on linkedin&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;From the 11th to the 13th of June our CEO Nina will be at &lt;a class=&#34;link&#34; href=&#34;https://indico.cern.ch/event/1381060/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CERN for the FPGA developers Forum&lt;/a&gt; - if you’re there please say hello.&lt;/li&gt;
&lt;li&gt;Our CSO Matt will be in Paris at the &lt;a class=&#34;link&#34; href=&#34;https://wiki.f-si.org/index.php/FSiC2024&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Free Silicon Conference&lt;/a&gt; from the 19th to the 21st of June. If you’re there come and say hello!&lt;/li&gt;
&lt;li&gt;For the Yosys User’s Group #7 we had FPGA lightning talks. Watch them all &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=wZiocG8DHfE&amp;amp;list=PL-ggbobZGIQuMGBkQgubVbJ1jffe2k18O&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy June,&lt;/p&gt;
&lt;p&gt;The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20240508 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240508-released/</link>
        <pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240508-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20240508 released!" /&gt;&lt;p&gt;The May release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The smtbmc engine can now output information on used assumptions in each step, to help debug failing cover properties. To enable this feature, add the &lt;code&gt;--track-assumes &lt;/code&gt;option in the &lt;code&gt;[engines]&lt;/code&gt; section like this: &lt;br&gt;
&lt;code&gt;smtbmc yices -- --track-assumes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our next Yosys Users Group meeting will be FPGA lightning talks! Join us on Monday, May 27th at 18:00 CEST &lt;a class=&#34;link&#34; href=&#34;https://meet.jit.si/yosys-users-group&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;at this link&lt;/a&gt;. It is also still possible to &lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/forms/d/1gKbUfBqs5eMpPQztjnyAxx75a8SGbjkXN-BR2Nn1XF0/edit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;submit a talk&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Our latest &lt;a class=&#34;link&#34; href=&#34;https://blog.yosyshq.com/p/community-spotlight-manta/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;community spotlight is about Manta&lt;/a&gt;, a vendor-agnostic logic analyzer and virtual interface for FPGAs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy May,&lt;/p&gt;
&lt;p&gt;The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Community Spotlight - Manta</title>
        <link>http://blog.yosyshq.com/p/community-spotlight-manta/</link>
        <pubDate>Tue, 30 Apr 2024 20:30:31 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/community-spotlight-manta/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2024/spotlight/manta/logo.png" alt="Featured image of post Community Spotlight - Manta" /&gt;&lt;h1 id=&#34;manta&#34;&gt;
    &lt;a href=&#34;#manta&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Manta
&lt;/h1&gt;&lt;p&gt;Welcome to another &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/tags/community-spotlight/&#34; &gt;community spotlight&lt;/a&gt; article where we shine a light on open source EDA-related projects. If you want to &lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSdIEgu6FJZam0-V3PMTjw-eDebJdg_JuIlN4MkLNDr4vs-a5A/viewform?usp=sf_link&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;submit a project, please do so here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Manta is a configurable and approachable tool for FPGA debugging and rapid prototyping. It works by letting you configure cores that you instantiate in your FPGA design, and operate from a host machine connected over either UART or Ethernet. These cores can provide a logic analyzer, or direct access to registers or memory on the FPGA. Manta is written in Python, which allows its host-side to code to run on nearly any platform (including the web!). The code on the FPGA side is written in Amaranth HDL which exports to vendor-agnostic Verilog-2001, allowing it to run on nearly any FPGA.&lt;/p&gt;
&lt;h1 id=&#34;fischer-moseleys-bio&#34;&gt;
    &lt;a href=&#34;#fischer-moseleys-bio&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Fischer Moseley&amp;rsquo;s Bio
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/spotlight/manta/cart.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Fischer Moseley&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m a FPGA Engineer working at &lt;a class=&#34;link&#34; href=&#34;https://www.jpl.nasa.gov/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NASA JPL&lt;/a&gt;, currently working on an orbital interferometer mission called &lt;a class=&#34;link&#34; href=&#34;https://grace.jpl.nasa.gov/news/154/us-germany-partnering-on-mission-to-track-earths-water-movement/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GRACE-C&lt;/a&gt;. I joined the lab right after getting my Master&amp;rsquo;s degree from EECS from MIT last year, where I helped teach the lab-based &lt;a class=&#34;link&#34; href=&#34;https://fpga.mit.edu/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FPGA Design Course&lt;/a&gt; and wrote the original version of Manta for my thesis. Oh, and I built the (above) electric shopping cart there too. It&amp;rsquo;s awesome. And kinda dangerous.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve worked on Formula cars, quantum computers, robots, and spacecraft, but I have yet to see a field with as much complexity and momentum behind it as the FPGA/SoC/ASIC space. I think there&amp;rsquo;s a lot of work left to do with these devices, and I get a lot of joy from building the tools around them. Manta is one such tool, and I hope you find it useful!&lt;/p&gt;
&lt;h1 id=&#34;what-motivated-you-to-make-manta&#34;&gt;
    &lt;a href=&#34;#what-motivated-you-to-make-manta&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What motivated you to make Manta?
&lt;/h1&gt;&lt;p&gt;When we were preparing to teach the FPGA design class at MIT, we noticed that ARM platforms were gaining popularity with students, primarily in the form of Apple Silicon. This was a problem for our EDA tool (Vivado) which, despite our best tricks, was only usable on x86 platforms. To solve this, we developed a tool that ran Vivado remotely, allowing students to build their bitstreams without having the tools installed on their machine. This worked splendidly.&lt;/p&gt;
&lt;p&gt;However, this meant that we couldn’t use Vivado’s built-in debugging tools such as the Integrated Logic Analyzer (ILA) or Virtual IO (VIO), as these tools require Vivado’s Hardware Manager to be running on the machine connected to the FPGA. This was a bit of a problem, as students would often connect their FPGAs to external devices for their &lt;a class=&#34;link&#34; href=&#34;https://mitadmissions.org/blogs/entry/6-2050-field-programmable-gate-awesomeness/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;final projects&lt;/a&gt;, and it was nearly impossible to guarantee that those were behaving exactly as they were modeled in simulation.&lt;/p&gt;
&lt;p&gt;Manta was written to solve this problem. It provides the same functionality that the ILA and VIO cores provide (and more!) without requiring a specific architecture or OS.&lt;/p&gt;
&lt;h1 id=&#34;what-makes-you-excited-about-manta&#34;&gt;
    &lt;a href=&#34;#what-makes-you-excited-about-manta&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What makes you excited about Manta?
&lt;/h1&gt;&lt;p&gt;As I’ve been developing designs at JPL, hacking on personal projects, and engaging with the community, I’ve been amazed at how long Manta tends to stick inside a project. I thought that it would only be useful at the beginning of a project for getting a quick prototype done, or that it’d only be pulled out to hunt down the occasional bug. However, this hasn’t been the case from what I’ve seen. After it’s been included, it usually tends to stay in the design - either to quickly investigate a bug if it comes up again, or to serve as the permanent link between a FPGA and its host machine.&lt;/p&gt;
&lt;p&gt;This makes me really excited about the need that Manta is fulfilling. But there’s two features that I’m also really excited about:&lt;/p&gt;
&lt;h3 id=&#34;waveform-recordplayback&#34;&gt;
    &lt;a href=&#34;#waveform-recordplayback&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Waveform Record/Playback
&lt;/h3&gt;&lt;p&gt;Manta’s Logic Analyzer allows you to save a captured waveform as a &lt;code&gt;.vcd&lt;/code&gt; file, just like any other logic analyzer. However, unlike any other logic analyzer, it lets you save a captured waveform as a Verilog module. When included in a simulation testbench, this module will generate an exact replication of the captured waveform.&lt;/p&gt;
&lt;p&gt;This is super handy for testing RTL when the exact sequence of inputs it’ll see on the FPGA isn’t well-known. For example, when testing a network stack deployed to a FPGA, I’ve found that some USB-Ethernet adapters aren’t entirely compliant with the RMII spec, and emit slightly malformed packets. This wasn’t modeled in my simulations, but by recording a few malformed packets and playing them in a testbench, I could quickly patch the network stack.&lt;/p&gt;
&lt;p&gt;This is just one example, but it’s been extraordinarily useful for hunting down strange hardware bugs like these!&lt;/p&gt;
&lt;h3 id=&#34;web-terminal&#34;&gt;
    &lt;a href=&#34;#web-terminal&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Web Terminal
&lt;/h3&gt;&lt;p&gt;Since Manta can communicate with a host machine over UART, it’s possible to use the Web Serial API to run Manta in the browser, directly from the documentation site:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/spotlight/manta/web_terminal.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Manta Web Terminal&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;And here’s a quick demo of an earlier version in action:&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/fWI9ODbyA3w&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Everything here is run locally in your browser, no installation required! Nothing is sent to an external server either. I’m still putting this feature together and it’s not generally available just yet, but I’d love any feedback on it - especially if anyone can think of a proper use case for it. Right now I’m just building this feature to show that it’s possible, but I’m happy to direct development in a more productive direction if one exists.&lt;/p&gt;
&lt;h1 id=&#34;what-are-some-of-the-challenges-you-face&#34;&gt;
    &lt;a href=&#34;#what-are-some-of-the-challenges-you-face&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What are some of the challenges you face?
&lt;/h1&gt;&lt;p&gt;Getting the backend of the Web Terminal working was a huge challenge! Inside the Web Terminal Manta is being run in its native Python, which relies on blocking (synchronous) IO between the host and FPGA. Javascript in the browser typically uses non-blocking (asynchronous) IO, so this required some &lt;em&gt;gnarly&lt;/em&gt; tricks to get working. I had never written a line of Javascript prior to this, so getting this working has been extremely satisfying!&lt;/p&gt;
&lt;h1 id=&#34;what-could-the-community-do-to-support-you&#34;&gt;
    &lt;a href=&#34;#what-could-the-community-do-to-support-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What could the community do to support you?
&lt;/h1&gt;&lt;p&gt;Try Manta and talk about it! If there’s one thing the project needs right now, it’s a community around it. If folks are making cool projects with Manta, then that’ll grow organically. Even just starring the GitHub repo helps.&lt;/p&gt;
&lt;p&gt;Financial contributions are also always appreciated and are possible by &lt;a class=&#34;link&#34; href=&#34;https://github.com/fischermoseley&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sponsoring me&lt;/a&gt; on GitHub. Right now I’m looking to purchase some more FPGA development boards to run automated hardware-in-the-loop tests on. If anyone has any Altera, Microchip, ECP5, or Xilinx development boards handy that they’d consider donating, please reach out!&lt;/p&gt;
&lt;p&gt;Lastly, contributions to the source code are extremely welcome. I’m looking to add cores for AXI, AHB3, Wishbone, and Avalon busses, and help contributing to those would be greatly appreciated.&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-link-for-the-project&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-link-for-the-project&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best link for the project?
&lt;/h1&gt;&lt;p&gt;All of the source code is on &lt;a class=&#34;link&#34; href=&#34;https://github.com/fischermoseley/manta&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;, which also serves the &lt;a class=&#34;link&#34; href=&#34;https://fischermoseley.github.io/manta/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;documentation site&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-way-for-people-to-contact-you&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-way-for-people-to-contact-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best way for people to contact you?
&lt;/h1&gt;&lt;p&gt;If you have ideas about Manta, please open a GitHub issue on the repo! Otherwise you can reach me directly at fischer.moseley [at] gmail.com.&lt;/p&gt;
&lt;p&gt;Also if you like motorized shopping carts and other silly projects, feel free to check out &lt;a class=&#34;link&#34; href=&#34;https://fischermoseley.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;fischermoseley.com&lt;/a&gt; or my &lt;a class=&#34;link&#34; href=&#34;http://www.youtube.com/@fischerm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;YouTube&lt;/a&gt; channel!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20240410 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240410-released/</link>
        <pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240410-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20240410 released!" /&gt;&lt;p&gt;The April release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VHDL2019 mode is now available with &lt;code&gt;verific -vhdl2019.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A major rewrite of the &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys manual&lt;/a&gt; went live recently. Shoutout to our team member Krystine who has been working on this for months and is continuing to make improvements to our documentation!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy April,&lt;/p&gt;
&lt;p&gt;The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20240312 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240312-released/</link>
        <pubDate>Sat, 16 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240312-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20240312 released!" /&gt;&lt;p&gt;The March release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can now query the proof status of properties in a design using &lt;code&gt;sby --status example.sby&lt;/code&gt;. This works as soon as any SBY task was launched, so you can use it to query progress while SBY is still running in another terminal.&lt;/li&gt;
&lt;li&gt;The abc pdr solver now supports continuing to prove other properties after a counterexample is found using &lt;code&gt;abc --keep-going pdr&lt;/code&gt; in engines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gabriel Gouvine contributed this &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/logic-locking-with-moosic/&#34; &gt;guest blog post on logic locking&lt;/a&gt; with his Moosic plugin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy March,
The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Community Spotlight - FazyRV</title>
        <link>http://blog.yosyshq.com/p/community-spotlight-fazyrv/</link>
        <pubDate>Sun, 10 Mar 2024 20:30:31 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/community-spotlight-fazyrv/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2024/spotlight/fazyrv/fazyrv.png" alt="Featured image of post Community Spotlight - FazyRV" /&gt;&lt;h1 id=&#34;fazyrv&#34;&gt;
    &lt;a href=&#34;#fazyrv&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    FazyRV
&lt;/h1&gt;&lt;p&gt;Welcome to another &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/tags/community-spotlight/&#34; &gt;community spotlight&lt;/a&gt; article where we shine a light on open source EDA-related projects. If you want to &lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSdIEgu6FJZam0-V3PMTjw-eDebJdg_JuIlN4MkLNDr4vs-a5A/viewform?usp=sf_link&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;submit a project, please do so here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;FazyRV is a minimal-area RISC-V core that scales with your needs. It allows you to adapt the data path width to process smaller 1, 2, 4, or 8-bit &lt;em&gt;chunks&lt;/em&gt; of the 32-bit operands each clock cycle. In addition, each data path width can be combined with FazyRV&amp;rsquo;s manifold variants to trade area with performance and find the best-fitting configuration for your system requirements and used technology. FazyRV avoids hand optimizations at the gate level to increase readability and ease modifications, such as adding custom instruction extensions.&lt;/p&gt;
&lt;h1 id=&#34;meinhard-kissichs-bio&#34;&gt;
    &lt;a href=&#34;#meinhard-kissichs-bio&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Meinhard Kissich&amp;rsquo;s Bio
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/spotlight/fazyrv/meinhard.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Meinhard Kissich&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I am a Ph.D. student at &lt;a class=&#34;link&#34; href=&#34;https://www.tugraz.at/home&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Graz University of Technology&lt;/a&gt; in Austria. After completing my Master&amp;rsquo;s degree in Information and Computer Engineering in 2022, I joined the &lt;a class=&#34;link&#34; href=&#34;https://iti.tugraz.at/eas&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Embedded Architectures &amp;amp; Systems&lt;/a&gt; (EAS) Group as a university assistant. My main interests and research areas are RISC-V architectures, FPGA CAD tools, and applied formal verification. I enjoy realizing unique ideas outside convention and evaluating these implementations. For me, it is not just about gathering knowledge but also about sharing it and contributing back to the community. I lead the Real-Time Operating Systems Laboratory course and am always up for discussions and exciting projects.&lt;/p&gt;
&lt;h1 id=&#34;what-motivated-you-to-make-fazyrv&#34;&gt;
    &lt;a href=&#34;#what-motivated-you-to-make-fazyrv&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What motivated you to make FazyRV?
&lt;/h1&gt;&lt;p&gt;The fascination of getting the most out of a constrained environment and using even small FPGAs for &amp;ldquo;big&amp;rdquo; projects &amp;ndash; it is like the digital design equivalent of &lt;em&gt;Can it run Doom?&lt;/em&gt;. I became captivated by &lt;a class=&#34;link&#34; href=&#34;https://github.com/olofk/serv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SERV&lt;/a&gt; and how small a system-on-chip design can be. However, there was a gap between the 1-bit bit-serial SERV and prevalent 32-bit cores.&lt;/p&gt;
&lt;p&gt;That brings me to a second point: I wanted to explore how a sub-32-bit core scales between a 1-bit bit-serial and a 32-bit core in terms of area and performance. This is where FazyRV started as a scalable RISC-V core.&lt;/p&gt;
&lt;h1 id=&#34;what-makes-you-excited-about-fazyrv&#34;&gt;
    &lt;a href=&#34;#what-makes-you-excited-about-fazyrv&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What makes you excited about FazyRV?
&lt;/h1&gt;&lt;p&gt;FazyRV allows scaling the core to the project&amp;rsquo;s needs in a way that was not available to me before. The fine-grained options can be used to explore the design space and find the best area vs. performance trade-off for the system requirements and target technology. Assume the target technology does not have dual-read-port BRAM primitives available without some area overhead. In this case, you can choose an implementation that serially reads the operands at the expense of one additional clock cycle per instruction. Then, you can synthesize the data path to a width that fits your timing requirements. If it is on edge, you may also experiment with a variant that uses a bypass multiplexer and can save one clock cycle on operand loads. All that is done by just playing around with Verilog parameters.&lt;/p&gt;
&lt;p&gt;Let us delve into a practical implementation by plotting the Mandelbrot set. The comparison below illustrates the performance disparity when using different chunk sizes. While the variant with an 8-bit chunk size delivers the highest performance, it also results in the largest design, as depicted in the plot at the top.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/spotlight/fazyrv/mandelbrot.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Meinhard Kissich&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;But there is more to it: FazyRV avoids hand optimization at the gate level. I want to inspect more closely how synthesis tools optimize the current hardware description and map the patterns.&lt;/p&gt;
&lt;h1 id=&#34;what-are-some-of-the-challenges-you-face&#34;&gt;
    &lt;a href=&#34;#what-are-some-of-the-challenges-you-face&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What are some of the challenges you face?
&lt;/h1&gt;&lt;p&gt;One was undoubtedly the architecture of shift instructions. The considered designs significantly influence the resulting area and performance. Finding a suitable trade-off is more challenging when the area and performance overhead must fit all data path widths without getting out of balance.&lt;/p&gt;
&lt;p&gt;Also, when designing a core highly optimized for area, there are some sacrifices to be made here and there. Of course, the area must be minimized, but likewise, the core must remain suitable for most users and applications when defining constraints in the feature set. One example is the decoder: Not all instruction bits are explicitly checked to reduce the area. Assumptions are made that some instructions cannot occur. The drawback, however, is that an illegal instruction may be interpreted as a different legal instruction instead of raising an illegal instruction exception. In this particular case, it was handled by providing the decoder logic in a table-like format that can be adapted by the user and synthesized to Verilog code by a tool. It eases modifications to detect illegal instructions when required or to add custom instructions to the core without digging into the decoder at a low level. However, many more decisions in the INT and CSR variants are yet to be made.&lt;/p&gt;
&lt;h1 id=&#34;what-could-the-community-do-to-support-you&#34;&gt;
    &lt;a href=&#34;#what-could-the-community-do-to-support-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What could the community do to support you?
&lt;/h1&gt;&lt;p&gt;Consider having a play with FazyRV in your next project, either by using the Verilog design directly or exploring FazyRV via LiteX. We are grateful for any opinions, reported issues, or suggestions.&lt;/p&gt;
&lt;p&gt;If you want to get involved even more, we maintain a list of open topics in the repository. Feel free to use this as a starting point or bring in your own ideas for discussion or a concrete proposed implementation. Even if you are not involved in digital design, well-designed tooling, workflows, and software support are needed to make adopting FazyRV as convenient as possible and verify changes continuously.&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-link-for-the-project&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-link-for-the-project&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best link for the project?
&lt;/h1&gt;&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://github.com/meiniKi/FazyRV&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub repository&lt;/a&gt; is the best place to start. It is where everything comes together and you will find the latest changes and updates. For example, we will soon publish a research paper with many more evaluations and design insights, which we will reference in the repo.&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-way-for-people-to-contact-you&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-way-for-people-to-contact-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best way for people to contact you?
&lt;/h1&gt;&lt;p&gt;You can find a list of up-to-date contact options on my website.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.meinhard-kissich.at&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.meinhard-kissich.at&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Sky130 SPICE, the KiCad way</title>
        <link>http://blog.yosyshq.com/p/sky130-kicad-spice/</link>
        <pubDate>Mon, 12 Feb 2024 19:09:55 -0800</pubDate>
        
        <guid>http://blog.yosyshq.com/p/sky130-kicad-spice/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2024/sky130-kicad/banner.png" alt="Featured image of post Sky130 SPICE, the KiCad way" /&gt;&lt;p&gt;&lt;em&gt;This guest post is by &lt;a class=&#34;link&#34; href=&#34;https://chaos.social/@lethalbit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Aki Van Ness&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;sky130-spice-the-kicad-way&#34;&gt;
    &lt;a href=&#34;#sky130-spice-the-kicad-way&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Sky130 SPICE, the KiCad way
&lt;/h1&gt;&lt;p&gt;Picture this, you&amp;rsquo;re working on a custom layout for &lt;a class=&#34;link&#34; href=&#34;https://skywater-pdk.readthedocs.io/en/main/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Sky130&lt;/a&gt;, be it a PLL, or you&amp;rsquo;re just trying your hands at making some basic building blocks. You&amp;rsquo;ve got a plan, and and ready to start laying down some nets, and that&amp;rsquo;s when you must face it, the dreaded &lt;a class=&#34;link&#34; href=&#34;https://xschem.sourceforge.io/stefan/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xschem&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;All joking aside, xschem is an incredibly powerful schematic capture system, but that power comes at a cost. xschem is fairly arcane to most, it has some graphical problems, and is just in general really hard to use if you&amp;rsquo;re just starting out which makes rapid iteration difficult.&lt;/p&gt;
&lt;p&gt;Enter &lt;a class=&#34;link&#34; href=&#34;https://kicad.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KiCad&lt;/a&gt;, a robust and Open Source EDA software package, while it is mainly used for PCB layout, we can leverage the schematic capture and built-in SPICE simulation, right?&lt;/p&gt;
&lt;h2 id=&#34;introducing-kicad-pdk-libs&#34;&gt;
    &lt;a href=&#34;#introducing-kicad-pdk-libs&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Introducing kicad-pdk-libs
&lt;/h2&gt;&lt;p&gt;A little while ago I ran into &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/lethalbit/status/1498345181359321091&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;that exact problem&lt;/a&gt;, and so I set out and made &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kicad-pdk-libs&lt;/a&gt;, a KiCad symbol library that adds schematic symbols for not only the basic building blocks of the Sky130 &lt;a class=&#34;link&#34; href=&#34;https://www.zerotoasiccourse.com/terminology/pdk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PDK&lt;/a&gt;, but also SPICE library linkage.&lt;/p&gt;
&lt;p&gt;With this you can do things as simple as just stubbing out a SPICE simulation for some of the primitive gates, or go down to the transistor level and build gates from scratch and simulate their characteristics!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/sky130-kicad/kicad_nfet.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The KiCad &amp;ldquo;Choose Symbol&amp;rdquo; dialog showing a symbol called &amp;ldquo;sky130_nfet_01v8&amp;rdquo; being selected&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;As it stands, &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kicad-pdk-libs&lt;/a&gt; has almost 100% complete symbols for both the Sky130A and Sky130B PDKs, all the cell libraries as well as the base &lt;code&gt;sky130_fd_pr&lt;/code&gt; primitives library. This allows you to not just put transistor level schematics together, but much larger schematics using all of the pre-made gates and cells in the library, including some SRAM blocks.&lt;/p&gt;
&lt;h2 id=&#34;quick-n-dirty-inverter&#34;&gt;
    &lt;a href=&#34;#quick-n-dirty-inverter&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Quick n&amp;rsquo; Dirty Inverter
&lt;/h2&gt;&lt;p&gt;The basic example that almost everyone uses as their first CMOS device is the trusty inverter. As such we will quickly go over it here, if you wish for a more step-by-step guide with additional details, see the kicad-pdk-libs &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs/blob/main/docs/intro.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;intro&lt;/a&gt; in the docs.&lt;/p&gt;
&lt;p&gt;All you need to do is to throw a &lt;code&gt;sky130_pfet_01v8&lt;/code&gt; and a &lt;code&gt;sky130_nfet_01v8&lt;/code&gt; on top of each other with their drains facing each other, hook up &lt;code&gt;VCC&lt;/code&gt; and &lt;code&gt;GND&lt;/code&gt; and then join the gates and drains, and just like that, you have an inverter using the primitive Sky130 FET models.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/sky130-kicad/inverter_sch.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The CMOS inverted as described above&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Next set up some way to drive the sim, in my case I did a VDC source and then a VPULSE to drive the inverter, these are built-in to the standard KiCad SPICE library, it should look something like this when done:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/sky130-kicad/schema.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Full view of the KiCad schematic showing the VDC and VPULSE elements along with the CMOS inverter previously shown&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;After that, you can add the following SPICE directives as a text element on the schematic, and make sure to replace &lt;code&gt;${PDK_ROOT}&lt;/code&gt; with the path to your local PDK root:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-spice&#34; data-lang=&#34;spice&#34;&gt;.tran 100f 100n
.lib ${PDK_ROOT}/sky130A/libs.tech/ngspice/sky130.lib.spice tt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And finally, we&amp;rsquo;re ready to run the sim! Open up KiCad&amp;rsquo;s simulation utility and simply click the &amp;ldquo;Run/Stop Simulation&amp;rdquo; button, if all goes well, the simulation will run and then we can plot the &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; signals.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/sky130-kicad/sim_results.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;The simulation results of the simple Sky130 CMOS inverter&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Look at that! It&amp;rsquo;s a working inverter!&lt;/p&gt;
&lt;p&gt;Something important to note, this simulation uses default parameters for the Sky130 transistors, you can get more accurate results by using &lt;a class=&#34;link&#34; href=&#34;http://opencircuitdesign.com/magic/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;magic&lt;/a&gt; to extract the transistor parameters from a layout and then attach them to the KiCad symbols by setting the &lt;code&gt;Sim.Params&lt;/code&gt; property on the transistor.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;p&gt;I hope this gives you a brief idea of what the &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kicad-pdk-libs&lt;/a&gt; is all about, and how you can use it to simulate your schematics for use in ASIC layout.&lt;/p&gt;
&lt;p&gt;While it may not be as powerful and scriptable as something like &lt;a class=&#34;link&#34; href=&#34;https://xschem.sourceforge.io/stefan/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;xschem&lt;/a&gt;, especially right out of the box, I hope it is a useful tool for those just starting out, or for people who just need to throw things together quickly. Especially with the promising improvements coming to KiCad 8&amp;rsquo;s simulation workspace, which will allow much more comprehensive and complete analysis.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;kicad-pdk-libs&lt;/a&gt; and what you&amp;rsquo;ve read here, give it an &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs/blob/main/docs/install.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;install&lt;/a&gt;, and check out the &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs/blob/main/docs/intro.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;intro&lt;/a&gt; and the &lt;a class=&#34;link&#34; href=&#34;https://github.com/lethalbit/kicad-pdk-libs/tree/main/examples&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;examples&lt;/a&gt; for more detailed information.&lt;/p&gt;
&lt;p&gt;Go have fun and make something cool!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Yosys User&#39;s Group</title>
        <link>http://blog.yosyshq.com/p/yosys-users-group/</link>
        <pubDate>Sun, 04 Feb 2024 12:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/yosys-users-group/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/yug.jpg" alt="Featured image of post Yosys User&#39;s Group" /&gt;&lt;p&gt;We have recently started a Yosys User&amp;rsquo;s Group. You can see the &lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/document/d/13e8hERQ_eqLQrdtH1WXnGUXDtgyQ8oa_zZWXPHJCiN0/edit#heading=h.dqkvsnhcju2v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;minutes of our first 4 calls here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;d like to join, then please &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/newsletter&#34; &gt;sign up to the newsletter&lt;/a&gt; or follow us on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/company/yosyshq&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;linkedin&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://fosstodon.org/@yosyshq&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;mastodon&lt;/a&gt; or&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://twitter.com/YosysHQ&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;twitter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;yug-7---fpga-lightning-talks&#34;&gt;
    &lt;a href=&#34;#yug-7---fpga-lightning-talks&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    YUG 7 - FPGA lightning talks
&lt;/h2&gt;&lt;p&gt;6 great presentations about open source FPGA projects! Watch the talks here: &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=wZiocG8DHfE&amp;amp;list=PL-ggbobZGIQuMGBkQgubVbJ1jffe2k18O&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=wZiocG8DHfE&amp;list=PL-ggbobZGIQuMGBkQgubVbJ1jffe2k18O&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to the presenters: Pat Deegan, Frans Skarman, Martín Heredia, Sasko Simonovski, Christopher Lozinski and Ashe Connor.&lt;/p&gt;
&lt;h2 id=&#34;yug-6---hardware-security&#34;&gt;
    &lt;a href=&#34;#yug-6---hardware-security&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    YUG 6 - Hardware Security
&lt;/h2&gt;&lt;p&gt;Katharina &amp;amp; Flavian from ETH Zurich introduced their tool for Information Flow Tracking: &lt;a class=&#34;link&#34; href=&#34;https://comsec.ethz.ch/research/hardware-design-security/cellift/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://comsec.ethz.ch/research/hardware-design-security/cellift/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;yug-5---systemverilog-with-pulps-svase&#34;&gt;
    &lt;a href=&#34;#yug-5---systemverilog-with-pulps-svase&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    YUG 5 - SystemVerilog with Pulp’s SVase
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;An introduction to &lt;a class=&#34;link&#34; href=&#34;https://github.com/pulp-platform/bender&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bender&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://github.com/pulp-platform/morty&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Morty&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/pulp-platform/svase&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SVase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;yug-4---all-the-plugins&#34;&gt;
    &lt;a href=&#34;#yug-4---all-the-plugins&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    YUG 4 - all the plugins!
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;List of all the plugins we know of&lt;/li&gt;
&lt;li&gt;Gabriel Gouvine talks about how he wrote a logic locking plugin&lt;/li&gt;
&lt;li&gt;Martin Povišer talks about the Python plugin API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;yug-3---pick-your-primitives&#34;&gt;
    &lt;a href=&#34;#yug-3---pick-your-primitives&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    YUG 3 - pick your primitives!
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Show in the case of multipliers how one would go about instructing Yosys to synthesize chosen primitives a specific way.&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/povik/yug3_demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/povik/yug3_demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;yug-2---introducing-eqy&#34;&gt;
    &lt;a href=&#34;#yug-2---introducing-eqy&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    YUG 2 - introducing EQY!
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/eqy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;demo of our new formal equivalence tool - eqy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;yug-1---a-new-users-group&#34;&gt;
    &lt;a href=&#34;#yug-1---a-new-users-group&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    YUG 1 - a new users group!
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;What people are using Yosys for,&lt;/li&gt;
&lt;li&gt;How things can be improved,&lt;/li&gt;
&lt;li&gt;Introducing our new tools,&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Logic Locking with Moosic</title>
        <link>http://blog.yosyshq.com/p/logic-locking-with-moosic/</link>
        <pubDate>Tue, 30 Jan 2024 12:00:00 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/logic-locking-with-moosic/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2024/locking.png" alt="Featured image of post Logic Locking with Moosic" /&gt;&lt;p&gt;&lt;em&gt;This guest post is by Gabriel Gouvine.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;applying-logic-locking-to-a-tinytapeout-design-with-moosic&#34;&gt;
    &lt;a href=&#34;#applying-logic-locking-to-a-tinytapeout-design-with-moosic&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Applying logic locking to a TinyTapeout design with Moosic
&lt;/h1&gt;&lt;p&gt;When creating a design, most of us are not in possession of the lithography and manufacturing tools necessary to actually create the chip: we send our design to a foundry and they make the chip for us.&lt;/p&gt;
&lt;p&gt;This requires a great deal of trust in the toolchain and the foundry: a malicious actor could introduce backdoors, or just steal the design to reuse it themselves.
For security-conscious designers, countermeasures are necessary.&lt;/p&gt;
&lt;p&gt;One such countermeasure is logic locking: we are going to lock our design, so that it does not work without a secret key.
We do it by adding or changing some gates in the design to use the key: if the key is incorrect, the design behaviour will be completely modified.
This is going to make it harder to reuse the design without authorization (you have to find the key) or to introduce backdoors (you have to understand what it does).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/locking.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;My Image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;We built a Yosys plugin &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/moosic-yosys-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;to do just that&lt;/a&gt;.
The plugin provides a &lt;code&gt;logic_locking&lt;/code&gt; command that will mangle the design as much as it can.&lt;/p&gt;
&lt;p&gt;To illustrate, let&amp;rsquo;s make a design on &lt;a class=&#34;link&#34; href=&#34;https://tinytapeout.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TinyTapeout&lt;/a&gt;, lock it and synthesize it all the way to silicon.&lt;/p&gt;
&lt;h2 id=&#34;what-is-logic-locking&#34;&gt;
    &lt;a href=&#34;#what-is-logic-locking&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is logic locking
&lt;/h2&gt;&lt;p&gt;The goal of logic locking is to make the design unusable without the right key.
Usually, we apply it after synthesis, when the design is already mapped to logic gates.
Logic locking adds new gates that will change the behaviour of the design unless the right key is provided.
Our tool does it by adding Xor and Xnor gates, as shown below, but you can imagine a lot of ways to insert or replace gates.
If a 0 is set for a Xor gate, or a 1 for a Xnor gate, the design works as before.
It acts as a countermeasure rather than a cryptographic security.
Much like software countermeasures it will not stop a determined attacker with unlimited resources, but it&amp;rsquo;s one more thing that an attacker will have to break.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/XOR_NXOR_insertion.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Xor insertion&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The logic locking tool needs to decide where to insert the gates.
Its goal is to disrupt the design as much as possible, and ideally make the key hard to guess by running and analyzing the design.
The tool will analyze the impact of inserting a locking gate, and pick the places that maximize its estimated security, typically signals that have a large impact on the design&amp;rsquo;s behaviour.
Ultimately, it&amp;rsquo;s a tradeoff between security and performance: for security, the more gates you insert the better, but this makes the circuit bigger and slower.&lt;/p&gt;
&lt;p&gt;Just a few percents of the gates locked is almost always enough to completely corrupt the design.
We can explore the tradeoff with the plugin.
For example, on this benchmark, locking just 13% of the signals breaks all outputs and all testcases:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2024/pareto_front.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Corruptibility&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;locking-a-design&#34;&gt;
    &lt;a href=&#34;#locking-a-design&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Locking a design
&lt;/h2&gt;&lt;p&gt;We are going to make a toy design to experiment with logic locking. I wrote a counter, that is incremented at each clock cycle where &lt;code&gt;do_incr&lt;/code&gt; is set:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do_incr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rst_n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_out&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rst_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;do_incr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We run Yosys with the &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/moosic-yosys-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Moosic plugin&lt;/a&gt;. Since logic locking works on a netlist, we first synthesize our counter with the default library:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;read_verilog&lt;/span&gt; src&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;counter.v
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;synth&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we apply locking and save our netlist. To fit in our 8-bit input port, I picked a small 6-bit key. With only 64 possible values, it is easy to brute-force, so make it a lot bigger if you use it in the wild! And don&amp;rsquo;t lose the key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-tcl&#34; data-lang=&#34;tcl&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;logic_locking&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;key-bits &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;key &lt;span class=&#34;mi&#34;&gt;39&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;write_verilog&lt;/span&gt; src&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;locked_counter.v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking at the file, our module is now a netlist with an additional port &lt;code&gt;moosic_key&lt;/code&gt;. Following TinyTapeout&amp;rsquo;s philosophy, it all runs as a &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/locked-tapeout/actions/runs/7582853506/workflow&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github action&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;do_incr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rst_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moosic_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do_incr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data_out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rst_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;moosic_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;tinytapeout&#34;&gt;
    &lt;a href=&#34;#tinytapeout&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    TinyTapeout
&lt;/h2&gt;&lt;p&gt;With TinyTapeout, we can synthesize this design to silicon.
We will have to make a wrapper in order to load the key on our design&amp;hellip; and test that our design works as expected when the key is provided.
The &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/locked-tapeout/blob/main/src/project.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;main project file&lt;/a&gt; will be responsible for loading the key.
We are going to keep it simple and read the key directly from the primary inputs. On a production design, getting the key in would be part of the boot sequence.&lt;/p&gt;
&lt;p&gt;To make sure it all works, we wrote a &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/locked-tapeout/blob/main/test/test.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;testbench&lt;/a&gt; that checks that our counter behaves as expected&amp;hellip; and is indeed broken with the wrong key.&lt;/p&gt;
&lt;p&gt;And finally we have the full masks for the design! The code for the TinyTapeout project is available &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/locked-tapeout&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;, and our locked counter will be on the TT06 chip when it tapes out.
If you want to go further, have a look at &lt;a class=&#34;link&#34; href=&#34;https://github.com/Coloquinte/moosic-yosys-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the project page&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://peertube.f-si.org/videos/watch/7f250190-6d8f-4a67-8ed6-d07deda7fba0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;our Free Silicon Conference presentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For power users, the plugin provides a lot of additional options to pick your security metrics, or to balance security and performance.
Logic locking is an active area of research, and we are happy to provide an open-source tool to apply it to your designs.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20240116 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240116-released/</link>
        <pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20240116-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20240116 released!" /&gt;&lt;p&gt;The January release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can now pass arguments to tcl scripts from the command line by appending them at the end of the command, separated from the yosys arguments by &amp;ldquo;&amp;ndash;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;yosys -c script.tcl &amp;ndash; arg1 arg2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We published a new &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/community-spotlight-surfer/&#34; &gt;community spotlight by Frans Skarman&lt;/a&gt;. Introducing us to Surfer, which is a new web-based waveform viewer with a focus on extensibility and a snappy user interface.&lt;/li&gt;
&lt;li&gt;We are hiring! If you know anyone currently looking for a job developing EDA tools, let them know about our &lt;a class=&#34;link&#34; href=&#34;https://www.yosyshq.com/jobs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jobs page&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy New Year,
The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Community Spotlight - Surfer</title>
        <link>http://blog.yosyshq.com/p/community-spotlight-surfer/</link>
        <pubDate>Mon, 27 Nov 2023 13:26:31 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/community-spotlight-surfer/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/spotlight/surfer/surfer.png" alt="Featured image of post Community Spotlight - Surfer" /&gt;&lt;h1 id=&#34;surfer&#34;&gt;
    &lt;a href=&#34;#surfer&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Surfer
&lt;/h1&gt;&lt;p&gt;Welcome to another &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/tags/community-spotlight/&#34; &gt;community spotlight&lt;/a&gt; article where we shine a light on open source EDA projects. If you want to &lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSdIEgu6FJZam0-V3PMTjw-eDebJdg_JuIlN4MkLNDr4vs-a5A/viewform?usp=sf_link&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;submit a project, please do so here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Surfer is a new waveform viewer with a focus on extensibility and a snappy
(optionally keyboard driven) UI. It runs both natively and in web-assembly, so
you can try it out right here in the browser at
&lt;a class=&#34;link&#34; href=&#34;https://app.surfer-project.org/?load_url=https://app.surfer-project.org/picorv32.vcd&amp;amp;startup_commands=show_quick_start;module_add%20testbench.top&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://app.surfer-project.org&lt;/a&gt;.
The project is written in rust and while it is still in its early stages, it is
usable as a day-to-day wave viewer.&lt;/p&gt;
&lt;h1 id=&#34;frans-skarmans-bio&#34;&gt;
    &lt;a href=&#34;#frans-skarmans-bio&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Frans Skarman&amp;rsquo;s Bio
&lt;/h1&gt;&lt;p&gt;I am a 5th year PhD student at the department of electrical engineering at
Linköping university in Sweden. I&amp;rsquo;m originally a software person, who started
off in game development and then descending lower and lower in the tech stack
until I reached this wonderful world of hardware. The whole time, i&amp;rsquo;ve
been most interested in writing tools; initially game engines instead of games,
and now compilers instead of actual hardware design. My main project these days is
&lt;a class=&#34;link&#34; href=&#34;https://spade-lang.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://spade-lang.org/&lt;/a&gt; a hardware description language inspired by modern
software languages.&lt;/p&gt;
&lt;p&gt;Outside of programming I enjoy some 3d printing, playing flight simulators, as
well as sailing or skiing when the weather permits.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2023/spotlight/surfer/frans.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Frans Skarman&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I also need to give credit to Lucas who was featured in the &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/community-spotlight-wal/&#34; &gt;last community
spotlight&lt;/a&gt;, and my PhD advisor Oscar who have
contributed a ton of features and fixes to the project.&lt;/p&gt;
&lt;h1 id=&#34;what-motivated-you-to-make-surfer&#34;&gt;
    &lt;a href=&#34;#what-motivated-you-to-make-surfer&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What motivated you to make Surfer?
&lt;/h1&gt;&lt;p&gt;When building my HDL, Spade, I ran into a problem. With a powerful type system,
the bit representation of a signal is often hard to understand, so you need a
way to automatically translate the values back into their human-readable
representation to effectively debug your designs. While &lt;code&gt;gtkwave&lt;/code&gt; has support
for custom translation via external programs, it turned out to be quite hard to
get right and wasn&amp;rsquo;t as powerful as I wanted. For example, I found no way to
translate a value into a list of expandable sub-fields to, for example, expand
individual fields of a struct. I was also bothered by small things like how
zooming and scrolling works in gtkwave.&lt;/p&gt;
&lt;p&gt;Eventually, the question of &amp;ldquo;how hard can it be&amp;rdquo; made me start this project.
Luckily, it turns out that with the right libraries, the answer to that
question was that it is easier than I thought it would be.&lt;/p&gt;
&lt;h1 id=&#34;what-makes-you-excited-about-surfer&#34;&gt;
    &lt;a href=&#34;#what-makes-you-excited-about-surfer&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What makes you excited about Surfer?
&lt;/h1&gt;&lt;p&gt;Overall, I&amp;rsquo;m very excited about having a mostly solid waveform viewer where I
and others can try out new things, both in terms of translations and interface.
I do have some favorite features I can touch more on though:&lt;/p&gt;
&lt;h2 id=&#34;web-assembly&#34;&gt;
    &lt;a href=&#34;#web-assembly&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Web assembly
&lt;/h2&gt;&lt;p&gt;Perhaps my favorite thing about Surfer right now is that it works almost
flawlessly in web assembly. You can see a demo of that at
&lt;a class=&#34;link&#34; href=&#34;https://app.surfer-project.org&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://app.surfer-project.org&lt;/a&gt;. If you
have a VCD file to analyse, you can just append that to the URL along with some commands to run when the waveform is loaded, for example
&lt;a class=&#34;link&#34; href=&#34;https://app.surfer-project.org/?load_url=https://app.surfer-project.org/picorv32.vcd&amp;amp;startup_commands=module_add%20testbench;divider_add%20.;divider_add%20top;module_add%20testbench.top;show_quick_start&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://app.surfer-project.org/?load_url=https://app.surfer-project.org/picorv32.vcd&amp;startup_commands=module_add%20testbench;divider_add%20.;divider_add%20top;module_add%20testbench.top;show_quick_start&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Apart from being a cool tech demo, this also enables some cool workflow in
CI/CD. For example, we can augment the &lt;a class=&#34;link&#34; href=&#34;https://tinytapeout.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tinytapeout&lt;/a&gt;
test action to link to surfer with the
resulting waveform. No longer will you have to re-run your tests locally, or
manually download a VCD file to view it in a desktop viewer.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also very happy that going from idea to implementation of the web version
took less than a day thanks to the rich rust ecosystem around web assembly.&lt;/p&gt;
&lt;h2 id=&#34;signal-translation&#34;&gt;
    &lt;a href=&#34;#signal-translation&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Signal translation
&lt;/h2&gt;&lt;p&gt;As I mentioned earlier, a big motivator for building surfer was being able to
get richer translation of Spade types. Even though I had a hacky system for
doing that in &lt;code&gt;gtkwave&lt;/code&gt;, the Surfer version where you can expand or collapse
&lt;code&gt;struct&lt;/code&gt;s, view individual &lt;code&gt;enum&lt;/code&gt; variants and translate sub-fields as you please
is a game changer.&lt;/p&gt;
&lt;p&gt;Below is an image and a quick demo video showing it off
&lt;img src=&#34;http://blog.yosyshq.com/static-2023/spotlight/surfer/surfer.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Picture showing surfer translating Spade structs opcodes&#34;
	
	
&gt;&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/58AW1LpNaDM&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Another really cool translator is the RISC-V opcode translator shown below&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2023/spotlight/surfer/riscv_opcode_translation.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Picture showing surfer translating RISC-V opcodes&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I have also done my best to build this translation system to be decoupled from
Spade, meaning that anyone could add translation for their own HDLs constructs,
or perhaps something completely different, like a translator that splits a stereo audio signal into left and right channels. All that
is needed for that is to implement a &lt;a class=&#34;link&#34; href=&#34;https://gitlab.com/surfer-project/surfer/-/blob/main/src/translation/mod.rs?ref_type=heads#L290&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;few methods in a
trait&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;keyboard-and-mouse-gesture-based-ui&#34;&gt;
    &lt;a href=&#34;#keyboard-and-mouse-gesture-based-ui&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Keyboard and mouse gesture based UI
&lt;/h2&gt;&lt;p&gt;As a vim user, I hate reaching for my mouse, so we&amp;rsquo;ve put quite a bit of effort
into making surfer usable with just the keyboard. There are some keybindings
for normal navigation of course, but most of the happens via a fuzzy matching
based command palette, similar to ctrl-p in Visual Studio Code. For tasks where
the mouse is more appropriate, like navigating the waveform there is also a mouse gesture based UI. You can see both in action in the video below.&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/gASWElSl32k&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h1 id=&#34;why-do-you-make-open-source-tools&#34;&gt;
    &lt;a href=&#34;#why-do-you-make-open-source-tools&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Why do you make open source tools?
&lt;/h1&gt;&lt;p&gt;Every time I have to use non-open source software I get frustrated, sometimes
because dealing with licenses but often just because the software is missing
features or customization options that I want, or because features I rely on get removed in a new version. These frustrations happen less with open source software in my experience. Since I probably wouldn&amp;rsquo;t use a closed
source tool myself, I&amp;rsquo;m certainly not going to build one.&lt;/p&gt;
&lt;p&gt;For surfer in particular, one of the big advantages of open source is that
everyone can add their favorite features, whether it is a translator for a new
signal format, a new way to render waves or some new way to interact with the
program, things that a closed source developer might not have the interest nor resources to implement.
After a while, this makes an open source tool feel very complete, because all
the small features and fixes have been added.&lt;/p&gt;
&lt;h1 id=&#34;what-are-some-challenges&#34;&gt;
    &lt;a href=&#34;#what-are-some-challenges&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What are some challenges?
&lt;/h1&gt;&lt;p&gt;The biggest challenge in my mind is in UI design. I&amp;rsquo;m not a UI designer, I only
took a single course on it during my bachelor, so most of the time I&amp;rsquo;m just winging
it. For features I use myself, I at least have some idea of what I want, for
feature requests by others I might even have that.&lt;/p&gt;
&lt;p&gt;There have also been some technical hurdles, primarily because we offload the
parsing of wave files to external libraries. For now we only support VCD, but
we are working on both decoupling surfer from the VCD library, as well as
adding support for other formats, in particular FST.&lt;/p&gt;
&lt;h1 id=&#34;what-could-the-community-do-to-support-you&#34;&gt;
    &lt;a href=&#34;#what-could-the-community-do-to-support-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What could the community do to support you?
&lt;/h1&gt;&lt;p&gt;First, give surfer a try. Let us know what you find nice and what could use
improvements. Especially as a non-UX person it is invaluable to get feedback
from users!&lt;/p&gt;
&lt;p&gt;If you want to do more, consider contributing the features you think are
missing. In particular, small features like a translator for a new bit format, a
fix for a small bug you find or perhaps some additional way to zoom or navigate the waveforms.
As I said earlier, people contributing these small things are what gives open source software that
warm feeling that someone has thought of your particular use case.&lt;/p&gt;
&lt;p&gt;Of course, we&amp;rsquo;re also very happy to accept bigger contributions, like
support for loading files from other wave formats or big translators for
translating to the native format from some alt-HDL like Amaranth, Chisel or
Clash.&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-link-to-give-for-the-project&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-link-to-give-for-the-project&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best link to give for the project?
&lt;/h1&gt;&lt;p&gt;If you want to learn more, see the &lt;a class=&#34;link&#34; href=&#34;https://gitlab.com/surfer-project/surfer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;git repo&lt;/a&gt;. You can also try Surfer right in your browser at &lt;a class=&#34;link&#34; href=&#34;https://app.surfer-project.org&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://app.surfer-project.org&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-way-for-people-to-contact-you&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-way-for-people-to-contact-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best way for people to contact you?
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Email: &lt;a class=&#34;link&#34; href=&#34;mailto:frans.skarman@liu.se&#34; &gt;frans.skarman@liu.se&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mastodon: &lt;a class=&#34;link&#34; href=&#34;https://mastodon.social/@thezoq2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TheZoq2@mastodon.social&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Spade discord (with a surfer channel): &lt;a class=&#34;link&#34; href=&#34;https://discord.gg/hdyGSn8ejw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://discord.gg/hdyGSn8ejw&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20231107 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20231107-released/</link>
        <pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20231107-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20231107 released!" /&gt;&lt;p&gt;The November release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixed problems with verific elaboration in VHDL that were introduced in the last release - you should no longer see spurious multiple driver warnings.&lt;/li&gt;
&lt;li&gt;Memory inference can now recognize (* rom_style = &amp;ldquo;&amp;hellip;&amp;rdquo; *) attributes on data output and address signals (attributes on the data storage register still take precedence, but this allows forcing a style e.g. when inferring ROM from a case statement).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We just published a new guest blog post by Theophile Loubiere. He wrote a fun introduction to formal by using SBY to &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/solving-sudoku-with-sby/&#34; &gt;solve a sudoku&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy November,
The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Solving a Sudoku with SBY and Formal Verification</title>
        <link>http://blog.yosyshq.com/p/solving-sudoku-with-sby/</link>
        <pubDate>Mon, 06 Nov 2023 12:00:00 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/solving-sudoku-with-sby/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/cover_sby_sudoku.png" alt="Featured image of post Solving a Sudoku with SBY and Formal Verification" /&gt;&lt;p&gt;&lt;em&gt;This guest post is by Theophile Loubiere.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;solving-a-sudoku-with-sby-and-formal-verification&#34;&gt;
    &lt;a href=&#34;#solving-a-sudoku-with-sby-and-formal-verification&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Solving a Sudoku with SBY and Formal Verification
&lt;/h1&gt;&lt;p&gt;Recently, I began using SBY to formally verify my designs. You can check out my first attempt on my blog &lt;a class=&#34;link&#34; href=&#34;https://learn-fpga-easily.com/trying-formal-verification-with-symbiyosys-and-chisel/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;learn-fpga-easily&lt;/a&gt;. Formal Verification helps ensure that certain properties of your design always remain true, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bus arbitration&lt;/strong&gt;: &amp;ldquo;Only one master can receive the bus grant at any given time.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Overflow and Underflow&lt;/strong&gt;: &amp;ldquo;The FIFO buffer will never overflow or underflow.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;State Machine Reachability&lt;/strong&gt;: &amp;ldquo;The state machine can never transition from state_1 to state_3.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These kinds of properties would normally require an extensive functional testbench for coverage. However, with formal verification and SBY, they can be easily addressed with just a few assertions and assumptions.&lt;/p&gt;
&lt;p&gt;Given my newfound knowledge, it seemed completely natural that after embarrassingly failing to solve a Sudoku puzzle with my grandfather – a hit to my pride – I decided to repurpose the use of SBY just to figure out a Sudoku solution.&lt;/p&gt;
&lt;p&gt;Today, I am excited to share with you my overkill attempt to solve a simple Sudoku puzzle with SBY and Formal Verification.&lt;/p&gt;
&lt;h2 id=&#34;modeling-the-sudoku&#34;&gt;
    &lt;a href=&#34;#modeling-the-sudoku&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Modeling the Sudoku
&lt;/h2&gt;&lt;p&gt;In Verilog, we can represent a Sudoku grid straightforwardly: a two-dimensional register encompassing 9 rows and 9 columns, where each cell occupies 4 bits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudoku&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Internal 9x9 grid to make operations more intuitive
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keep&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`ifdef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FORMAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// see next section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;`endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using the (* keep *) attribute ensures our register won&amp;rsquo;t be discarded during synthesis, even if it isn&amp;rsquo;t used anywhere.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it! Now, let&amp;rsquo;s dive into the interesting part: Formal Verification.&lt;/p&gt;
&lt;h2 id=&#34;how-to-solve-a-sudoku-with-formal-verification-&#34;&gt;
    &lt;a href=&#34;#how-to-solve-a-sudoku-with-formal-verification-&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    How to solve a sudoku with Formal Verification ?
&lt;/h2&gt;&lt;p&gt;Formal verification involves setting specific properties that your design must always satisfy. The formal solver then evaluates a vast array of mathematically choosen scenarios. If a property doesn&amp;rsquo;t always hold true, the solver will tell you: &amp;ldquo;Nope, your property does not hold true in this counter-example.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;But here&amp;rsquo;s the catch: If we lay down just one property, the solver might churn out a completely irrelevant solution. Take Sudoku: Every row in a correctly solved grid has every digits from 1 to 9. One obvious property is the sum of digits in a row totaling 45 (because 1+2+3+&amp;hellip;+9=45). Yet, with just this, the solver might suggest a row like: 0,0,0,0,0,0,0,0,45. Clearly flawed, given illegal numbers and the repetition.&lt;/p&gt;
&lt;p&gt;We must assume additional properties to narrow down the solution space and obtain relevant counterproofs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In digital design, we assume valid input behavior, focusing assertions on internal and output signals.&lt;/li&gt;
&lt;li&gt;For this Sudoku escapade, where we&amp;rsquo;re playfully repurposing the tool, assumptions will lean on the sudoku_grid register (typically a target for assertions).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, what assumptions should we make for Sudoku? The basic rules.&lt;/p&gt;
&lt;h3 id=&#34;assuming-the-basic-rules&#34;&gt;
    &lt;a href=&#34;#assuming-the-basic-rules&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Assuming the Basic Rules
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;All digits should be between 1 and 9&lt;/strong&gt;. Which translates to:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`ifdef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FORMAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// variables declaration for all forloops
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;genvar&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// assume all the digits are between 1 and 9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;generate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;digit_assumption_i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;digit_assumption_j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;&amp;#39;d9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;&amp;#39;d1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endgenerate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With these assumptions, the solver won&amp;rsquo;t try any numbers that are outside of this range.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;All digits in a row are all different&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;generate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;column_j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;column_k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endgenerate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;All digits in a column are all different&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;generate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;column_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row_j&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row_k&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endgenerate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;All digits in a box are all different&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;generate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_row_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;box_col_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row_i_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col_j_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row_m_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;						&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;col_n_check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;						&lt;span class=&#34;c1&#34;&gt;// Make sure we&amp;#39;re not comparing the same cell to itself
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;							&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;								&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;box_col&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;								&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;							&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;						&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;					&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;				&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endgenerate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;The initial grid cannot be changed&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// assume the intial grid
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initialization&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 6
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 7
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 8
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//line 9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;assume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;using-sby-to-solve-the-grid&#34;&gt;
    &lt;a href=&#34;#using-sby-to-solve-the-grid&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Using SBY to solve the Grid
&lt;/h3&gt;&lt;p&gt;With the game rules handed over to our solver, we want it to return the solution now.&lt;/p&gt;
&lt;p&gt;As highlighted before, in a correctly solved Sudoku, every row, column, or box&amp;rsquo;s digit sum is 45. We simply need to request an example where this property holds true. And since there&amp;rsquo;s only one such example, it elegantly unfolds as our desired Sudoku solution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Ask SBY to explicitly cover the (only) case where sum=45s
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;			 &lt;span class=&#34;n&#34;&gt;sudoku_grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;cover&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;&amp;#39;d45&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`endif&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FORMAL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;lets-run-the-verification&#34;&gt;
    &lt;a href=&#34;#lets-run-the-verification&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Let&amp;rsquo;s run the verification
&lt;/h2&gt;&lt;p&gt;To install SBY and all the required formal solvers, I recommend following the straightforward installation process provided by &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/oss-cad-suite-build&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;oss-cad-suite&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To execute the verification, we&amp;rsquo;ll need our sudoku.v file and a SBY configuration file named sudoku.sby with the content below:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[options]
mode cover

[engines]
smtbmc

[script]
read -formal sudoku.v
prep -top sudoku

[files]
sudoku.v
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All we have to do is run the following command :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sby -f sudoku.sby
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And as you can see&amp;hellip; it fails&amp;hellip; WAIT! WHAT?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2023/unreached_cover_statement.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;em&gt;SBY log&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Unreached cover statement&amp;hellip;&amp;rdquo; What does that mean?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The line assumptions are correct.&lt;/li&gt;
&lt;li&gt;The row assumptions are correct.&lt;/li&gt;
&lt;li&gt;The box assumptions are correct.&lt;/li&gt;
&lt;li&gt;The&amp;hellip; line 2 of the initialization is wrong&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;assume(sudoku_grid[1][5]==3); // wrong
assume(sudoku_grid[1][4]==3); // correct
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When I visited my grandfather, I handed him the original and copied it onto a paper to solve it myself&amp;hellip; I made a copying error(deep breath)&amp;hellip; At least we stumble upon a unexpected feature : we now know how to identify an unfeasible grid !&lt;/p&gt;
&lt;p&gt;Now, after correcting my mistake, it works as expected: SBY generates the solution for me!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the solution viewed through gtkwave (SBY give you the path of the vcd file):
&lt;img src=&#34;http://blog.yosyshq.com/static-2023/unreadable_solution.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;em&gt;GTKWave screenshot&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hmm&amp;hellip; that&amp;rsquo;s not very user-friendly to interpret.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take the futility of this exercise a step further and craft a Python script to visualize the solution. I&amp;rsquo;ve employed the pyDigitalWaveTools Python library to convert my VCD file into JSON format and have requested ChatGPT to create a script that reads the JSON and displays the solution in my terminal. All the sources can be accessed my &lt;a class=&#34;link&#34; href=&#34;https://github.com/LearnFpgaEasily/Solving-Sudoku-with-symbiyosys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;github page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, the moment we&amp;rsquo;ve all been waiting for - the solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;---------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s wrap this up. First off, if you&amp;rsquo;re ever stuck on that pesky Sudoku during a lazy Sunday afternoon, you now know there’s a&amp;hellip; let&amp;rsquo;s call it an “alternative” way to crack it. And check it is actually feasible.&lt;/p&gt;
&lt;p&gt;Now, on the real note: diving into techy stuff using simple problems we already know? It&amp;rsquo;s golden! It’s like trying to learn a new dance step with a song you already love. You get the hang of it faster and, more importantly, it&amp;rsquo;s fun. Playing around with SBY in this wild way just shows how cool and flexible these tools can be.&lt;/p&gt;
&lt;p&gt;Big Thanks to YosysHQ for letting me write on their blog. And to you, dear reader, remember: mix things up, try the unexpected, and most importantly, have some fun while you’re at it. Till next time!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20231011 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20231011-released/</link>
        <pubDate>Wed, 11 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20231011-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20231011 released!" /&gt;&lt;p&gt;The October release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improved identifier resolution when using bind statements in mixed-language projects&lt;/li&gt;
&lt;li&gt;Respect memory access order semantics when inferring memories with the verific frontend (for simultaneous read and write operations of the same memory location in the same clock cycle, on the same or a different port)&lt;/li&gt;
&lt;li&gt;Preview builds of our upcoming formal tools ivy and scy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We just published the 4th in our series of ‘community spotlight’ blog posts. This time we’re featuring &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/community-spotlight-wal/&#34; &gt;WAL by Lucas Klemmer&lt;/a&gt;. WAL aims to make it easier to analyze complex waveforms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy October,
The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Community Spotlight - WAL</title>
        <link>http://blog.yosyshq.com/p/community-spotlight-wal/</link>
        <pubDate>Mon, 25 Sep 2023 13:26:31 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/community-spotlight-wal/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/spotlight/wal-pipeline.png" alt="Featured image of post Community Spotlight - WAL" /&gt;&lt;h1 id=&#34;wal&#34;&gt;
    &lt;a href=&#34;#wal&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    WAL
&lt;/h1&gt;&lt;p&gt;Welcome to another &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/tags/community-spotlight/&#34; &gt;community spotlight&lt;/a&gt; article where we shine a light on open source EDA projects. If you want to &lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSdIEgu6FJZam0-V3PMTjw-eDebJdg_JuIlN4MkLNDr4vs-a5A/viewform?usp=sf_link&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;submit a project, please do so here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Waveform Analysis Language (WAL) is a programming language for complex waveform analysis and EDA tool development.&lt;/p&gt;
&lt;h1 id=&#34;lucas-klemmers-bio&#34;&gt;
    &lt;a href=&#34;#lucas-klemmers-bio&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Lucas Klemmer&amp;rsquo;s Bio
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2023/spotlight/lucas.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;lucas_klemmer&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m a PhD student at the Institute for Complex Systems at the Johannes Kepler University in Linz, Austria. I received my Master’s degree in computer science from the University of Bremen in Germany. My interests include RISC-V, HW verification and analysis, kayaking, and learning (natural) languages.&lt;/p&gt;
&lt;h1 id=&#34;what-motivated-you-to-make-wal&#34;&gt;
    &lt;a href=&#34;#what-motivated-you-to-make-wal&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What motivated you to make WAL?
&lt;/h1&gt;&lt;p&gt;Waveforms contain so much interesting information; however, this information is “buried” in enormous amounts of data. Using general purpose languages can quickly become challenging to analyze waveforms because these languages have no concepts of time, design structure, and other things we in hardware care about. With WAL, we want to make it easy to analyze waveforms by integrating those concepts into the language to make it “hardware aware”. Simply speaking, a WAL program runs on your waveform, and you can use the waveform signals just like you use variables.&lt;/p&gt;
&lt;h1 id=&#34;why-do-you-make-open-source-tools&#34;&gt;
    &lt;a href=&#34;#why-do-you-make-open-source-tools&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Why do you make open source tools?
&lt;/h1&gt;&lt;p&gt;As a computer scientist coming to the hardware world, it was quite a culture shock when I had to use closed-source toolchains. However, in the last few years, this feeling changed from being shocked to being amazed by all the open-source hardware and EDA projects that emerged.
With WAL, I hope that I can add my small contribution to this change!&lt;/p&gt;
&lt;h1 id=&#34;what-are-some-challenges&#34;&gt;
    &lt;a href=&#34;#what-are-some-challenges&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What are some challenges?
&lt;/h1&gt;&lt;p&gt;Handling very large waveforms with WAL is possible, but more work on performance and optimizations is required.
Moreover, the hardware domain requires a bit more work to win people for new ideas than in the software world.&lt;/p&gt;
&lt;h1 id=&#34;what-could-the-community-do-to-support-you&#34;&gt;
    &lt;a href=&#34;#what-could-the-community-do-to-support-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What could the community do to support you?
&lt;/h1&gt;&lt;p&gt;I&amp;rsquo;m constantly looking for interesting new applications. So if you have a waveform and would like to know more about it, then feel to contact me, I&amp;rsquo;m happy to help!&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-link-to-give-for-the-project&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-link-to-give-for-the-project&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best link to give for the project?
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://wal-lang.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wal-lang.org/&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-way-for-people-to-contact-you&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-way-for-people-to-contact-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best way for people to contact you?
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Email: &lt;a class=&#34;link&#34; href=&#34;mailto:lucas.klemmer@jku.at&#34; &gt;lucas.klemmer@jku.at&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mastodon: @lcsklmmr@fosstodon.org&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20230905 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230905-released/</link>
        <pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230905-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20230905 released!" /&gt;&lt;p&gt;The September release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tabby CAD Suite now optionally supports floating licenses via FlexLM. Floating licenses are priced at 600€/month (double the price of node-locked licenses). Existing customers may exchange two node-locked licenses for one floating license - please contact us if this would be of interest to you.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;YosysHQ&amp;rsquo;s Matt Venn will be at &lt;a class=&#34;link&#34; href=&#34;https://orconf.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ORConf 2023&lt;/a&gt; in Munich next week (September 15th to 17th). If you are also attending, come say hi!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy September,
The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20230807 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230807-released/</link>
        <pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230807-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20230807 released!" /&gt;&lt;p&gt;The August release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The verific command now has a new option -lib to load all modules from the specified files as blackbox modules, disregarding their contents. This is useful especially for loading primitives from a simulation library, e.g.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;verific -sv -lib cells_sim.v
verific -work unisim -vhdl -lib unisim_VCOMP.vhd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The files still need to be parseable by verific, so some limitations remain on the contents of the blackboxed modules, but it is possible to ignore some errors by first calling verific -set-warning VERI-XXXX for the corresponding error code.&lt;/p&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our newest blog post explores another one-line yosys solution, this time for a problem with &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/yosys-one-liners-rename/&#34; &gt;non-alphanumeric characters in netnames&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;YosysHQ was present at the Free Silicon Conference at Sorbonne University in Paris in July, check out the &lt;a class=&#34;link&#34; href=&#34;https://peertube.f-si.org/videos/watch/b6ccf0de-06c3-42d3-897a-1e81cbe04ac1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;recordings of Nina&amp;rsquo;s talk online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy August,
The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Yosys One Liners - Rename</title>
        <link>http://blog.yosyshq.com/p/yosys-one-liners-rename/</link>
        <pubDate>Mon, 12 Jun 2023 16:52:39 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/yosys-one-liners-rename/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/oneliners.jpeg" alt="Featured image of post Yosys One Liners - Rename" /&gt;&lt;p&gt;Scenario: you&amp;rsquo;re developing some Verilog RTL and after synthesis the ASIC tools you&amp;rsquo;re using fail on the design! It won&amp;rsquo;t accept square brackets in the input!&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the DUT:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module test(
    input   wire [7:0] a,
    input   wire [7:0] b,
    output  wire [8:0] sum
);

    assign sum = a + b;

endmodule

module gen(
    input   wire [23:0] a,
    input   wire [23:0] b,
    output  wire [26:0] c,
);
    genvar i;
    generate
    for (i=0; i&amp;lt;=2; i=i+1) begin
        test test (
            .a      (a[i*8+:8]),
            .b      (b[i*8+:8]),
            .sum    (c[i*9+:9])
        );
    end
    endgenerate
endmodule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And here we see the square brackets in the output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yosys -qp &#39;read_verilog generate.v; prep -top gen; write_verilog out.v&#39;

grep test out.v
    test \genblk1[0].test  (
    test \genblk1[1].test  (
    test \genblk1[2].test  (
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your challenge is to write a yosys one liner that renames the generated module names so they no longer contain square brackets.&lt;/p&gt;
&lt;p&gt;Our solution is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yosys -p &#39;read_verilog generate.v; prep -top gen; rename -hide */c:*[*; rename -enumerate -pattern bracket_% */c:$auto$rename*; write_verilog out.v&#39;

grep test out.v 
    test bracket_0 (
    test bracket_1 (
    test bracket_2 (
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to find out more about the Yosys rename command, &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/rename.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;please read the documentation here&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20230606 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230606-released/</link>
        <pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230606-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20230606 released!" /&gt;&lt;p&gt;The June release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The RISC-V Formal Verification Toolbox has gained a bus interface for checking that instructions relating to memory result in matching bus transactions, as well as some checks for the machine-mode CSRs required by the RISC-V privileged specification.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You might have seen Bruno Levy’s excellent introduction to RISCV on an FPGA. In our most &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/blinker-to-risc-v/&#34; &gt;recent blog post&lt;/a&gt;, guest author Bastian Löher shows how he followed the tutorial using Amaranth instead of Verilog.&lt;/li&gt;
&lt;li&gt;Nina &amp;amp; Matt will be attending the Free Silicon Conference in July.&lt;/li&gt;
&lt;li&gt;Matt will be attending the RISCV summit hardware track this Friday 9th June.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy June,
The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How I went from blinker to RISC-V in 3 months</title>
        <link>http://blog.yosyshq.com/p/blinker-to-risc-v/</link>
        <pubDate>Mon, 15 May 2023 12:00:00 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/blinker-to-risc-v/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/blinker-to-riscv.jpg" alt="Featured image of post How I went from blinker to RISC-V in 3 months" /&gt;&lt;p&gt;&lt;em&gt;This guest post is by Bastian Löher.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;how-i-went-from-blinker-to-risc-v-in-3-months&#34;&gt;
    &lt;a href=&#34;#how-i-went-from-blinker-to-risc-v-in-3-months&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    How I went from blinker to RISC-V in 3 months
&lt;/h1&gt;&lt;p&gt;How does one get started with programming &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Field-programmable_gate_array&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FPGAs&lt;/a&gt; (field-programmable gate arrays)? Where does one even begin? Also, if you&amp;rsquo;ve ever wondered how a &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Central_processing_unit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CPU&lt;/a&gt; works and how you can build your own, keep reading!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;TL;DR:&lt;/em&gt; Getting into FPGA programming nowadays isn&amp;rsquo;t hard anymore. Get a &lt;a class=&#34;link&#34; href=&#34;https://www.joelw.id.au/FPGA/CheapFPGADevelopmentBoards&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cheap board&lt;/a&gt; with at least one LED that is supported by an open toolchain,
&lt;a class=&#34;link&#34; href=&#34;https://www.startpage.com/sp/search?query=fpga&amp;#43;vhdl&amp;#43;verilog&amp;#43;tutorial&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;search for a tutorial&lt;/a&gt;, and get that LED blinking!&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Introduction
&lt;/h2&gt;&lt;p&gt;As an experimental physicist, I have been working with FPGAs for many years. These versatile devices enable creating customized electronics for all kinds of applications. FPGAs typically contain thousands of mostly simple logic units that can be connected in sophisticated ways using a hardware description language (HDL). I have experience writing efficient software for low-latency embedded processors and have so far only made small adjustments to existing VHDL or Verilog projects. However, only recently have I had the opportunity to take a deeper dive into writing new logic designs from scratch.&lt;/p&gt;
&lt;p&gt;It does not feel that long ago that FPGA boards were prohibitively expensive devices, and the tools and IP cores were not accessible to everyone. Starting development for FPGAs used to be a costly investment and close to impossible to do on a small budget. Luckily, this situation has changed. Small FPGA chips now sell for as low as $10, and a lot of development is done on free and open-source toolchains. As it turns out, with enough ambition and a bit of courage, one can achieve reasonable results in FPGA-land today without breaking the bank!&lt;/p&gt;
&lt;h2 id=&#34;first-find-a-project&#34;&gt;
    &lt;a href=&#34;#first-find-a-project&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    First, find a project
&lt;/h2&gt;&lt;p&gt;For me, it all started with a new project that involved creating a device capable of measuring arrival time and length of logic signals with sub-nanosecond precision. The idea was to create a low-cost spectrometer for measuring high-intensity gamma radiation and replacing the commonly used ADC (analog-to-digital converter) circuit with a TDC (time-to-digital converter) implemented in an FPGA. So, instead of measuring the amplitude of the signal, only the time the signal spends above a certain threshold (&lt;a class=&#34;link&#34; href=&#34;https://ieeexplore.ieee.org/document/603658&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;time-over-threshold&lt;/a&gt;) is measured. This design reduces the system complexity but requires custom logic.&lt;/p&gt;
&lt;h2 id=&#34;choose-your-tools&#34;&gt;
    &lt;a href=&#34;#choose-your-tools&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Choose your tools
&lt;/h2&gt;&lt;p&gt;I have seen many projects written in VHDL and Verilog, but for this one, I wanted to try one of the new HDL alternatives. My language of choice happened to be the Python-based &lt;a class=&#34;link&#34; href=&#34;https://amaranth-lang.org/docs/amaranth/latest/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Amaranth HDL&lt;/a&gt; (formerly known as nMigen), primarily because I had in mind to write the accompanying firmware for the device in &lt;a class=&#34;link&#34; href=&#34;https://micropython.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MicroPython&lt;/a&gt;. I was also intrigued by &lt;a class=&#34;link&#34; href=&#34;https://clash-lang.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Clash&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/SpinalHDL/SpinalHDL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SpinalHDL&lt;/a&gt;, but Amaranth seemed to have an easier learning curve. So, with the clear goal of creating a working TDC, I jumped headfirst into writing Amaranth code. Over the course of the next year (where I spent most of the time on system design and writing software), I became more familiar with the language and successfully finished the project on time for our customer.&lt;/p&gt;
&lt;h2 id=&#34;set-priorities&#34;&gt;
    &lt;a href=&#34;#set-priorities&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Set priorities
&lt;/h2&gt;&lt;p&gt;While I was working on the project, I encountered &lt;a class=&#34;link&#34; href=&#34;https://hdl.github.io/awesome/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;many&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://www.fpga4fun.com/HDLtutorials.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;excellent&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://nandland.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;resources&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/RobertBaruch/nmigen-tutorial&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;introductory&lt;/a&gt; &lt;a class=&#34;link&#34; href=&#34;https://vivonomicon.com/2020/04/14/learning-fpga-design-with-nmigen/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;courses&lt;/a&gt; for FPGA programming and logic design, and I read various code examples in different HDLs. I also questioned whether Amaranth was the right choice or if I should have chosen a more conventional language. One tutorial that particularly captured my attention was &lt;a class=&#34;link&#34; href=&#34;https://github.com/BrunoLevy/learn-fpga/blob/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV/README.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bruno Levy&amp;rsquo;s &amp;ldquo;Blinker to RISC-V&amp;rdquo;&lt;/a&gt;. The concept intrigued me; one starts with an innocent and all-too-familiar &amp;lsquo;blinky&amp;rsquo; example but ends up with a fully functional &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/RISC-V&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RISC-V&lt;/a&gt; CPU that can run code written by someone else. Following the tutorial for just 24 steps (the CPU executes the first code after step 7), I was curious to try it out immediately. However, I set it aside during the TDC project and only returned to it afterward.&lt;/p&gt;
&lt;h2 id=&#34;define-your-goals&#34;&gt;
    &lt;a href=&#34;#define-your-goals&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Define your goals
&lt;/h2&gt;&lt;p&gt;At that point, I had enough experience with Amaranth to tackle the tutorial as a practice exercise. Instead of using verilog, I followed Bruno&amp;rsquo;s tutorial in Amaranth HDL, using the open-source &lt;a class=&#34;link&#34; href=&#34;https://f4pga.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;F4PGA&lt;/a&gt; (formerly Symbiflow) toolchain and an FPGA board that was not supported in the tutorial (&lt;a class=&#34;link&#34; href=&#34;https://digilent.com/reference/programmable-logic/cmod-a7&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Digilent CMOD A7&lt;/a&gt; with &lt;a class=&#34;link&#34; href=&#34;https://www.xilinx.com/products/silicon-devices/fpga/artix-7.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Xilinx Artix 7&lt;/a&gt;). I wanted to see how far I could go and was unaware of the obstacles that lay ahead.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2023/cmod_board.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;br&gt;
&lt;em&gt;Digilent CMOD A7 FPGA board with Xilinx Artix7. USB-UART dongle in the back.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;and-get-going&#34;&gt;
    &lt;a href=&#34;#and-get-going&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    And get going!
&lt;/h2&gt;&lt;p&gt;I started the course in December 2022 and &lt;a class=&#34;link&#34; href=&#34;https://github.com/bl0x/learn-fpga-amaranth&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;published the first version&lt;/a&gt;, including step 18 (mandelbrot generator), by the end of February 2023. Here are some of the things I learned during these three months: even though I had used Amaranth HDL before, I needed to learn a few more tricks to translate the tutorial code. I learned how valuable instant feedback through test benches and simulations can be. Most of the time, if the simulated logic was working correctly, the hardware implementation was doing the right thing. I had long wondered what makes a CPU a CPU: what are the essential parts, and how do they all work together to execute a set of instructions and manipulate memory and/or pixels on the screen?&lt;/p&gt;
&lt;p&gt;This is the question that the tutorial answered in great detail in the first 18 steps and unraveling the mystic black box that a CPU usually is, contributed to at least half the joy I experienced while putting together my own CPU. Bruno explains the &lt;a class=&#34;link&#34; href=&#34;https://riscv.org/technical/specifications/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RISC-V ISA&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/riscv-non-isa/riscv-elf-psabi-doc/blob/master/riscv-cc.adoc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ABI&lt;/a&gt;, and together we build a more and more capable version of the processor step-by-step. At the same time, I learned the corresponding assembly language for RISC-V, which is essential for testing and programming the CPU at every step. The later steps focus on compiling third-party code with GCC and how to configure the linker so that code is executed from the correct piece of memory in the FPGA. I also learned a lot about compiled objects and ELF formats, which one usually doesn&amp;rsquo;t have to worry about when compiling for Linux-based systems.&lt;/p&gt;
&lt;h2 id=&#34;theres-more-to-it&#34;&gt;
    &lt;a href=&#34;#theres-more-to-it&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    There&amp;rsquo;s more to it!
&lt;/h2&gt;&lt;p&gt;In addition to the obvious takeaways, there were also several unexpected events that occurred along the way. One significant obstacle was that Bruno&amp;rsquo;s tutorial came with a &lt;a class=&#34;link&#34; href=&#34;https://github.com/BrunoLevy/learn-fpga/blob/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV/riscv_assembly.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;custom RISC-V assembler&lt;/a&gt;, written in Verilog, which assembled the instructions while compiling or simulating the logic. This meant that I had to figure out how to seamlessly integrate it with Amaranth. Moreover, I had to fill in jump offsets manually, which is not very convenient. To streamline the process, I went on a longer tangent to implement the &lt;a class=&#34;link&#34; href=&#34;https://github.com/bl0x/learn-fpga-amaranth/blob/main/tools/riscv_assembler.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;assembler in Python&lt;/a&gt;. It was a challenging task, but I succeeded in achieving seamless integration with Amaranth, without the need for manual jump offsets. At a later step, Bruno incorporates the &lt;a class=&#34;link&#34; href=&#34;https://github.com/olofk/corescore/blob/master/rtl/corescore_emitter_uart.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tiny UART sender&lt;/a&gt; by Olof Kindgren, I successfully ported it to Amaranth as well, which was a pleasant surprise since it almost worked on the first try.&lt;/p&gt;
&lt;p&gt;However, when I attempted to compile for the FPGA boards I had on hand, I realized that they were not supported by the &lt;a class=&#34;link&#34; href=&#34;https://github.com/amaranth-lang/amaranth-boards&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;amaranth-boards&lt;/a&gt; repository. Fortunately, I was able to modify a similar board description with the help of the reference manual for my hardware (and even get the code merged in time for this post). Meanwhile, I also discovered and fixed a bug in Amaranth itself, as well as some typos in Bruno&amp;rsquo;s tutorial. On more than one occasion I found out that I can effectively discover my own bugs by actually executing code on the CPU. I also learned how to use many great tools, such as &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.net/yosys/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://trabucayre.github.io/openFPGALoader/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;openFPGAloader&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://gtkwave.sourceforge.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GTKWave&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://www.veripool.org/verilator/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Verilator&lt;/a&gt;, and &lt;a class=&#34;link&#34; href=&#34;https://github.com/olofk/edalize&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Edalize&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m currently working through the last parts of Bruno&amp;rsquo;s tutorial, and while I still have a few steps to go, I&amp;rsquo;ve already learned a lot. Converting the examples to Amaranth HDL has been challenging, but not impossible. Personally, I enjoy working with Amaranth because its semantics are clear and it offers the full power of Python when needed. While some things are more verbose in Amaranth (such as Mux() and Repl()) than their Verilog counterparts, others can be written more concisely.&lt;/p&gt;
&lt;h2 id=&#34;i-could-not-have-done-it-alone&#34;&gt;
    &lt;a href=&#34;#i-could-not-have-done-it-alone&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    I could not have done it alone
&lt;/h2&gt;&lt;p&gt;During the process, I&amp;rsquo;ve had many questions about Amaranth, the build system, the toolchain, and the hardware. Luckily, the helpful community on IRC (#amaranth-lang on libera.chat) and &lt;a class=&#34;link&#34; href=&#34;https://github.com/amaranth-lang/amaranth&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; has always been quick to respond. Additionally, documentation for open toolchains and developing with these tools has greatly improved in the past year.&lt;/p&gt;
&lt;p&gt;Still, some endurance is needed to pull through, when things don&amp;rsquo;t work as expected. For example, my board and one of my chips were not supported by Amaranth, and I encountered issues compiling on an older laptop with an unsupported 32-bit host architecture. I also found myself in &lt;a class=&#34;link&#34; href=&#34;https://medium.com/knerd/the-nine-circles-of-python-dependency-hell-481d53e3e025&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;python package hell&lt;/a&gt; on more than one occasion. And as they say, the devil is in the details, since some seemingly small steps have taken considerably more time than anticipated (&amp;ldquo;proceed after you have a working RISC-V assembler&amp;rdquo;, &amp;ldquo;we&amp;rsquo;ll use this existing UART module&amp;rdquo;, &amp;ldquo;now just convert the ELF to HEX format&amp;rdquo;).&lt;/p&gt;
&lt;h2 id=&#34;final-thoughts&#34;&gt;
    &lt;a href=&#34;#final-thoughts&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Final thoughts
&lt;/h2&gt;&lt;p&gt;Despite these challenges, my plan is to continue with the tutorial and get the SPI interface working. In the meantime, I&amp;rsquo;m also working on getting support for the &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/apicula&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;free Gowin toolchain&lt;/a&gt; (project apicula) into Amaranth&amp;rsquo;s build system. Looking ahead, I&amp;rsquo;m excited to apply the things I&amp;rsquo;ve learned from (not strictly) following Bruno&amp;rsquo;s tutorial to other projects. I&amp;rsquo;d also encourage anyone interested in these concepts to take their favorite HDL and port the tutorial. For me, this has been a great experience, and I&amp;rsquo;m certain that with a growing user base, FPGA design will become even more accessible than it is today!&lt;/p&gt;
&lt;h2 id=&#34;about-the-author&#34;&gt;
    &lt;a href=&#34;#about-the-author&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    About the author
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Dr. Bastian Löher&lt;/strong&gt; (Twitter: &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/y__&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@y__&lt;/a&gt;, Mastodon: &lt;a class=&#34;link&#34; href=&#34;https://mastodon.social/@bl0x@mastodon.social&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@bl0x@mastodon.social&lt;/a&gt;) ported &lt;a class=&#34;link&#34; href=&#34;https://github.com/BrunoLevy/learn-fpga/blob/master/FemtoRV/TUTORIALS/FROM_BLINKER_TO_RISCV/README.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bruno Levy&amp;rsquo;s FPGA tutorial&lt;/a&gt; to &lt;a class=&#34;link&#34; href=&#34;https://github.com/bl0x/learn-fpga-amaranth&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Amaranth HDL&lt;/a&gt;. He is a physicist and control systems engineer for nuclear physics experiments with heavy ion beams. He designs efficient data acquisition software for large heterogeneous particle detection systems and builds mobile radiation sensors for fun.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Community Spotlight - AutoSVA</title>
        <link>http://blog.yosyshq.com/p/community-spotlight-autosva/</link>
        <pubDate>Wed, 10 May 2023 13:26:31 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/community-spotlight-autosva/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/spotlight/spotlight.png" alt="Featured image of post Community Spotlight - AutoSVA" /&gt;&lt;h1 id=&#34;autosva&#34;&gt;
    &lt;a href=&#34;#autosva&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    AutoSVA
&lt;/h1&gt;&lt;p&gt;Welcome to another &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/tags/community-spotlight/&#34; &gt;community spotlight&lt;/a&gt; article where we shine a light on open source EDA projects. If you want to &lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSdIEgu6FJZam0-V3PMTjw-eDebJdg_JuIlN4MkLNDr4vs-a5A/viewform?usp=sf_link&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;submit a project, please do so here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;AutoSVA makes Formal Property Verification (FPV) more accesible for hardware designers.&lt;/p&gt;
&lt;h1 id=&#34;marcelo-veras-bio&#34;&gt;
    &lt;a href=&#34;#marcelo-veras-bio&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Marcelo Vera&amp;rsquo;s Bio
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2023/spotlight/marcelo.jpeg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Marcelo Vera&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Marcelo is a PhD candidate in the Department of Computer Science at Princeton University advised by Margaret Martonosi and David Wentzlaff. He received his BSE from University of Murcia. Marcelo is interested in hardware innovations that are modular, to make SoC integration practical. His research focuses on Computer Architecture, from hardware RTL design and verification to software programming models of novel architectures.
He has previously worked in the hardware industry at Arm, contributing to the design and verification of three GPU projects, and at Cerebras Systems, creating High-Performance Computing kernels.
At Princeton, he has contributed in two academic chip tapeouts that aims to improve the performance, power and programmability of several emerging workflows in the broad areas of Machine Learning and Graph Analytics.&lt;/p&gt;
&lt;h1 id=&#34;what-was-your-motivation-in-making-autosva&#34;&gt;
    &lt;a href=&#34;#what-was-your-motivation-in-making-autosva&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What was your motivation in making AutoSVA?
&lt;/h1&gt;&lt;p&gt;AutoSVA was build with the goal of making Formal Property Verification (FPV) more accesible for hardware designers. AutoSVA brings a simple language to make annotations in the signal declaration section of a module interface. This enables us to generate FPV testbenches that check that transactions between hardware RTL modules follow their interface specifications. It does not check full correctness of the design but it automatically generate liveness properties (prevent duplicated responses, prevent requests being dropped) and some safety-relate properties of transactions, like data integrity, transaction invariants, uniqueness, stability&amp;hellip;&lt;/p&gt;
&lt;h1 id=&#34;why-do-you-develop-open-source-tools&#34;&gt;
    &lt;a href=&#34;#why-do-you-develop-open-source-tools&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Why do you develop open source tools?
&lt;/h1&gt;&lt;p&gt;As the title of our paper suggests &amp;ldquo;Democratizing Formal Verification of RTL Module Interactions”
the motivation on making the tool was to make FPV more accesible for hardware designers without much prior knowledge in formal methods.
Thus, open-sourcing makes the most sense when the goal is to get people to use your tool.&lt;/p&gt;
&lt;h1 id=&#34;what-are-some-of-the-challenges-you-face&#34;&gt;
    &lt;a href=&#34;#what-are-some-of-the-challenges-you-face&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What are some of the challenges you face?
&lt;/h1&gt;&lt;p&gt;Hardware RTL projects can be very heterogeneous, I made the language and tool pretty flexible to take any Verilog or SystemVerilog, but I wouldn’t be surprise it the tool complained about some syntax or some include files. The tool also has a way to set inlcude paths on the tool command line, but you never know!&lt;/p&gt;
&lt;h1 id=&#34;what-could-the-community-do-to-support-you&#34;&gt;
    &lt;a href=&#34;#what-could-the-community-do-to-support-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What could the community do to support you?
&lt;/h1&gt;&lt;p&gt;I would be happy if the community would keep using it, find limitations, and extend the tool. There are plenty of opportunities to add functionality. I’m working myself on an extension to automatically find timing channels via hardware state left unflushed between context switches. Stay tuned for updates, Use the tool and contribute back, I’m happy to take pull requests!&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-link-for-the-project&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-link-for-the-project&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best link for the project?
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/PrincetonUniversity/AutoSVA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/PrincetonUniversity/AutoSVA&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-way-for-people-to-contact-you&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-way-for-people-to-contact-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best way for people to contact you?
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Email: &lt;a class=&#34;link&#34; href=&#34;mailto:movera@princeton.edu&#34; &gt;movera@princeton.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LinkedIn: &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/marcelo-orenes-vera-391390b8/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.linkedin.com/in/marcelo-orenes-vera-391390b8/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20230509 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230509-released/</link>
        <pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230509-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20230509 released!" /&gt;&lt;p&gt;The May release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The synthprop pass was added, which converts SVA assert properties into module outputs that flag assertion violations. See help synthprop for details!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We just published the 3rd in our series of ‘community spotlight’ blog posts. This time we’re featuring &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/community-spotlight-autosva/&#34; &gt;AutoSVA by Marcelo Vera&lt;/a&gt; which aims to make Formal Property Verification more accessible to hardware designers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy May,
The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Yosys One Liners - AXI</title>
        <link>http://blog.yosyshq.com/p/yosys-one-liners-axi/</link>
        <pubDate>Mon, 17 Apr 2023 13:25:38 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/yosys-one-liners-axi/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/oneliners.jpeg" alt="Featured image of post Yosys One Liners - AXI" /&gt;&lt;p&gt;The AXI spec says &amp;ldquo;On Manager and Subordinate interfaces, there must be no combinatorial paths between input and output signals.&amp;rdquo; If we have a design containing an AXI Manager or Subordinate as netlist (i.e. post &lt;code&gt;proc&lt;/code&gt;) and the AXI ports contain &lt;code&gt;axi_&lt;/code&gt; we can check this automatically using this Yosys one liner:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;flatten; select -assert-none i:*axi_* %coe* o:*axi_* %cie* %i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If that fails we can use &lt;code&gt;show i:*axi_* %coe* o:*axi_* %cie* %i&lt;/code&gt; to then see the combinational path (or using dump/printattrs/select -list instead of show when the design is too large for show).&lt;/p&gt;
&lt;p&gt;Here &lt;code&gt;i:*axi_* %coe&lt;/code&gt; selects the combinational output cone of all input ports containing &lt;code&gt;axi_&lt;/code&gt; and &lt;code&gt;o:*axi_* %cie*&lt;/code&gt; selects the combinational input cone of all output ports containing &lt;code&gt;axi_&lt;/code&gt; and &lt;code&gt;%i&lt;/code&gt; takes the intersection of those two selections, leaving you with only the combinational paths that start and end in such an input/output.&lt;/p&gt;
&lt;p&gt;We also flatten the design, as selecting input/output cones doesn’t work across submodules.&lt;/p&gt;
&lt;p&gt;If you want to find out more about the Yosys select command, &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/select.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;please read the documentation here&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20230414 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230414-released/</link>
        <pubDate>Fri, 14 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230414-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20230414 released!" /&gt;&lt;p&gt;Tabby CAD Suite version 20230414 released!&lt;/p&gt;
&lt;p&gt;The April release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The initial release of our new equivalence checking tool EQY is now available. Try out some of the &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/eqy/en/latest/quickstart.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;examples&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have started a new series called ‘&lt;a class=&#34;link&#34; href=&#34;https://blog.yosyshq.com/p/yosys-one-liners-axi/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys One Liners&lt;/a&gt;’ where we share some useful one liners. The first one shows how to show there are no combinatorial paths between input and output signals - useful for verifying correct AXI behaviour.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy April,
The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>First gateware on the Colorlight 5A-75B board </title>
        <link>http://blog.yosyshq.com/p/colorlight-part-2/</link>
        <pubDate>Tue, 28 Mar 2023 18:17:00 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/colorlight-part-2/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/colorlight_5a75b.jpg" alt="Featured image of post First gateware on the Colorlight 5A-75B board " /&gt;&lt;p&gt;&lt;em&gt;Welcome to the second part of the Colorlight 5A-75B article. You can find the &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/colorlight-part-1/&#34; &gt;first part here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this blogpost I will show you how to set up, synthesize and program your first Verilog program on the ECP5 FPGA using the Yosys suite.&lt;/p&gt;
&lt;h2 id=&#34;the-fpga-toolchain&#34;&gt;
    &lt;a href=&#34;#the-fpga-toolchain&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    The FPGA toolchain
&lt;/h2&gt;&lt;p&gt;The FPGA workflow consists of a few more steps compared to the usual software toolchain workflow.&lt;/p&gt;
&lt;p&gt;The Verilog source, which is a description of the logic that makes up the FPGA design, first needs to be synthesized.
The synthesis process scans through all the source files and libraries to find out the hierarchy of the modules, starting with the specified top module.
The result of this process is a low level logical representation of all the abstract components that will make up the final design.
In the FPGA flow, this step is done by the &lt;code&gt;yosys&lt;/code&gt; program, and results in a JSON file.&lt;/p&gt;
&lt;p&gt;The next step in the toolchain is place-and-route.
This is where the process becomes specific to the target FPGA family, because it takes the abstract components and maps it to physical parts that make up the FPGA.
The logical design is translated into configuration data for all the switches, lookup tables and registers in the FPGA&amp;rsquo;s macroblocks.
Yosys suite includes the Nextpnr tool which does this step.
For our board, which runs on the Lattice ECP5 fpga, we will have to use the &lt;code&gt;nextpnr-ecp5&lt;/code&gt; program.
This will give us a &lt;code&gt;.config&lt;/code&gt; file which represents the configuration of the fpga.&lt;/p&gt;
&lt;p&gt;The last step is to upload the configuration data to the target FPGA.
This step can have many forms, but in Yosys it has two parts: packing and uploading.
First, the configuration data needs to be packed into a format that is recognized by the FPGA controller.
This is done with the &lt;code&gt;ecppack&lt;/code&gt; executable. We will use &lt;code&gt;ecppack&lt;/code&gt; to create an SVF (Serial Vector Format).
The SVF is a pretty ingenious hack - the file contains plain JTAG commands that need to be sent to the target, which makes it independent from the JTAG adapter.
Using SVF, in principle, you can program any JTAG device with any JTAG adapter.
The second part is the actual upload of the SVF to the device.
We will use &lt;code&gt;openocd&lt;/code&gt; to communicate with our JTAG adapter and upload the SVF file with configuration data to it. After the upload is complete, the FPGA will start running.&lt;/p&gt;
&lt;h2 id=&#34;hello-blink&#34;&gt;
    &lt;a href=&#34;#hello-blink&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Hello, blink!
&lt;/h2&gt;&lt;p&gt;For our journey into getting the board to blink, we will use the following Verilog.
It&amp;rsquo;s a simple clock divisor module whose output is connected to an IO pin on the FPGA that is connected to the onboard LED.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module top(input clk_i, output led_o);
   reg  led_reg;
   wire baseclk;

   clkdiv #(.DIV(2000000)) slowclk (clk_i, baseclk);

   always @(posedge baseclk) begin;
      led_reg &amp;lt;= !led_reg;
   end

   assign led_o = led_reg;
endmodule


module clkdiv #(parameter DIV = 24&#39;d5000)(
    input wire clk_i,
    output wire clk_o
    );

    reg [24:0] count = 25&#39;b0;
    reg clk_o_internal = 1;
    //on this board we have a 25MHz clock

    always @(posedge clk_i) begin
        count &amp;lt;= count + 25&#39;b1;
        if(count == DIV) begin
            count &amp;lt;= 25&#39;b0;
            clk_o_internal &amp;lt;= ~clk_o_internal;
        end
    end
    assign clk_o = clk_o_internal;
endmodule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This piece of Verilog will take the clock input from the onboard oscillator, divide it by 500 thousand and output the divided clock to output led_o.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve called the file &lt;code&gt;blink.v&lt;/code&gt;. Now we need to synthesize it using &lt;code&gt;yosys&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yosys -p &amp;quot;synth_ecp5 -top top -json blink.json&amp;quot; blink.v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to specify the top module by name using the &lt;code&gt;-top &amp;lt;name&amp;gt;&lt;/code&gt; option.
Otherwise yosys may pick the wrong module as the top and later cause an error due to unconstrained IOs.&lt;/p&gt;
&lt;p&gt;The next step is to assign the logic IOs from the verilog modules to physical pins on the FPGA.
This is necesary for the Place and Route step and is done by a constraints file.
Looking up &lt;a class=&#34;link&#34; href=&#34;https://github.com/q3k/chubby75/blob/master/5a-75b/hardware_V8.0.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;q3k&amp;rsquo;s repository&lt;/a&gt; on the 5A-75B board we can find out that the clock is connected to FPGA pin P6, and the onboard led is connected to T6.
Here is how the LPF file looks like. I saved it as blink.lpf:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LOCATE COMP &amp;quot;clk_i&amp;quot; SITE &amp;quot;P6&amp;quot;;
IOBUF PORT &amp;quot;clk_i&amp;quot; IO_TYPE=LVCMOS33;

LOCATE COMP &amp;quot;led_o&amp;quot; SITE &amp;quot;T6&amp;quot;;
IOBUF PORT &amp;quot;led_o&amp;quot; IO_TYPE=LVCMOS25;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can run the Place and Route program, &lt;code&gt;nextpnr-ecp5&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nextpnr-ecp5 --json blink.json --textcfg blink_out.config --25k --package CABGA256 --lpf blink.lpf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We specify the parameters of the ECP5 FPGA: device type &lt;code&gt;LFE5U-25F&lt;/code&gt; (&lt;code&gt;--25k&lt;/code&gt;) and the package type.&lt;/p&gt;
&lt;p&gt;With the output config file all we need to do is to pack the bitstream into an SVF file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ecppack --svf blink.svf blink_out.config blink.bit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the SVF file it&amp;rsquo;s time to program the bitstream into the FPGA. Connect it to your JTAG adapter and power.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openocd -f colorlight_5a75b.cfg -c &amp;quot;svf -quiet -progress blink.svf; exit&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The file colorlight_5a75b.cfg contains my openocd configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source [find interface/jlink.cfg]
adapter_khz 500
transport select jtag

jtag newtap ecp5 tap -irlen 8 -expected-id 0x41111043

init
scan_chain
targets

svf -tap ecp5.tap -quiet -progress blink.svf
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the &lt;code&gt;jtag newtap ...&lt;/code&gt; line defines a new Test Access Port that corresponds to the FPGA&amp;rsquo;s TAP. The first line configures openocd to use a JLink as the adapter. If you have a different adapter, then modify this file to your needs.&lt;/p&gt;
&lt;p&gt;The example project, along with a Makefile is &lt;a class=&#34;link&#34; href=&#34;https://github.com/polprog/colorlight_hello&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;available on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;about-the-author&#34;&gt;
    &lt;a href=&#34;#about-the-author&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    About the author
&lt;/h2&gt;&lt;p&gt;Chris &amp;ldquo;polprog&amp;rdquo; Lasocki (&lt;a class=&#34;link&#34; href=&#34;https://twitter.com/polprogpl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@polprogpl&lt;/a&gt;)
is a long time electronics hacker and an aspiring physicist. FPGAs are
one of his hobbies and he is currently writing a thesis in that field.
His other interests include laser physics as well as embedded programming
projects. He runs a blog at &lt;a class=&#34;link&#34; href=&#34;https://polprog.net&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;polprog.net&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20230306 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230306-released/</link>
        <pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230306-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20230306 released!" /&gt;&lt;p&gt;Tabby CAD Suite version 20230306 released!&lt;/p&gt;
&lt;p&gt;The March release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is now support for tying licenses to Google Cloud Instance ID and to GitLab groups or repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have a &lt;a class=&#34;link&#34; href=&#34;https://blog.yosyshq.com/p/community-spotlight-sv2v/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;new community spotlight article about sv2v&lt;/a&gt;. sv2v converts SystemVerilog (IEEE 1800-2017) to Verilog (IEEE 1364-2005), with an emphasis on supporting synthesizable language constructs.&lt;/li&gt;
&lt;li&gt;Our GitHub action that &lt;a class=&#34;link&#34; href=&#34;https://blog.yosyshq.com/p/oss-cad-suite-github-action-update/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;installs the oss-cad-suite has had an update&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy March,
The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>OSS CAD Suite Github Action Update</title>
        <link>http://blog.yosyshq.com/p/oss-cad-suite-github-action-update/</link>
        <pubDate>Mon, 20 Feb 2023 11:48:40 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/oss-cad-suite-github-action-update/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/githubaction.png" alt="Featured image of post OSS CAD Suite Github Action Update" /&gt;&lt;p&gt;The OSS CAD suite setup GitHub action &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/setup-oss-cad-suite#use-github_token-to-prevent-api-rate-limiting&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;just had an update&lt;/a&gt;, fixing an issue where sometimes the install would fail due to rate limiting.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/oss-cad-suite-build&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OSS CAD suite&lt;/a&gt; makes it simple to install a whole set of tools at once, and the GitHub action makes it just as simple to get the tools available for a CI job.&lt;/p&gt;
&lt;p&gt;Tools are included for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synthesis&lt;/li&gt;
&lt;li&gt;Formal verification&lt;/li&gt;
&lt;li&gt;FPGA place and route&lt;/li&gt;
&lt;li&gt;FPGA board programming&lt;/li&gt;
&lt;li&gt;Simulation and testing&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Community Spotlight - sv2v</title>
        <link>http://blog.yosyshq.com/p/community-spotlight-sv2v/</link>
        <pubDate>Mon, 13 Feb 2023 13:26:31 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/community-spotlight-sv2v/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/spotlight/spotlight.png" alt="Featured image of post Community Spotlight - sv2v" /&gt;&lt;h1 id=&#34;sv2v&#34;&gt;
    &lt;a href=&#34;#sv2v&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    sv2v
&lt;/h1&gt;&lt;p&gt;Welcome to another &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/tags/community-spotlight/&#34; &gt;community spotlight&lt;/a&gt; article where we shine a light on open source EDA projects. If you want to &lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSdIEgu6FJZam0-V3PMTjw-eDebJdg_JuIlN4MkLNDr4vs-a5A/viewform?usp=sf_link&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;submit a project, please do so here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;sv2v converts SystemVerilog (IEEE 1800-2017) to Verilog (IEEE 1364-2005), with an emphasis on supporting synthesizable language constructs.&lt;/p&gt;
&lt;h1 id=&#34;zachary-snows-bio&#34;&gt;
    &lt;a href=&#34;#zachary-snows-bio&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Zachary Snow&amp;rsquo;s Bio
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2023/spotlight/zachary.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;zachary snow&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I received my B.S. in computer science from Carnegie Mellon University in 2019. After graduating, I began working full-time as a software engineer in systematic trading. Since May, I have worked in systematic futures trading at the D. E. Shaw group.&lt;/p&gt;
&lt;h1 id=&#34;what-was-your-motivation-in-making-sv2v&#34;&gt;
    &lt;a href=&#34;#what-was-your-motivation-in-making-sv2v&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What was your motivation in making sv2v?
&lt;/h1&gt;&lt;p&gt;While working as an undergraduate teaching assistant, Professor &lt;a class=&#34;link&#34; href=&#34;https://www.cs.cmu.edu/~davide/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dave Eckhardt&lt;/a&gt; introduced me to an open hardware research group that includes himself and Professor &lt;a class=&#34;link&#34; href=&#34;https://users.ece.cmu.edu/~kenmai/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ken Mai&lt;/a&gt;. Leveraging my prior studies in compilers, I was tasked with developing a tool to convert a RISC-V core written in SystemVerilog to Yosys-compatible Verilog. With help from others on the research team, we accomplished this goal prior to my graduation. Since then, I have continued to develop sv2v on a volunteer basis with the support of CMU and the larger open hardware community.&lt;/p&gt;
&lt;h1 id=&#34;why-do-you-develop-open-source-tools&#34;&gt;
    &lt;a href=&#34;#why-do-you-develop-open-source-tools&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Why do you develop open source tools?
&lt;/h1&gt;&lt;p&gt;While I enjoy programming projects in general, I find working on open source tools especially rewarding. I appreciate that each improvement can benefit many users. I hope that my contributions can expand the viability of completely free and open source development in a space that is dominated by proprietary tools.&lt;/p&gt;
&lt;h1 id=&#34;what-are-some-of-the-challenges-you-face&#34;&gt;
    &lt;a href=&#34;#what-are-some-of-the-challenges-you-face&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What are some of the challenges you face?
&lt;/h1&gt;&lt;p&gt;I have no formal training in electrical engineering or hardware development. Although I have gained experience since starting the project, I still depend on insight and advice from those who actually work on hardware and synthesis flows.&lt;/p&gt;
&lt;p&gt;SystemVerilog is also a difficult language to work with due to its complexities and ambiguities. Even commercial toolchains vary in terms of feature support, strictness, and behavior. This can make it challenging to decide what language features to implement and how to translate them correctly.&lt;/p&gt;
&lt;h1 id=&#34;what-could-the-community-do-to-support-you&#34;&gt;
    &lt;a href=&#34;#what-could-the-community-do-to-support-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What could the community do to support you?
&lt;/h1&gt;&lt;p&gt;I am always eager to receive more feedback. It is difficult to gauge interest in features or discover issues without users sharing their thoughts. The feedback I’ve received to date has been essential in making sv2v what it is today.&lt;/p&gt;
&lt;p&gt;For those with experience with functional programming or compilers and an interest in SystemVerilog, there are a number of features and improvements that may be suitable for an outside collaborator. If you’re interested, please reach out!&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-link-for-the-project&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-link-for-the-project&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best link for the project?
&lt;/h1&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/zachjs/sv2v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/zachjs/sv2v&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;what-is-the-best-way-for-people-to-contact-you&#34;&gt;
    &lt;a href=&#34;#what-is-the-best-way-for-people-to-contact-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What is the best way for people to contact you?
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;GitHub: &lt;a class=&#34;link&#34; href=&#34;https://github.com/zachjs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/zachjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Website: &lt;a class=&#34;link&#34; href=&#34;https://zachjs.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zachjs.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20230208 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230208-released/</link>
        <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230208-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20230208 released!" /&gt;&lt;p&gt;Tabby CAD Suite version 20230208 released!&lt;/p&gt;
&lt;p&gt;The February release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SBY can now use Yosys’s builtin simulation command “sim” to generate counter-example traces. This can be enabled with the “vcd_sim on” option and will become the default in a later release.&lt;/li&gt;
&lt;li&gt;Using Yosys’s “sim” command, SBY now supports writing traces in gtkwave’s FST format in addition to the VCD format. FST files offer improved handling of signal names containing special characters, native compression and faster load times. This can be enabled with the “fst on” option&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other YosysHQ news:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have a new guest blog post from Victor Suarez Rovere and Juilan Kemmerer about a &lt;a class=&#34;link&#34; href=&#34;https://blog.yosyshq.com/p/3d-raytracing/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;fully open source “C to FPGA” toolchain&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;YosysHQ is working with Tillitis in the &lt;a class=&#34;link&#34; href=&#34;https://blog.yosyshq.com/p/tillitis-and-yosyshq/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;development of their next FPGA based product&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy February,
The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tillitis and YosysHQ</title>
        <link>http://blog.yosyshq.com/p/tillitis-and-yosyshq/</link>
        <pubDate>Mon, 06 Feb 2023 11:56:24 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tillitis-and-yosyshq/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/tillitis.jpg" alt="Featured image of post Tillitis and YosysHQ" /&gt;&lt;p&gt;We are happy to announce that we are working with &lt;a class=&#34;link&#34; href=&#34;https://tillitis.se/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tillitis&lt;/a&gt; on their next generation of USB security key.&lt;/p&gt;
&lt;p&gt;Their current model TKey™ is &lt;a class=&#34;link&#34; href=&#34;https://github.com/tillitis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;open source hardware and software&lt;/a&gt;. It uses a Lattice iCE40, chosen due to it being supported by our open source FPGA tools.&lt;/p&gt;
&lt;p&gt;The new version includes an upgraded FPGA with more security features. YosysHQ will be working to add support for this FPGA to NextPNR.&lt;/p&gt;
&lt;p&gt;The best news is that the work will be open sourced so you will soon have a new family of FPGAs to experiment with!&lt;/p&gt;
&lt;p&gt;Follow Tillitis on &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/company/tillitis-ab/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linkedin&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/TillitisAB&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>3D raytraced game with open source C to FPGA toolchain</title>
        <link>http://blog.yosyshq.com/p/3d-raytracing/</link>
        <pubDate>Fri, 03 Feb 2023 12:00:00 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/3d-raytracing/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/sphery.png" alt="Featured image of post 3D raytraced game with open source C to FPGA toolchain" /&gt;&lt;p&gt;&lt;em&gt;This guest post is by Victor Suarez Rovere and Julian Kemmerer.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;3d-raytraced-game-using-fully-open-source-c-to-fpga-toolchain&#34;&gt;
    &lt;a href=&#34;#3d-raytraced-game-using-fully-open-source-c-to-fpga-toolchain&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    3D raytraced game using fully open source “C to FPGA” toolchain
&lt;/h1&gt;&lt;p&gt;Sphery vs. Shapes is the world&amp;rsquo;s first 3D raytraced game implemented completely as digital logic. This is all made possible by combining the OSS CAD Suite with CFlexHDL and PipelineC.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;
    &lt;a href=&#34;#summary&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Summary
&lt;/h2&gt;&lt;p&gt;In this article we present a tool flow that takes C++ code describing a raytraced game, and produces digital logic that can be implemented in off-the-shelf FPGAs (with no hard or soft CPU used). We aim for these tools to achieve a software friendly C-to-FPGA flow, making the development + simulation process exceptionally fast and easy, while providing high performance and low power hardware results.&lt;/p&gt;
&lt;p&gt;Thanks to project Trellis, Yosys and nextpnr can complete an open source synthesis and place and route flow for ECP5 FPGAs. This was the final piece needed to complete our C-&amp;gt;Bitstream workflow based on fully open source tools.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215363908-0625eb6e-a3db-485a-89e2-10267fca6b7c.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;em&gt;Demo &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=hn3sr3VMJQU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;video&lt;/a&gt; and full sources: &lt;a class=&#34;link&#34; href=&#34;https://github.com/JulianKemmerer/PipelineC-Graphics&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/JulianKemmerer/PipelineC-Graphics&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;fpga-as-a-raytracer&#34;&gt;
    &lt;a href=&#34;#fpga-as-a-raytracer&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    FPGA as a raytracer
&lt;/h2&gt;&lt;p&gt;Interactive ray tracing hardware is novel in FPGA and our work serves as a perfect example that such complex data processing circuits can be developed, tested, and implemented in hardware all from a C language based flow that greatly eases the design process over traditional hardware description languages.&lt;/p&gt;
&lt;p&gt;Ultra-fast compiled C based emulation and C++ based tools like Verilator allow for fast simulation with realtime debug. This quick workflow is essential, being able to compile-as-C and see the results of code changes executed in realtime is a requirement for developing an interactive game, something not possible with standard FPGA simulators.&lt;/p&gt;
&lt;p&gt;The project generates each video pixel in hard-realtime “chasing the beam”, without a frame buffer and with zero jitter. Medium size Xilinx Artix 7 FPGAs have reached up to 1080p 60FPS (148.5MHz pixel clock). This article describes using an Lattice ECP5 FPGA to reach 480p 60FPS (25MHz pixel clock). Pipelining the entire ray tracer produces a position-to-color latency of a few microseconds at most. 1080p requires about ~400 pipeline stages, 480p requires ~70 stages - in both cases this pipelining is done automatically as part of the tool flow.&lt;/p&gt;
&lt;p&gt;The Xilinx Artix 7 FPGA achieves about 70 GFLOP/s using less than 1 watt, thanks to the pipeline with dozens of hardware resources working in parallel. Using that 28nm Xilinx 7 series FPGA, power reduction was calculated to be about 50X less compared with a modern  7nm CPU running heavily vector optimized instructions.&lt;/p&gt;
&lt;h2 id=&#34;workflow&#34;&gt;
    &lt;a href=&#34;#workflow&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Workflow
&lt;/h2&gt;&lt;p&gt;The workflow allows writing algorithms involving complex types like structures, floating point types and operations on vectors of those, all keeping a clean and familiar syntax.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215365602-9d1493ef-e8f1-444e-b794-b9ba7a898a08.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The source code is first converted by the &lt;a class=&#34;link&#34; href=&#34;https://github.com/suarezvictor/CflexHDL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CflexHDL&lt;/a&gt; tool from C++ to C. Then this subset of C can be converted to VHDL by &lt;a class=&#34;link&#34; href=&#34;https://github.com/JulianKemmerer/PipelineC&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PipelineC&lt;/a&gt; . GHDL and Yosys are used to convert the output VHDL into netlists that nextpnr can use.&lt;/p&gt;
&lt;p&gt;In addition to simple conversion to VHDL, PipelineC is primarily the mechanism for producing pipelined digital logic from the pure combinatorial logic derived from C code. PipelineC is aware of the FPGA timing characteristics of the specific device (by iterating with nextpnr) and adds pipelining as needed to meet timing. This avoids the tedious and error-prone task of manual pipelining that digital designers are familiar with. The flow reports a preliminary estimate of resources prior to synthesis and the amount of pipeline stages required to implement the user’s functionality.&lt;/p&gt;
&lt;p&gt;To produce a final bitstream GHDL+Yosys are used to generate a flattened single Verilog file version of the design that can easily be incorporated into existing build flows for board specific bitstream support, ex. Litex Orange Crab.&lt;/p&gt;
&lt;p&gt;Alternatively, the sources can be compiled and run “as C”, as a kind of  ultra-fast emulation/simulation (the game can be played in FullHD at 60FPS during debug on PC), or the Verilog sources can be processed by Verilator and graphically simulated by another tool we provided.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215365530-4c922851-9ad5-431d-b85e-fa4d94d0a197.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;From inside the PipelineC-Graphics repository there is one command to go from C file to the final bitstream generation and load your FPGA board:  &lt;code&gt;make load&lt;/code&gt;. See additional instructions on github.&lt;/p&gt;
&lt;h2 id=&#34;hardware-architecture&#34;&gt;
    &lt;a href=&#34;#hardware-architecture&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Hardware architecture
&lt;/h2&gt;&lt;p&gt;The project uses a fully open source board based on a Lattice ECP5 FPGA with 85K LUTs (the OrangeCrab board) plus a PMOD-compatible digital video connector for direct connection to a monitor by adapting 3.3V signals to the required CML levels (Machdyne DDMI), they publish schematics as well. For simplicity, only the positive polarity and ground were connected: it works since the differential levels are met, at least on our test setup. The integrated button on the FPGA board is used to play the game.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215365509-20f5e573-07dc-49b0-bcbc-73465a991a50.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This setup allowed 640x480 resolution (25MHz clock) instead of 1920x1080 (148.5MHz clock) as achieved with the original setup using a Xilinx 7 series FPGA device.&lt;/p&gt;
&lt;p&gt;The FPGA design consists of two main blocks: a state machine computing frame-by-frame animation and a long pixel rendering pipeline.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215365576-37c2fbdb-069d-4d61-9b17-71be7b165314.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;To meet 25MHz timing on the Lattice ECP5 FPGA the PipelineC tool created a pixel rendering pipeline of approximately ~70 stages. Below is a visual breakdown of how many stages each major function takes and roughly where/when in the pipeline it occurs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215365466-eae48ae2-8c27-408c-919a-190692aa10d4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;The above pipeline uses operations on custom floating and fixed point types.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Operation&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Stages&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fixed Compare&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1 stage&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fixed Addition/Subtraction&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fixed Multiplication&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Compare&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Multiplication&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Addition/Subtraction&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Fast Reciprocal&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Fast Reciprocal Square Root&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Fast Square Root&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;3 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float Fast Division&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;4 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float 3D Vector Dot Product&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Float 3D Vector Normalize&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;7 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Ray Plane Intersection&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;10 stages&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Ray Sphere Intersection&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;22 stages&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Float types use a 14 bit mantissa instead of the typical 23 bits, and fixed point values are represented with a total of 22 bits: 12 for integer portion, 10 for the fractional bits. Those types are provided by CflexHDL types and the effects of reduced precision can be readily appreciated with the provided graphical simulation tool, so the optimal size is easy to determine by performing the fast simulations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8551129/215368154-a9abd122-1308-4c15-b39b-7b19be07082d.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;&lt;br&gt;
&lt;em&gt;Full precision vs. reduced precision in simulator window&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Typical times for development/test cycles are as follows:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Build command&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Build time&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;Speed @1080p&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Fast CPU simulation&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;make sim&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1s&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;60-86 FPS&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Precise CPU simulation&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;make gen&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5s&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;40FPS&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;Logic simulation&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;make verilator&lt;/code&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1min 50s&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;50s per frame&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;software-architecture-and-components&#34;&gt;
    &lt;a href=&#34;#software-architecture-and-components&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Software architecture and components
&lt;/h2&gt;&lt;p&gt;All software and tools used in this project are Open Source. We integrated the following components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/JulianKemmerer/PipelineC&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PipelineC&lt;/a&gt; for C to VHDL, autopipelining (uses &lt;a class=&#34;link&#34; href=&#34;https://github.com/eliben/pycparser&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pycparser&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/suarezvictor/CflexHDL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CflexHDL&lt;/a&gt; for C++ parsing, fixed point types and arbitrary width floating point types, and vector of these using operator overloading&lt;/li&gt;
&lt;li&gt;Clang’s &lt;a class=&#34;link&#34; href=&#34;https://github.com/llvm-mirror/clang/blob/master/bindings/python/clang/cindex.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cindex&lt;/a&gt; to help in parsing C++&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.veripool.org/verilator/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Verilator&lt;/a&gt; for logic level simulation&lt;/li&gt;
&lt;li&gt;Custom &lt;a class=&#34;link&#34; href=&#34;https://github.com/JulianKemmerer/PipelineC-Graphics/blob/main/simulator_main.cpp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;simulator&lt;/a&gt; based on the &lt;a class=&#34;link&#34; href=&#34;https://www.libsdl.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SDL libraries&lt;/a&gt; (used when compiling the raytracer, or after Verilator C++ generation)&lt;/li&gt;
&lt;li&gt;YosysHQ&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.net/yosys/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys&lt;/a&gt; for Verilog parsing and synthesis&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/gatecat/nextpnr-xilinx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NextPNR&lt;/a&gt; for place and route (project &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/prjtrellis&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Trellis&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://ghdl.free.fr/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GHDL&lt;/a&gt; from a &lt;a class=&#34;link&#34; href=&#34;https://github.com/ghdl/ghdl-yosys-plugin&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys plugin&lt;/a&gt; for VHDL to Verilog conversion (used by Verilator and for synthesis)&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/enjoy-digital/litex&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LiteX&lt;/a&gt; for Orange Crab SoC design, and its video core with serialized digital outputs (DVI)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;about-oss-cad-suite-integration&#34;&gt;
    &lt;a href=&#34;#about-oss-cad-suite-integration&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    About OSS CAD Suite Integration
&lt;/h2&gt;&lt;p&gt;The first version of the project used a commercial FPGA board and closed-source synthesis tools. After Project Trellis reverse-engineered the ECP5 device there were only a few minor workarounds that were needed to complete the chain of “everything open source” with Yosys and nextpnr.&lt;/p&gt;
&lt;p&gt;Part of PipelineC’s autopipelining iterations involve synthesizing the design purely as combinatorial logic (pre-pipelining). The share pass that Yosys uses by default for synth_ecp5 does not handle the massive combinatorial network that defines the ray tracer design very well. RAM usage (typically ~8GB max) quickly jumps past the 16GB we had on our workstations. Disabling the share pass required editing the Yosys source code to remove the specific ECP5 run step.&lt;/p&gt;
&lt;p&gt;The second issue we ran into was that in early versions of ECP5 place and route support, nextpnr was not able to pack LUTs+FFs into the shared primitive block as effectively as today. As such, early attempts failed to place and route the design while still having relatively plenty of resources remaining. But after the packing support improved, nextpnr began to produce fully placed and routed designs that could be further iterated on for pipelining. Related: often the nextpnr tool would end up in an infinite loop trying to fix a few remaining overused/unrouted wires - but recent changes seem to have reduced that issue as well.&lt;/p&gt;
&lt;p&gt;Since the PipelineC tool generates VHDL, we needed to convert the final generated sources to &lt;a class=&#34;link&#34; href=&#34;https://github.com/JulianKemmerer/PipelineC-Graphics/blob/main/verilog/top-gsd_orangecrab.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;a single&lt;/a&gt; Verilog file  (to be used in Verilator simulation and to generate the bitstream). This is done using the GHDL plugin for Yosys and the Yosys write_verilog command. Occasionally Yosys passes like opt and flatten  were needed during the import process in order to avoid spikes in RAM usage.&lt;/p&gt;
&lt;p&gt;None of these issues were blockers for long. We credit success to the fantastic open source community that provided lots of help in forums and discussions.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;
    &lt;a href=&#34;#conclusions&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Conclusions
&lt;/h2&gt;&lt;p&gt;We showed a ready-to-use toolchain for hardware design that greatly accelerates development time by using fast simulators at different stages, based on a known programming language syntax. The code can be translated to a logic circuit or run on a off-the-shelf CPU. A example application requiring complex processing was demonstrated by writing a game that implements the usual math operations for raytracing applications, with a clean syntax for math and all the algorithms. Since we apply an automatically calculated -and possibly long- pipeline, the system is capable of performing very well even compared to powerful modern CPUs, but using smaller and embeddable chips, at low power.&lt;/p&gt;
&lt;h2 id=&#34;about-the-authors&#34;&gt;
    &lt;a href=&#34;#about-the-authors&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    About the authors
&lt;/h2&gt;&lt;p&gt;This work is a result of the tight interactions between Julian Kemmerer (@pipelinec_hdl; fosstodon.org/@pipelinec) and Victor Suarez Rovere (Twitter: &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/suarezvictor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@suarezvictor&lt;/a&gt;) during almost a year.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Victor Suarez Rovere&lt;/strong&gt; is the author of &lt;a class=&#34;link&#34; href=&#34;https://github.com/suarezvictor/CflexHDL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CflexHDL&lt;/a&gt; tool used in this project (parser/generator and math types library) and of the Sphery vs. Shapes game. He’s a software and hardware developer and consultant experienced in Digital Signal Processing, mainly in the medical ﬁeld. Victor was awarded the ﬁrst prize in the Argentine National Technology contest, a gold medal from WIPO as &amp;ldquo;Best young inventor&amp;rdquo; and some patents related to a multitouch technology based on tomography techniques.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Julian Kemmerer&lt;/strong&gt; is the author of the &lt;a class=&#34;link&#34; href=&#34;https://github.com/JulianKemmerer/PipelineC&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PipelineC&lt;/a&gt; tool (C-like HDL w/ auto-pipelining) used in this work. He earned a Masters degree in Computer Engineering from Drexel University in Philadelphia where his work focused on EDA tooling. Julian currently works as an FPGA engineer at an AI focused SDR company called Deepwave Digital. He is a highly experienced digital logic designer looking to increase the usability of FPGAs by moving problems from hardware design into a familiar C language look.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20230104 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230104-released/</link>
        <pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20230104-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2023/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20230104 released!" /&gt;&lt;p&gt;Tabby CAD Suite version 20230104 released!&lt;/p&gt;
&lt;p&gt;The January release of Tabby CAD Suite is now available for download. With the holidays there have been only a few changes, of note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SBY output is now in color.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;in-other-yosyshq-news&#34;&gt;
    &lt;a href=&#34;#in-other-yosyshq-news&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    In other YosysHQ news:
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;We have reformatted our service table to clarify some points we&amp;rsquo;ve seen cause confusion. Don&amp;rsquo;t worry, our prices remain the same as they&amp;rsquo;ve always been!&lt;/li&gt;
&lt;li&gt;Our first &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/community-spotlight-tbengy/&#34; &gt;community spotlight article is about Tbengy&lt;/a&gt;, which is a Python Tool for SV/UVM Testbench Generation and RTL Synthesis.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy New Year!
The YosysHQ Team&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Community Spotlight - Tbengy</title>
        <link>http://blog.yosyshq.com/p/community-spotlight-tbengy/</link>
        <pubDate>Wed, 14 Dec 2022 10:23:57 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/community-spotlight-tbengy/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/spotlight/spotlight.png" alt="Featured image of post Community Spotlight - Tbengy" /&gt;&lt;h1 id=&#34;tbengy&#34;&gt;
    &lt;a href=&#34;#tbengy&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Tbengy
&lt;/h1&gt;&lt;p&gt;Welcome to the first in a series of short articles where we shine the light on open source EDA projects. If you want to &lt;a class=&#34;link&#34; href=&#34;https://docs.google.com/forms/d/e/1FAIpQLSdIEgu6FJZam0-V3PMTjw-eDebJdg_JuIlN4MkLNDr4vs-a5A/viewform?usp=sf_link&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;submit a project, please do so here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tbengy by &lt;a class=&#34;link&#34; href=&#34;#connect-with-prasad-pandit&#34; &gt;Prasad Pandit&lt;/a&gt; is a Python Tool for SV/UVM Testbench Generation and RTL Synthesis. The tool uses newly available capability of the Vivado tool by Xilinx to compile and run SV/UVM Testbench and syntheize RTL for Digilent FPGA Boards.&lt;/p&gt;
&lt;p&gt;The project is hosted on Github under an MIT License:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/prasadp4009/tbengy&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/prasadp4009/tbengy&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;prasad-pandits-bio&#34;&gt;
    &lt;a href=&#34;#prasad-pandits-bio&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Prasad Pandit&amp;rsquo;s Bio
&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/spotlight/prasad.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;prasad&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I am a Hardware Engineer by profession which is my hobby as well. I enjoy tinkering with FPGAs, Arduinos and building IoT devices to make my life more easy. My interest revolves around making chips and building things with 3D printers.&lt;/p&gt;
&lt;h1 id=&#34;motivation-to-make-tbengy&#34;&gt;
    &lt;a href=&#34;#motivation-to-make-tbengy&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Motivation to make tbengy:
&lt;/h1&gt;&lt;p&gt;I have been developing and using small python scripts for personal use. During the pandemic, as we all know many people lost their jobs including engineers from the Semiconductor Industry. In the same time period, I got a chance to tinker with my FPGAs and was working on developing a tool that can help me create a project skeleton as well as scripts to test my design and verify them. When it comes to design compilation, whether it&amp;rsquo;s VHDL, Verilog or Systemverilog we have a lot of open-source as well as commercial tools, problem comes when we want to compile UVM for verification. There isn&amp;rsquo;t much scope for people other than using EDAPlayground or use Commercial tools which are not easily available. Also maintaining projects on EDAPlayground in a structured way is not supported.&lt;/p&gt;
&lt;p&gt;While updating my Vivado, I read the release notes and found that the Webpack version (free version) now supports complete UVM 1.2 compilation and simulations. This gave me the idea to build a python tool &amp;ldquo;tbengy&amp;rdquo;, which can run on any OS (Windows or Linux) and generates an easily editable and compilable UVM testbench in a structured manner and scripts which will help engineers interested in UVM verification to hone their skills on their machine. I also added support for a Blinky project which generates design, DV and synthesis scripts for all Digilent boards.&lt;/p&gt;
&lt;h1 id=&#34;why-open-source&#34;&gt;
    &lt;a href=&#34;#why-open-source&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Why open source?
&lt;/h1&gt;&lt;p&gt;I believe in open collaboration. Linux is the best example of what open source can bring to this world and that inspired me to be a part of this community. The Open source tools like MAGIC and OpenROAD which today makes it possible for anyone to design ASICs right from their own machine, this is another motivation for me to give more to this community.&lt;/p&gt;
&lt;h1 id=&#34;what-are-the-challenges&#34;&gt;
    &lt;a href=&#34;#what-are-the-challenges&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What are the challenges?
&lt;/h1&gt;&lt;p&gt;Being a hardware engineer, software is not my expertise. This became more evident to me when I created string templates in python where after some research I figured there are template libraries like Jinja2, which if used will help a lot in bringing the knowledge of hardware with use of more structured and efficient software in making better tools.&lt;/p&gt;
&lt;h1 id=&#34;what-could-the-community-do-to-support-you&#34;&gt;
    &lt;a href=&#34;#what-could-the-community-do-to-support-you&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What could the community do to support you?
&lt;/h1&gt;&lt;p&gt;I found out that it&amp;rsquo;s difficult to get your work reviewed in open source and tapping the right audience. I will be glad if experienced users both from hardware and software domain can review the tool and provide better direction as well as requirements will help in taking the tool to the next level.&lt;/p&gt;
&lt;h1 id=&#34;connect-with-prasad-pandit&#34;&gt;
    &lt;a href=&#34;#connect-with-prasad-pandit&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Connect with Prasad Pandit
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;LinkedIn: &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/panditprasad/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.linkedin.com/in/panditprasad/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;YouTube: &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/@PrasadPandit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/@PrasadPandit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twitter: &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/@tonystark_hdl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://twitter.com/@tonystark_hdl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20221205 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20221205-released/</link>
        <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20221205-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20221205 released!" /&gt;&lt;p&gt;The December release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have improved support for SystemVerilog &lt;code&gt;config&lt;/code&gt; elements. You can now have multiple configurations defined, and select which configuration to elaborate with &lt;code&gt;verific -import &amp;lt;configname&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We are working on improving the TCL integration in Yosys. There is now an interactive TCL shell mode: use &lt;code&gt;yosys -C&lt;/code&gt; to enter the TCL shell. You can now also use the following command to get the output of a command returned to TCL without the use of an intermediate file: &lt;code&gt;set command_output [yosys tee -s result.string &amp;lt;command&amp;gt;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;in-other-yosyshq-news&#34;&gt;
    &lt;a href=&#34;#in-other-yosyshq-news&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    In other YosysHQ news
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;We had another &lt;a class=&#34;link&#34; href=&#34;https://blog.yosyshq.com/p/logic-primitive-transformations-with-yosys-techmap/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;great guest blogpost&lt;/a&gt; from Tom Verbeure. He wrote about how Yosys does techmapping, in particular logic primitive transformations.  If you’ve not read any of Tom’s other writing, he has a very &lt;a class=&#34;link&#34; href=&#34;https://tomverbeure.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;interesting index here&lt;/a&gt;. Two of our favourites are &lt;a class=&#34;link&#34; href=&#34;https://tomverbeure.github.io/2022/02/20/GDBWave-Post-Simulation-RISCV-SW-Debugging.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Post-Simulation Waveform-Based RISC-V with GDB&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://tomverbeure.github.io/2020/11/04/VHDL_Verilog_Cosimulation_with_CXXRTL.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cosimulating Verilog and VHDL with CXXRTL&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We are starting a ‘&lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:7006604942450810880&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;community spotlight&lt;/a&gt;’ feature to help highlight useful open source EDA tools. If you have a tip, please let us know.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Logic Primitive Transformations with Yosys Techmap</title>
        <link>http://blog.yosyshq.com/p/logic-primitive-transformations-with-yosys-techmap/</link>
        <pubDate>Thu, 24 Nov 2022 09:38:52 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/logic-primitive-transformations-with-yosys-techmap/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/yosys_techmap/SB_MAC16_block_diagram.png" alt="Featured image of post Logic Primitive Transformations with Yosys Techmap" /&gt;&lt;p&gt;&lt;em&gt;This guest post is by &lt;a class=&#34;link&#34; href=&#34;https://tomverbeure.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tom Verbeure&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;introduction&#34;&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Introduction
&lt;/h1&gt;&lt;p&gt;If you&amp;rsquo;re reading this you probably already know that &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys&lt;/a&gt;
is an open source logic synthesis tool. You may also know that it&amp;rsquo;s much more than that: in
my &lt;a class=&#34;link&#34; href=&#34;https://tomverbeure.github.io/2020/08/08/CXXRTL-the-New-Yosys-Simulation-Backend.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;earlier blog post about CXXRTL&lt;/a&gt;
I call it the &lt;em&gt;swiss army knife of digital logic manipulation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In most cases, using Yosys
means running pre-made scripts that contain Yosys commands: when I&amp;rsquo;m synthesizing RTL for an FPGA of the
Lattice iCE40 family, the &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/synth_ice40.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;synth_ice40&lt;/code&gt; command&lt;/a&gt; is
usually sufficient to convert my RTL into a netlist that can be sent straight to
&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/nextpnr&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;nextpnr&lt;/a&gt;
for place, route, and bitstream creation.&lt;/p&gt;
&lt;p&gt;My current version of Yosys has 232 commands, and many of these commands have an impressive list
of additional options, but sometimes you want to perform very particular logic operations that
don&amp;rsquo;t come standard with the tool.&lt;/p&gt;
&lt;p&gt;In this blog post, I&amp;rsquo;ll talk about the &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/techmap.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;techmap&lt;/code&gt; command&lt;/a&gt;,
a particularly powerful command that allows one to make custom logic transformations by replacing a
logic cell instance of a given type to one or more different ones.&lt;/p&gt;
&lt;h1 id=&#34;mapping-a-multiplication-to-an-fpga-dsp-cell&#34;&gt;
    &lt;a href=&#34;#mapping-a-multiplication-to-an-fpga-dsp-cell&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Mapping a multiplication to an FPGA DSP Cell
&lt;/h1&gt;&lt;p&gt;&lt;em&gt;There is a companion &lt;a class=&#34;link&#34; href=&#34;https://github.com/tomverbeure/yosys_techmap_blog&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;yosys_techmap_blog project on GitHub&lt;/a&gt;
that contains the Verilog source files and the scripts to generate the graphics and Yosys results
of this blog post.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A good example of a &lt;code&gt;techmap&lt;/code&gt; operation is one where a generic multipication
is converted into a DSP block of an FPGA. For those who are unfamiliar with the technology,
FPGAs usually have only a few core logic primitives: lookup-table cells (LUTs) are used to construct
any kind of random logic circuit, RAM cells are, well, RAMs, and DSPs are larger cells that contain one
or more hardware multipliers, often in combination with an accumulator.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at this Verilog module, &lt;a class=&#34;link&#34; href=&#34;https://github.com/tomverbeure/yosys_techmap_blog/blob/main/mul.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;mul.v&lt;/code&gt;&lt;/a&gt;,
that multiplies two 10-bit values into a 20-bit result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When reading in the Verilog file, Yosys translates it into RTLIL (RTL Internal Language),
the internal representation of the design. The multiplication operation becomes a &lt;code&gt;$mul&lt;/code&gt; primitive,
and the whole design looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module \top
  wire width 10 input 1 \op0
  wire width 10 input 2 \op1
  wire width 20 output 3 \result
  cell $mul $mul$mul.v:3$1
    parameter \A_SIGNED 0
    parameter \A_WIDTH 10
    parameter \B_SIGNED 0
    parameter \B_WIDTH 10
    parameter \Y_WIDTH 20
    connect \A \op0
    connect \B \op1
    connect \Y \result
  end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yosys has the super useful &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/show.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;show&lt;/code&gt; command&lt;/a&gt;
that renders an RTLIL representation as a graph. I usually add the &lt;code&gt;-width -signed&lt;/code&gt; options to
annotate signals with their size and to show which cell ports are signed:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/mul_rtlil.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top module as a graph with $mul instance&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This primitive must be converted into cells of the target technology. Most FPGAs from the
iCE40 family have a handful of DSPs. When you synthesize this module to the iCE40 technology with
&lt;code&gt;synth_ice40 -dsp&lt;/code&gt;, the &lt;code&gt;$mul&lt;/code&gt; primitive gets converted to an &lt;code&gt;SB_MAC16&lt;/code&gt; cell which is the DSP
primitive of the iCE40 family.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/SB_MAC16_block_diagram.png&#34; &gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/SB_MAC16_block_diagram.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SB_MAC16 internal block diagram&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;SB_MAC16&lt;/code&gt; DSP has a ton of data path and configuration signals, and the multiplier inputs and
output can be up to 16 and 32-bits wide respectively. It&amp;rsquo;s up to a &lt;code&gt;techmap&lt;/code&gt; step to assign all the right
values to the configuration signals, and to correctly tie down unused input data bits or ignore excess
output bits so that the DSP performs the desired 10-bit x 10-bit multiplication.&lt;/p&gt;
&lt;p&gt;After cleaning up some irrelevant cruft, the post-synthesis RTLIL looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;module \top
  wire width 10 input 1 \op0
  wire width 10 input 2 \op1
  wire width 20 output 3 \result
  wire \result_SB_MAC16_O_ACCUMCO
  wire \result_SB_MAC16_O_CO
  wire width 12 \result_SB_MAC16_O_O
  wire \result_SB_MAC16_O_SIGNEXTOUT
  cell \SB_MAC16 \result_SB_MAC16_O
    parameter \A_REG 1&amp;#39;0
    parameter \A_SIGNED 0
    parameter \BOTADDSUB_CARRYSELECT 2&amp;#39;00
    parameter \BOTADDSUB_LOWERINPUT 2&amp;#39;10
    parameter \BOTADDSUB_UPPERINPUT 1&amp;#39;1
    parameter \BOTOUTPUT_SELECT 2&amp;#39;11
    parameter \BOT_8x8_MULT_REG 1&amp;#39;0
    parameter \B_REG 1&amp;#39;0
    parameter \B_SIGNED 0
    parameter \C_REG 1&amp;#39;0
    parameter \D_REG 1&amp;#39;0
    parameter \MODE_8x8 1&amp;#39;0
    parameter \NEG_TRIGGER 1&amp;#39;0
    parameter \PIPELINE_16x16_MULT_REG1 1&amp;#39;0
    parameter \PIPELINE_16x16_MULT_REG2 1&amp;#39;0
    parameter \TOPADDSUB_CARRYSELECT 2&amp;#39;11
    parameter \TOPADDSUB_LOWERINPUT 2&amp;#39;10
    parameter \TOPADDSUB_UPPERINPUT 1&amp;#39;1
    parameter \TOPOUTPUT_SELECT 2&amp;#39;11
    parameter \TOP_8x8_MULT_REG 1&amp;#39;0
    connect \A { 6&amp;#39;000000 \op0 }
    connect \ACCUMCI 1&amp;#39;x
    connect \ACCUMCO \result_SB_MAC16_O_ACCUMCO
    connect \ADDSUBBOT 1&amp;#39;0
    connect \ADDSUBTOP 1&amp;#39;0
    connect \AHOLD 1&amp;#39;0
    connect \B { 6&amp;#39;000000 \op1 }
    connect \BHOLD 1&amp;#39;0
    connect \C 16&amp;#39;0000000000000000
    connect \CE 1&amp;#39;0
    connect \CHOLD 1&amp;#39;0
    connect \CI 1&amp;#39;x
    connect \CLK 1&amp;#39;0
    connect \CO \result_SB_MAC16_O_CO
    connect \D 16&amp;#39;0000000000000000
    connect \DHOLD 1&amp;#39;0
    connect \IRSTBOT 1&amp;#39;0
    connect \IRSTTOP 1&amp;#39;0
    connect \O { \result_SB_MAC16_O_O \result }
    connect \OHOLDBOT 1&amp;#39;0
    connect \OHOLDTOP 1&amp;#39;0
    connect \OLOADBOT 1&amp;#39;0
    connect \OLOADTOP 1&amp;#39;0
    connect \ORSTBOT 1&amp;#39;0
    connect \ORSTTOP 1&amp;#39;0
    connect \SIGNEXTIN 1&amp;#39;x
    connect \SIGNEXTOUT \result_SB_MAC16_O_SIGNEXTOUT
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And here&amp;rsquo;s the equivalent graphical representation. (&lt;em&gt;Click to enlarge&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/mul_ice40.png&#34; &gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/mul_ice40.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top module as a graph after synthesis&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All Yosys commands are written in C++, but in the case of &lt;code&gt;techmap&lt;/code&gt; the specific mapping
operations are described in&amp;hellip; Verilog! It&amp;rsquo;s a very neat system that makes it possible for
anyone to create their own custom mapping operations without the need to touch a line of C++.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see exactly how that works for our example, and look at the source code of the &lt;code&gt;synth_ice40&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Yosys places all the technology-specific operations under the &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/tree/master/techlibs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;techlibs&lt;/code&gt;&lt;/a&gt;
directory. The code for &lt;code&gt;synth_ice40&lt;/code&gt; can be found in
&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/techlibs/ice40/synth_ice40.cc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;techlibs/ice40/synth_ice40.cc&lt;/code&gt;&lt;/a&gt;.
&lt;code&gt;synth_ice40&lt;/code&gt; doesn&amp;rsquo;t really have any smarts by itself: it&amp;rsquo;s a macro command, a series of lower level
Yosys commands strung together into a recipe.&lt;/p&gt;
&lt;p&gt;When you run &lt;code&gt;help synth_ice40&lt;/code&gt; in Yosys, you&amp;rsquo;ll see the following command line option:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    -dsp
        use iCE40 UltraPlus DSP cells for large arithmetic
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&amp;rsquo;s easy to see &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/853f4bb3c695d9f5183ef5064ec4cf9cdd8b5300/techlibs/ice40/synth_ice40.cc#L329-L341&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;which steps are activated in the source code&lt;/a&gt; when DSP mapping is enabled:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;memory_dff&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;no_rw_check_opt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ice40_dsp will merge registers, reserve memory port registers first
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wreduce t:$mul&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;techmap -map +/mul2dsp.v -map +/ice40/dsp_map.v -D DSP_A_MAXWIDTH=16 -D DSP_B_MAXWIDTH=16 &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;-D DSP_A_MINWIDTH=2 -D DSP_B_MINWIDTH=2 -D DSP_Y_MINWIDTH=11 &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#34;-D DSP_NAME=$__MUL16X16&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;(if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;select a:mul2dsp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;              (if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;setattr -unset mul2dsp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;        (if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;opt_expr -fine&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;                (if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wreduce&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;                       (if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;select -clear&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;                 (if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;ice40_dsp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;                     (if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;chtype -set $mul t:$__soft_mul&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;(if -dsp)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s quite a bit going on here, but the most interesting command is this one:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    techmap -map +/mul2dsp.v -map +/ice40/dsp_map.v 
        -D DSP_A_MAXWIDTH=16 -D DSP_B_MAXWIDTH=16
        -D DSP_A_MINWIDTH=2 -D DSP_B_MINWIDTH=2 -D DSP_Y_MINWIDTH=11
        -D DSP_NAME=$__MUL16X16
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What we see here is that &lt;code&gt;techmap&lt;/code&gt; is performing the &lt;code&gt;$mul&lt;/code&gt; to &lt;code&gt;SB_MAC16&lt;/code&gt; conversion in two steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;convert &lt;code&gt;$mul&lt;/code&gt; to a generic, technology independent DSP multiplier cell.&lt;/li&gt;
&lt;li&gt;convert the generic multiplier DSP cell to an iCE40 DSP cell.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Step 1: mul2dsp.v&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Step 1 is done by &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/techlibs/common/mul2dsp.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;mul2dsp.v&lt;/code&gt;&lt;/a&gt;.
The code is a bit convoluted, but it has the answer as to why there&amp;rsquo;s this intermediate step:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;it deals with cases where a single &lt;code&gt;$mul&lt;/code&gt; operation requires more than one DSP.&lt;/p&gt;
&lt;p&gt;For example, a 32-bit x 32-bit to 64-bit multiplication is split into 4
16x16=32 multiplications and some additions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it doesn&amp;rsquo;t do the conversion when the inputs of the multiplication are too small&lt;/p&gt;
&lt;p&gt;This avoids wasting precious DSP resources on something that can be implemented with core logic.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;-D ...&lt;/code&gt; arguments of the &lt;code&gt;techmap&lt;/code&gt; command specify Verilog defines that are passed to the techmap
file. It&amp;rsquo;s used to parameterize the conversion process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-D DSP_A_MAXWIDTH=16 -D DSP_B_MAXWIDTH=16&lt;/code&gt; informs &lt;code&gt;mul2dsp&lt;/code&gt; that the maximum input size of
the DSP is 16 bits.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D DSP_A_MINWIDTH=2 -D DSP_B_MINWIDTH=2 -D DSP_Y_MINWIDTH=11&lt;/code&gt; provides the minimum requirements
that must be satisfied to do the conversion.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D DSP_NAME=$__MUL16X16&lt;/code&gt; provides the name of the generic multiplier cells that should be created.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can run that first step by ourselves and check the result:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;read_verilog mul.v
clean -purge
techmap -map +/mul2dsp.v -D DSP_A_MAXWIDTH=16 -D DSP_B_MAXWIDTH=16 -D DSP_A_MINWIDTH=2 -D DSP_B_MINWIDTH=2 -D DSP_Y_MINWIDTH=11 -D DSP_NAME=$__MUL16X16
clean -purge
show -width -signed -format png -prefix mul_mul2dsp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/mul_mul2dsp.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top module after mul2dsp phase&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;In case you were wondering, here&amp;rsquo;s what this first step looks like for a 20-bit x 20-bit to 40-bit multiplier:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/large_mul_techmap.png&#34; &gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/large_mul_techmap.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top module for $mul 20x20=40 after mul2dsp phase&#34;
	
	
&gt;&lt;/a&gt;
&lt;em&gt;(Click to enlarge)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yosys can often create very long internal labels that stretch the graphical representation, so
I zoomed the image to the part that counts. The 3 red rectangles are the &lt;code&gt;$__MUL16X16&lt;/code&gt; cells that will be converted
to iCE40 DSPs. The blue rectangle is a &lt;code&gt;$__soft_mul&lt;/code&gt; cell that will be converted into random logic
at a large stage, and the 3 green rectangles are &lt;code&gt;$add&lt;/code&gt; cells to bring the results of the different multipliers
together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2: ice40/dsp_map.v&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Step 2 of the &lt;code&gt;techmap&lt;/code&gt; process, &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/techlibs/ice40/dsp_map.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;ice40/dsp_map.v&lt;/code&gt;&lt;/a&gt;
is trivial: it converts the generic &lt;code&gt;$__MUL16X16&lt;/code&gt; multiplier cell into an &lt;code&gt;SB_MAC16&lt;/code&gt; cell, wires up the data path inputs and output,
and straps all the other configuration inputs so that the cell is configured as a straight
multiplier.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$__MUL16X16&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;SB_MAC16&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NEG_TRIGGER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C_REG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_REG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_REG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;D_REG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TOP_8x8_MULT_REG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOT_8x8_MULT_REG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PIPELINE_16x16_MULT_REG1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PIPELINE_16x16_MULT_REG2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TOPOUTPUT_SELECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TOPADDSUB_LOWERINPUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TOPADDSUB_UPPERINPUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TOPADDSUB_CARRYSELECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOTOUTPUT_SELECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOTADDSUB_LOWERINPUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOTADDSUB_UPPERINPUT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BOTADDSUB_CARRYSELECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MODE_8x8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_REPLACE_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;		&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;a-horribly-contrived-example-problem&#34;&gt;
    &lt;a href=&#34;#a-horribly-contrived-example-problem&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    A Horribly Contrived Example Problem
&lt;/h1&gt;&lt;p&gt;Have a look at the following Verilog example code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;top_unsigned&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The graphical representation is as expected:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add_orig.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned original version&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;I sometimes use &lt;a class=&#34;link&#34; href=&#34;https://tomverbeure.github.io/2020/08/08/CXXRTL-the-New-Yosys-Simulation-Backend.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CXXRTL&lt;/a&gt; to simulate my designs.
When I run &lt;code&gt;write_cxxrtl&lt;/code&gt;, the generated file contains the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_top__unsigned&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_uu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_op0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is exactly as expected, and there&amp;rsquo;s nothing wrong with it. But one thing that bothers me is that CXXRTL
uses 32-bit integer values (&amp;ldquo;chunks&amp;rdquo;) for all its operations. In the code above, there&amp;rsquo;s a 64-bit addition, and
CXXRTL implements those by
&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/853f4bb3c695d9f5183ef5064ec4cf9cdd8b5300/backends/cxxrtl/cxxrtl.h#L521-L532&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;splitting things up into multiple 32-bit additions&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;n&#34;&gt;template&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Invert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CarryIn&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pair&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/*CarryOut*/&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;alu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Bits&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;carry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CarryIn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Invert&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;carry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chunks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msb_mask&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;carry&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;carry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;carry&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s a hand-crafted carry-ripple adder. Now, don&amp;rsquo;t worry, things are really not as bad as it seems,
because all the variables that are used for the &lt;code&gt;if&lt;/code&gt; conditionals and the &lt;code&gt;for&lt;/code&gt; loop are constants. Any
good C++ compiler will optimize the addition above into only a few assembler instructions.&lt;/p&gt;
&lt;p&gt;If you know your binary adder basics, you see that the addition of a 7-bit and a 6 bit operand will result
at most in an 8-bit result. All higher bits will always be 0. It&amp;rsquo;s overkill to have a 64-bit adder.&lt;/p&gt;
&lt;p&gt;Yosys already has the &lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/yosys/en/latest/cmd/wreduce.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;wreduce&lt;/code&gt; command&lt;/a&gt; that reduces logic
operations to just the number of bits that are really needed.&lt;/p&gt;
&lt;p&gt;We can see this when we run the following commands:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;read_verilog add.v
hierarchy -top top_unsigned
wreduce
clean -purge
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add_wreduce.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned after wreduce&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;And here&amp;rsquo;s the relevant CXXRTL generated code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_top__unsigned&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_uu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_op0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That looks better, but is that really true? The addition returns an 8-bit value, but since
the smallest chunk is 32-bits, the &lt;code&gt;slice&amp;lt;7,0&amp;gt;&lt;/code&gt; command now requires a read-modify-write
operation.&lt;/p&gt;
&lt;p&gt;What I really want is this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_top__unsigned&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_uu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_op0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;		&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bits&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unfortunately, Yosys doesn&amp;rsquo;t have a command that does this for me, and I really don&amp;rsquo;t
want to modify the &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/passes/opt/wreduce.cc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;C++ code of the &lt;code&gt;wreduce&lt;/code&gt; command&lt;/a&gt;
to make it so.&lt;/p&gt;
&lt;h1 id=&#34;a-custom-techmap-transformation-to-the-rescue&#34;&gt;
    &lt;a href=&#34;#a-custom-techmap-transformation-to-the-rescue&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    A Custom Techmap Transformation to the Rescue!
&lt;/h1&gt;&lt;p&gt;If you start Yosys, running &lt;code&gt;help techmap&lt;/code&gt; will give you an exhaustive list of all the features that
you might ever need. But instead of repeating everything in there, let&amp;rsquo;s create an &lt;code&gt;add_reduce&lt;/code&gt; techmap
transformation to solve the problem of the previous section.&lt;/p&gt;
&lt;p&gt;Here are some of the basics of a techmap transformation Verilog module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a techmap transformation only operates on a single design cell.&lt;/p&gt;
&lt;p&gt;You can not use &lt;code&gt;techmap&lt;/code&gt; to perform multi-cell optimizations such mapping a &lt;code&gt;$mul&lt;/code&gt; followed
by an &lt;code&gt;$add&lt;/code&gt; onto an FPGA DSP has multiply-accumulator support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a design cell that is transformed by a techmap is selected by a string that contains a list of cell
types that are specified with the &lt;code&gt;(* techmap_celltype &amp;quot;...&amp;quot;)&lt;/code&gt; attribute. If the techmap module doesn&amp;rsquo;t have
such an attribute, then it&amp;rsquo;s determined by the name of the Verilog module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;by default, a techmap operation will iterate on itself until there&amp;rsquo;s nothing left that matches.&lt;/p&gt;
&lt;p&gt;If a techmap operation replaces an &lt;code&gt;$add&lt;/code&gt; primitive by a new &lt;code&gt;$add&lt;/code&gt; primitive, techmap will run again
on the second one. Without some kind of abort mechanism, this will result in an endless loop!&lt;/p&gt;
&lt;p&gt;There are multiple ways to avoid such an endless loop though. I&amp;rsquo;ll get to that later.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;it&amp;rsquo;s always a good idea to normalize the configuration on which you want to do the main transformation.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a good example of what I mean by that: we want to reduce the size of an adder
based on the size of its inputs. But an adder has 2 inputs, and if these inputs have a different
size, then the transformation will have a different code path depending on which input is largest.&lt;/p&gt;
&lt;p&gt;However, an addition is commutative: the order of the inputs doesn&amp;rsquo;t matter.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s easier first do a normalization where the A input is guaranteed to be larger or equal than
the B input by swapping the inputs, so that actual reduction transformation only has to deal with one case.&lt;/p&gt;
&lt;p&gt;The earlier discussed &lt;code&gt;mul2dsp&lt;/code&gt; techmap module
&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/techlibs/common/mul2dsp.v#L97-L108&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;does the same thing&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The add_reduce techmap module declaration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this example, I want a transformation that only works on an &lt;code&gt;$add&lt;/code&gt; instance, so I could
create a techmap Verilog module like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But I prefer to use a descriptive name for the module and use the &lt;code&gt;(* techmap_celltype ...)&lt;/code&gt; option to select
the cell types on which the module operates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;techmap_celltype&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;$add&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_reduce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;The add_reduce techmap module interface&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The techmap module interface should be the same as the cell on which it operates. Both the
input/output signals and the parameters must be the same. Yosys has a Verilog file called
&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/techlibs/common/simlib.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;simlib.v&lt;/code&gt;&lt;/a&gt; that
contains the reference simulation modules of all its internal primitives. You can use
this to check out the interface details of particular primitive.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys/blob/master/techlibs/common/simlib.v#L834-L844&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the one for the &lt;code&gt;$add&lt;/code&gt; primitive&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;add_reduce&lt;/code&gt; techmap module has the same interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;techmap_celltype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;$add&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_reduce&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;parameter&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;force_downto&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;force_downto&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;force_downto&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;force_downto&lt;/code&gt; attribute ensures that the highest numbered bit of each signal is
the MSB. When this attribute is present, Yosys will automatically swap around the bits of connected
wires so that you don&amp;rsquo;t need to worry about wackos who use bit 0 as MSB.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;add_reduce stop conditions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since we&amp;rsquo;re replacing an &lt;code&gt;$add&lt;/code&gt; primitive with another &lt;code&gt;$add&lt;/code&gt; primitive, we need to make sure that
there are special conditions to prevent the &lt;code&gt;techmap&lt;/code&gt; operation to run forever.&lt;/p&gt;
&lt;p&gt;We can tell the &lt;code&gt;techmap&lt;/code&gt; command to stop transforming the current cell instance
by assigning a non-zero value to the &lt;code&gt;_TECHMAP_FAIL_&lt;/code&gt; wire:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_FAIL_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For this operation, we want stop transforming an &lt;code&gt;$add&lt;/code&gt; primitive for a number of conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;when the size of the adder is already equal or smaller than the minimal desired adder.&lt;/p&gt;
&lt;p&gt;We can set the minimum size with the `Y_MIN_WIDTH define.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the size of the adder can&amp;rsquo;t be reduced because it would change the result of the calculation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When it&amp;rsquo;s a signed addition and we only want to transform unsigned additions.&lt;/p&gt;
&lt;p&gt;The `REDUCE_SIGNED define must be set to allow signed adder transformation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This translates into the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;localparam&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SIGNED_ADDER&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;generate&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;`Y_MIN_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_FAIL_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_FAIL_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIGNED_ADDER&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;`REDUCE_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_FAIL_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are other ways to prevent &lt;code&gt;techmap&lt;/code&gt; to run forever.  For example, in the &lt;code&gt;mul2dsp.v&lt;/code&gt; code,
a &lt;code&gt;$__soft_mul&lt;/code&gt; cell used instead of a &lt;code&gt;$mul&lt;/code&gt; primitive. Yosys has no such primitive, but
in a later step, after &lt;code&gt;techmap&lt;/code&gt; has been completed, this &lt;code&gt;$__soft_mul&lt;/code&gt; cell is converted
back to a &lt;code&gt;$mul$&lt;/code&gt; cell:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chtype -set $mul t:$__soft_mul
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;add_reduce normalization&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The normalization code of &lt;code&gt;add_reduce&lt;/code&gt; is pretty much a straight copy of the one
from &lt;code&gt;mul2dsp&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;generate&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;are&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;swapped&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_REPLACE_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;               &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;               &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When using &lt;code&gt;_TECHMAP_REPLACE_&lt;/code&gt; as instance name of the swapped &lt;code&gt;$add&lt;/code&gt; primitive, it
will inherit the instance name of the original instance. This is one of the
many predefined variables that are explained by running &lt;code&gt;help techmap&lt;/code&gt; in Yosys.&lt;/p&gt;
&lt;p&gt;Since we replace &lt;code&gt;$add&lt;/code&gt; with &lt;code&gt;$add&lt;/code&gt;, running &lt;code&gt;techmap&lt;/code&gt; will result in the
&lt;code&gt;$add&lt;/code&gt; cell being transformed twice times if B is larger than A: the first time
to swap the inputs, and the second time for the actual reduction.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;techmap&lt;/code&gt; needs to transform the same cell multiple times, it can
be hard to debug. You can use the &lt;code&gt;-max_iter &amp;lt;number&amp;gt;&lt;/code&gt; option to limit
the number of transformations.&lt;/p&gt;
&lt;p&gt;For example, here&amp;rsquo;s what the design originally looked like:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add_orig.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned original version&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;And here&amp;rsquo;s how things look when stopping the &lt;code&gt;add_reduce&lt;/code&gt; operation after the
first iteration:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;techmap -map add_reduce.v -max_iter 1
clean -purge
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add_swap_clean.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned after swapping inputs&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;op1&lt;/code&gt; with the largest input size of 7 is now connected to A!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The actual add_reduce transformation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now that all preliminary formalities are behind use, the actual reduction
code is pretty straightfoward:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;localparam&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ADDER_WIDTH&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;`MAX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;`Y_MIN_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$add&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_SIGNED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ADDER_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_TECHMAP_REPLACE_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ADDER_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; 	&lt;span class=&#34;c1&#34;&gt;// Reduced output size
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Higher bits are 0 or sign extension
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ADDER_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Y_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ADDER_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIGNED_ADDER&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ADDER_WIDTH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mb&#34;&gt;&amp;#39;b0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The final &lt;code&gt;add_reduce.v&lt;/code&gt; code can be found &lt;a class=&#34;link&#34; href=&#34;https://github.com/tomverbeure/yosys_techmap_blog/blob/main/add_reduce.v&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.
We can run the whole thing with:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;techmap -map add_reduce.v -D Y_MIN_WIDTH=32
clean -purge
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result is exactly what we wanted, as shown in the graphical diagram&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add_reduce.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned after custom reduce&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;and in the CXXRTL-generated code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_top__unsigned&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add_uu&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p_op1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p_op0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;p_sum0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;slice&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;converged&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;formal-equivalence-check&#34;&gt;
    &lt;a href=&#34;#formal-equivalence-check&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Formal Equivalence Check
&lt;/h1&gt;&lt;p&gt;Whenever you do logic transformations, it&amp;rsquo;s not a bad idea to check that the pre- and
post-transformation logic behaves exactly the same. Yosys has a basic built-in equivalence
checker. It&amp;rsquo;s not a performance monster, but it&amp;rsquo;s good enough for this kind of use case.&lt;/p&gt;
&lt;p&gt;In the example below, I&amp;rsquo;m verifying the &lt;code&gt;add_reduce&lt;/code&gt; techmap on a design with an adder that
has an output that&amp;rsquo;s 10 instead of 64 bits, and the minimum size is set to 8.
This makes the size of the graphs more managable.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# Load the original design
read_verilog add.v
hierarchy -top top_unsigned10
rename top_unsigned10 top_unsigned

# Make a golden reference copy of the unmodified design
copy top_unsigned top_unsigned_gold

# Select the original version to do the techmap
select top_unsigned

# Do the techmap on top_unsigned
techmap -map add_reduce.v -D Y_MIN_WIDTH=8 
clean -purge
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So far, so good: Yosys now has 2 designs. &lt;code&gt;top_unsigned_gold&lt;/code&gt; is the original one:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add10_gold.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned10 golden&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;top_unsigned&lt;/code&gt; has been transformed with the techmap:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add10_reduce.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned10 reduce&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s compare them:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;equiv_make top_unsigned_gold top_unsigned top_equiv
select top_equiv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;equiv_make&lt;/code&gt; has the golden and the transformed design as input and creates a new
design with &lt;code&gt;$equiv&lt;/code&gt; primitive cells inserted at the output of both designs. These cells
will tell the equivalence checker which nets to check for formal equivalence. The
new design &lt;code&gt;top_equiv&lt;/code&gt; looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add10_equiv_make.png&#34; &gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add10_equiv_make.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned10 equiv_make&#34;
	
	
&gt;&lt;/a&gt;
&lt;em&gt;(Click to enlarge)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the new design has both the golden and the transformed logic on the left,
driven by the same inputs. For there are 10 &lt;code&gt;$equiv&lt;/code&gt; cells, one for each bit of the output.&lt;/p&gt;
&lt;p&gt;We can now run the equivalence check:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;equiv_simple
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You&amp;rsquo;ll see something like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;8. Executing EQUIV_SIMPLE pass.
Found 10 unproven $equiv cells (1 groups) in top_equiv:
 Grouping SAT models for \sum0:
  Trying to prove $equiv for \sum0 [0]: success!
  Trying to prove $equiv for \sum0 [1]: success!
  Trying to prove $equiv for \sum0 [2]: success!
  Trying to prove $equiv for \sum0 [3]: success!
  Trying to prove $equiv for \sum0 [4]: success!
  Trying to prove $equiv for \sum0 [5]: success!
  Trying to prove $equiv for \sum0 [6]: success!
  Trying to prove $equiv for \sum0 [7]: success!
  Trying to prove $equiv for \sum0 [8]: success!
  Trying to prove $equiv for \sum0 [9]: success!
Proved 10 previously unproven $equiv cells.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Each individual bit has been proven to be correct.&lt;/p&gt;
&lt;p&gt;We can make Yosys fail if there were any unproven &lt;code&gt;$equiv&lt;/code&gt; cells, like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;equiv_status -assert
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, in our case, all is well:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;9. Executing EQUIV_STATUS pass.
Found 10 $equiv cells in top_equiv:
  Of those cells 10 are proven and 0 are unproven.
  Equivalence successfully proven!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We&amp;rsquo;ve now proven that our &lt;code&gt;add_reduce&lt;/code&gt; techmap is correct, but that doesn&amp;rsquo;t mean
it&amp;rsquo;s guaranteed bug free: we&amp;rsquo;ve only tested one combination of input and output
signal sizes. To be absolutely sure, you&amp;rsquo;d need more variety of test cases.&lt;/p&gt;
&lt;p&gt;This is only a quick example of what Yosys can do, there&amp;rsquo;s a variety of additional
equivalence and logic proof features, most of which I don&amp;rsquo;t know much about! You
could start by checking out the help information for the &lt;code&gt;equiv_*&lt;/code&gt;, &lt;code&gt;miter&lt;/code&gt;, and &lt;code&gt;sat&lt;/code&gt;
commands to learn more.&lt;/p&gt;
&lt;h1 id=&#34;cleaning-up&#34;&gt;
    &lt;a href=&#34;#cleaning-up&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Cleaning Up
&lt;/h1&gt;&lt;p&gt;When Yosys creates new cells and reconnects wires, it won&amp;rsquo;t immediately delete older cells and wires
that aren&amp;rsquo;t used anymore. You need to expliclity tell Yosys to do so with the &lt;code&gt;clean -purge&lt;/code&gt;
command that you can see in some of the command sequences above.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what the reduced adder looks like without first running a clean:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2022/yosys_techmap/add_reduce_unclean.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;top_unsigned after custom reduce without clean&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why you see a &lt;code&gt;clean -purge&lt;/code&gt; statement all over the place
&lt;a class=&#34;link&#34; href=&#34;https://github.com/tomverbeure/yosys_techmap_blog/blob/main/add_reduce.yosys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;in the script&lt;/a&gt;
generates all the pretty pictures of this blog post.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Conclusion
&lt;/h1&gt;&lt;p&gt;Techmap is a very nice tool to have to transform single cells into something that better maps to
your chosen target. The example that I&amp;rsquo;ve given here is a bit dumb (I&amp;rsquo;m not even sure if it would
actually result in better compiled CXXRTL code!), but it shows some of the potential of what
can be achieved.&lt;/p&gt;
&lt;p&gt;I have only scratched the surface of what can be done with it: there are ways to make a &lt;code&gt;techmap&lt;/code&gt;
module behave differently based on whether or not certain input bits are constant, you can
instruct Yosys to run another  Yosys command after performing a &lt;code&gt;techmap&lt;/code&gt; iteration, and
so forth.&lt;/p&gt;
&lt;p&gt;If you want to go deeper, you should definitely start by checking out the help instructions, not
only of &lt;code&gt;techmap&lt;/code&gt; command, but also some of the other ones.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;
    &lt;a href=&#34;#references&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    References
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/yosys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Main Yosys repo on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/tomverbeure/yosys_techmap_blog&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;yosys_techmap_blog repo on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Contains the Verilog code and the Yosys scripts to generate all the graphs of this blog post.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20221108 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20221108-released/</link>
        <pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20221108-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20221108 released!" /&gt;&lt;p&gt;The November release of Tabby CAD Suite is now available for download. Notable changes in this version include:&lt;/p&gt;
&lt;p&gt;We have experimentally added support for EDIF and Liberty verific parsers. They can be used either with the verific [-liberty|-edif] or the read [-liberty|-edif] command. We are evaluating whether it is of interest for us to keep these long-term, so please let us know if you use them and what your experience is!&lt;/p&gt;
&lt;h2 id=&#34;in-other-yosyshq-news&#34;&gt;
    &lt;a href=&#34;#in-other-yosyshq-news&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    In other YosysHQ news
&lt;/h2&gt;&lt;p&gt;TinyTapeout is an educational project that makes it easier and cheaper than ever to get your digital designs manufactured on an ASIC. By leveraging open source tools like Yosys, the files required for manufacture are run in the cloud. &lt;a class=&#34;link&#34; href=&#34;https://github.com/TinyTapeout/tt02-test-7seg/actions/runs/3452666592&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Scroll to the bottom of the build results&lt;/a&gt; to see a cool interactive 3d viewer.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20221011 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20221011-released/</link>
        <pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20221011-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20221011 released!" /&gt;&lt;p&gt;The October release of Tabby CAD Suite is now available for download.&lt;/p&gt;
&lt;p&gt;The read and verific commands now support here-documents in scripts, the same way as read_verilog. This is useful e.g. to have small self-contained tests in a single file such as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;read -sv &amp;lt;&amp;lt;EOT
module top(input clk, output reg [1:0] q);
    wire [1:0] x = 2&#39;b10;
    always @(posedge clk)
        q &amp;lt;= x &amp;amp; 2&#39;b11;
endmodule
EOT
prep -top top
sim -clock clk -n 1 -w top
select -assert-count 1 a:init=2&#39;b10 top/q %i
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Introducing the Colorlight 5A-75B board</title>
        <link>http://blog.yosyshq.com/p/colorlight-part-1/</link>
        <pubDate>Sun, 16 Oct 2022 18:17:00 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/colorlight-part-1/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/colorlight_5a75b.jpg" alt="Featured image of post Introducing the Colorlight 5A-75B board" /&gt;&lt;p&gt;&lt;em&gt;This guest post is the first in a two part series by Chris Lasocki.
Part 2 is &lt;a class=&#34;link&#34; href=&#34;http://blog.yosyshq.com/p/colorlight-part-2/&#34; &gt;now available here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It seems that it was an accident - a generic part of a LED display has
become a low cost FPGA development board. The board in question is the
Colorlight 5A-75B, which is a so-called receiver card. Featuring a
Lattice ECP5 FPGA, supported by Yosys, it allows you to leverage a
fully open-source FPGA development toolchain. Priced on average at
20-25 USD, it is a very accessible board.&lt;/p&gt;
&lt;p&gt;The Colorlight 5A-75B was originally a part of a modular LED display
standard. It&amp;rsquo;s a receiver card, which means that it sits between the
computer controlling the show, and the LED panels themselves. It fulfills a
basic but crucial task of receiving the video signal and driving the
RGB panels accordingly. This takes a lot of bandwidth, so it is
equipped with a moderately fast ECP5 LFE5U25-F FPGA and two Gigabit
Ethernet interfaces. There is also a 16Mbit SDRAM for temporary
storage and a Flash memory of the same size for storing the
bitstream. It features 8 output ports of a known pinout (HUB75) and 5V
outputs. The board has caught attention of hardware hackers and
soon after was fully &lt;a class=&#34;link&#34; href=&#34;https://github.com/q3k/chubby75&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;reverse
engineered&lt;/a&gt; by q3k and others. A
schematic with pinouts is available, as well as other
documentation. A great amount of work has been done here and this is
what enables the Colorlight board to be used in the hacker spirit way.&lt;/p&gt;
&lt;p&gt;Accidentally, this board design happens to be a great compromise
between feature-rich and IO-rich. The only on-board peripherals are the
basic or high speed ones, which would be hard to connect over the 0.1&amp;quot;
pin headers. It is also the only development board with a dual Gigabit
Ethernet interface in its price range. Since it&amp;rsquo;s just an FPGA, the
16MBit SDRAM should be enough for most applications, while being easy
to implement a controller for.&lt;/p&gt;
&lt;h2 id=&#34;hacking-the-board&#34;&gt;
    &lt;a href=&#34;#hacking-the-board&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Hacking the board
&lt;/h2&gt;&lt;p&gt;With the on-board JTAG port, you just need to solder on
a 4 pin header and you are ready to upload your own bitstreams to the
ECP5 FPGA. This FPGA is fully supported by the &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/oss-cad-suite-build&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Yosys toolchain&lt;/a&gt;, from
the verilog compiler through place and route engine to the bitstream
generator, and along with an open source JTAG adapter like the Bus
Pirate (or anything else, really) it only takes a moment to send the
bitstream down and see your code run. There is a
great deal of user accessible IO broken out on the HUB75 headers.&lt;/p&gt;
&lt;p&gt;The FPGA has a 25MHz clock directed to it, as well as one onboard LED
and a button, which is plenty enough for a Verilog &amp;ldquo;Hello, world!&amp;rdquo;
project - blinking the LED.&lt;/p&gt;
&lt;p&gt;The only downside of this board is lack of inputs by default - You
need to replace the 74HC245 output drivers with bidirectional level
shifters. However there exists a pin compatible level shifter IC,
SN74CBT3245A which can replace the default output driver providing 3v3
bidirectional IO. Other options, such as fabricating tiny PCBs that
replace the shifters with wires, or connecting the direction pin of the
output drivers to an IO pin are also a possibility.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;
    &lt;a href=&#34;#summary&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Summary
&lt;/h2&gt;&lt;p&gt;The Colorlight 5A-75B is a good choice for those who want to try
open-source FPGA programming but do not wish to spend a significant
amount of money for a classic development board. The on-board
peripherals are enough for a first project to get acquainted with the
toolchain. Gigabit Ethernet and SDRAM could also come in handy in
future more advanced projects.&lt;/p&gt;
&lt;p&gt;In the next post I will describe how to write, compile and upload a
Verilog project that will blink the onboard led of the 5A-75B board.&lt;/p&gt;
&lt;h2 id=&#34;about-the-author&#34;&gt;
    &lt;a href=&#34;#about-the-author&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    About the author
&lt;/h2&gt;&lt;p&gt;Chris &amp;ldquo;polprog&amp;rdquo; Lasocki (&lt;a class=&#34;link&#34; href=&#34;https://twitter.com/polprogpl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@polprogpl&lt;/a&gt;)
is a long time electronics hacker and an aspiring physicist. FPGAs are
one of his hobbies and he is currently writing a thesis in that field.
His other interests include laser physics as well as embedded programming
projects. He runs a blog at &lt;a class=&#34;link&#34; href=&#34;https://polprog.net&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;polprog.net&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20220906 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20220906-released/</link>
        <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20220906-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20220906 released!" /&gt;&lt;p&gt;The September release of Tabby CAD Suite is now available for download.&lt;/p&gt;
&lt;h2 id=&#34;sby&#34;&gt;
    &lt;a href=&#34;#sby&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    SBY
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SBY now runs multiple tasks in parallel. Additionally it now limits the number of concurrently running subprocesses to the available number of cores. The &amp;ndash;sequential command line option allows you to opt out of running tasks in parallel and the -j N option sets the limit of concurrent subprocesses to N instead of the default. All this is optionally integrated with the make jobserver protocol to enforce the concurrent process limit across other processes launched by make.&lt;/li&gt;
&lt;li&gt;There is a new SBY option vcd to enable or disable the generation of VCD traces. It defaults to on, but can be set to off when no traces are required to save runtime and disk space. VCD trace generation performance for the smtbmc engine is also improved in this release, so we recommend re-evaluating the performance before turning VCD trace generation off.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-other-yosyshq-news&#34;&gt;
    &lt;a href=&#34;#in-other-yosyshq-news&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    In other YosysHQ news
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;We have recently overhauled the &lt;a class=&#34;link&#34; href=&#34;https://symbiyosys.readthedocs.io/en/latest/quickstart.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SBY getting started guide&lt;/a&gt;. Have a look if you need to onboard someone for SVA property checking!&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20220805 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20220805-released/</link>
        <pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20220805-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20220805 released!" /&gt;&lt;p&gt;The August release of Tabby CAD Suite is now available for download.&lt;/p&gt;
&lt;h2 id=&#34;sby&#34;&gt;
    &lt;a href=&#34;#sby&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    SBY
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SBY now uses a more precise logic loop analysis, removing the need to run simplemap on coarse-grain cells that re-use parts of a signal.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-other-yosyshq-news&#34;&gt;
    &lt;a href=&#34;#in-other-yosyshq-news&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    In other YosysHQ news
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Since we introduced the new autotune option, we’ve now written up a &lt;a class=&#34;link&#34; href=&#34;https://blog.yosyshq.com/p/sby-autotune/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;blogpost&lt;/a&gt; with an example on how to get started.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Autotune</title>
        <link>http://blog.yosyshq.com/p/sby-autotune/</link>
        <pubDate>Wed, 27 Jul 2022 14:41:35 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/sby-autotune/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/autotune.png" alt="Featured image of post Autotune" /&gt;&lt;p&gt;Sby, our frontend for formal verification, makes it easy to use Yosys with the various open source verification tools that are included in our CAD suites. Sby integrates these tools as engines and provides a unified interface. Additionally, many of the verification tools internally use lower-level tools like SAT and SMT solvers and allow the user to select between different supported solvers.&lt;/p&gt;
&lt;p&gt;Most verification tasks can be performed by several of the supported engines and solvers. Depending on the specific verification task at hand, there can be large performance differences between them. Thus, it makes sense to try several engines and solvers to pick the best performing one.&lt;/p&gt;
&lt;p&gt;With Sby, switching the engine or solver only requires changing a single line in the “[engines]” section of the .sby file. Still, the large number of engine and solver configurations made it impractical to manually try all of them for every verification task, so it was easy to leave performance on the table by sticking with a worse performing configuration.&lt;/p&gt;
&lt;p&gt;To help you get the best performance out of Sby, we now introduced the &amp;ndash;autotune option. If you add this option to your usual Sby invocation, it will go ahead and automatically try all recommended engine and solver combinations, producing a report that lists the best performing configurations. You can then copy a configuration from this report into your .sby file to use a faster engine for future sby invocations. From time to time, when updating the CAD suite, or making significant changes to your design, you can run autotune again to see if you are still using the best performing engine.&lt;/p&gt;
&lt;p&gt;Sby  &amp;ndash;autotune is also a lot smarter than just trying every configuration in sequence. It runs in parallel and knows how to use timeouts and retries so that a single slow engine that would take hours doesn’t keep Sby from quickly discovering a better configuration that finishes in seconds. When selecting the recommended engines and solvers, it also takes into account the design and settings in your .sby file to avoid known incompatibilities or performance issues.&lt;/p&gt;
&lt;p&gt;More details on how to use and configure the automatic engine selection can be found in the &lt;a class=&#34;link&#34; href=&#34;https://symbiyosys.readthedocs.io/en/latest/autotune.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;corresponding section of the Sby documentation&lt;/a&gt;. If you want to try out the new autotune feature yourself, but don’t have a suitable Sby project at hand, you can try it on the &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/sby/tree/master/docs/examples/autotune&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;small example project we prepared&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As always, we&amp;rsquo;re &lt;a class=&#34;link&#34; href=&#34;https://www.yosyshq.com/contact&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;interested to hear how you get on with our tools&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20220706 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20220706-released/</link>
        <pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20220706-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20220706 released!" /&gt;&lt;p&gt;The July release of Tabby CAD Suite is now available for download.&lt;/p&gt;
&lt;h2 id=&#34;sby&#34;&gt;
    &lt;a href=&#34;#sby&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    SBY
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;An autotune function! This won’t fix your singing, but we hope it will help you to choose a good solver for your application. Please check the &lt;a class=&#34;link&#34; href=&#34;https://symbiyosys.readthedocs.io/en/latest/autotune.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;new documentation&lt;/a&gt; here to get started. Please let us know if you try the new feature. We will write a blogpost about it for the next newsletter.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-other-yosyshq-news&#34;&gt;
    &lt;a href=&#34;#in-other-yosyshq-news&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    In other YosysHQ news
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Since tribuf support was added in May, we wrote a &lt;a class=&#34;link&#34; href=&#34;https://blog.yosyshq.com/p/formal-trisate-support/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;short blogpost&lt;/a&gt; about Matt’s use of it for his latest ASIC submission. We also added an example to the &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/sby/tree/master/docs/examples/tristate&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sby examples&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Formal Tristate Support</title>
        <link>http://blog.yosyshq.com/p/formal-trisate-support/</link>
        <pubDate>Fri, 17 Jun 2022 17:28:17 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/formal-trisate-support/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/tristate.png" alt="Featured image of post Formal Tristate Support" /&gt;&lt;p&gt;Sby, our formal verification tool has recently got better support for tristate circuits. A tristate output is one that can either drive the connected wire to a high or low logic level or be in a high impedance state where it does not drive the output. This allows directly connecting multiple tristate outputs as long as no two are driving the output simultaneously. With tribuf (tristate buffer) support turned on, sby will automatically create assertions for any tristate signals that can be driven via multiples outputs. If more than one tristate output can drive the same wire, such an  assertion will fail. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module module1 (input wire active, output wire tri_out);
    assign tri_out = active ? 1&#39;b0 : 1&#39;bz;
endmodule

module module2 (input wire active, output wire tri_out);
    assign tri_out = active ? 1&#39;b0 : 1&#39;bz;
endmodule

module top_fail (input wire clk, input wire active1, input wire active2, output wire out);
    module1 module1 (.active(active1), .tri_out(out));
    module2 module2 (.active(active2), .tri_out(out));
endmodule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And an .sby file with a script section that includes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prep -top top_fail
flatten; tribuf -formal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Will fail with a message like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Assert failed in top: tristates.v:3 ($tribuf_conflict$$flatten/module1.$verific$i6$tristates.v:3$9)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By ensuring that only one tristate module is active at once, for example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;module top_pass (input wire clk, input wire active1, output wire out);
    module1 module1 (.active(active1), .tri_out(out));
    module2 module2 (.active(!active1), .tri_out(out));
endmodule
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sby will now finish with no errors. There is no need to add any assertion to the design, with the tribuf -formal command enabled in the [script] section of the sby file, the assertions are added automatically. Note that the flatten command is required when any module outputs can be tristate and that it has to precede the tribuf -formal command.&lt;/p&gt;
&lt;p&gt;You can try the example out here: &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ/sby/tree/master/docs/examples/tristate&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/YosysHQ/sby/tree/master/docs/examples/tristate&lt;/a&gt;
The sby file makes use of 2 different task sections.&lt;/p&gt;
&lt;p&gt;I recently used this feature to prove the safety of the tristate bus for an ASIC design. The ASIC combines 13 smaller projects with 45 verilog files. Sby completes a full proof with a depth of 5 clock cycles in 10 seconds. You can take a look at the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mattvenn/zero_to_asic_MPW6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;project&amp;rsquo;s repository&lt;/a&gt; and the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mattvenn/zero_to_asic_mpw6/blob/mpw6/tribuf.sby&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;.sby file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This shows that verifying meaningful properties of a larger design doesn&amp;rsquo;t have to take hours or even days. The time required to prove a property is not set by the overall design complexity. State of the art solvers are very good at cutting through a ton of logic to identify just the relevant parts. In solver terminology this is called an unsatisfiable core and on the hardware side this corresponds to a subcircuit that alone ensures that a property holds. That means you could change everything that is not part of this core circuit and the property would still hold. The complexity of this subcircuit is a much better indicator of the required solver effort.&lt;/p&gt;
&lt;p&gt;If you are familiar with the cone of influence concept, where you find the relevant logic by following the circuit&amp;rsquo;s structure, this might sound familiar. An important difference is that solvers do not only consider the structure but also the behavior implemented by a circuit, which is more precise. Thus for the same property, an unsatisfiable core circuit can be much smaller than the cone of influence.&lt;/p&gt;
&lt;p&gt;For selecting between different projects within a single ASIC design, most of the projects&amp;rsquo; logic is not part of the unsatisfiable core. Only the logic responsible for selecting which tristate outputs are active together with the automatically added conflict checks needs to be considered. This is great because for medium to large projects with many source files, the solver can still provide an answer very quickly.&lt;/p&gt;
&lt;p&gt;If you have experience with proving simple properties in large designs please let us know - we’re always interested in how people are using our tools.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20220610 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20220610-released/</link>
        <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20220610-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20220610 released!" /&gt;&lt;p&gt;The June release of Tabby CAD Suite is now available for download.&lt;/p&gt;
&lt;h2 id=&#34;yosys&#34;&gt;
    &lt;a href=&#34;#yosys&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Yosys
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A big overhaul of memory inference in Yosys. The new pass &lt;code&gt;memory_libmap&lt;/code&gt; supports a wider variety of memory patterns, such as single-port memories or asymmetric memories. It will also strictly respect verilog semantics in cases of address collision, adding emulation circuitry to ensure the synthesized behavior matches simulation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To omit the emulation circuitry even in cases where it is required for correctness, you can add the &lt;code&gt;(* no_rw_check *)&lt;/code&gt; attribute to the array declaration of the memory. To disable collision handling globally, calling memory with the &lt;code&gt;-no-rw-check&lt;/code&gt; option is also possible (and the corresponding option has been added to all &lt;code&gt;synth&lt;/code&gt; passes using the new &lt;code&gt;memory_libmap&lt;/code&gt; pass).&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20220512 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20220512-released/</link>
        <pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20220512-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20220512 released!" /&gt;&lt;p&gt;The May release of Tabby CAD Suite is now available for download.&lt;/p&gt;
&lt;h2 id=&#34;sby&#34;&gt;
    &lt;a href=&#34;#sby&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    SBY
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;tribuf&lt;/code&gt; pass now supports a &lt;code&gt;-formal&lt;/code&gt; option that converts inferred tri-state buffers within a module into equivalent non-tri-state logic for formal verification. It automatically adds assertions that detect multiple drivers driving the same net simultaneously. (When using tri-state I/O across modules, &lt;code&gt;tribuf -formal&lt;/code&gt; should be preceded by a &lt;code&gt;flatten&lt;/code&gt; pass).&lt;/li&gt;
&lt;li&gt;Several changes in the handling of &lt;code&gt;x&lt;/code&gt; values during formal verification.  In particular, when using the Verific frontend, during the initial time step, value change expressions (&lt;code&gt;$rose&lt;/code&gt;, &lt;code&gt;$fell&lt;/code&gt;, &lt;code&gt;$changed&lt;/code&gt;, &lt;code&gt;$stable&lt;/code&gt;) are now always computed as if the argument changed from &lt;code&gt;x&lt;/code&gt; to its initial value. This follows the SystemVerilog standard and ensures that any high (or low) signal starts at a step where &lt;code&gt;$rose&lt;/code&gt; (or &lt;code&gt;$fell&lt;/code&gt;) is true.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-other-yosyshq-news&#34;&gt;
    &lt;a href=&#34;#in-other-yosyshq-news&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    In other YosysHQ news
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Teodor-Dumitru Ene &lt;a class=&#34;link&#34; href=&#34;https://blog.yosyshq.com/p/optimising-adders/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;recently spoke about Open-Source Hardware Addition on SKY130&lt;/a&gt;. He has made a Yosys plugin that allows the designer to choose what algorithm to use.&lt;/li&gt;
&lt;li&gt;We are very happy to announce that &lt;a class=&#34;link&#34; href=&#34;https://mullvad.net/en/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mullvad&lt;/a&gt; are sponsoring the development of the open source tools. Thanks Mullvad, and if you need a VPN, be sure to check them out!&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Teodor-Dumitru and the Complexity of Adder Implementations in Hardware</title>
        <link>http://blog.yosyshq.com/p/optimising-adders/</link>
        <pubDate>Fri, 06 May 2022 09:38:52 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/optimising-adders/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/adders.jpg" alt="Featured image of post Teodor-Dumitru and the Complexity of Adder Implementations in Hardware" /&gt;&lt;p&gt;Teodor-Dumitru Ene will be presenting his work on adder optimisations, he&amp;rsquo;ll be covering:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prefix sums&lt;/li&gt;
&lt;li&gt;His research&lt;/li&gt;
&lt;li&gt;Adder-specific quirks and optimizations&lt;/li&gt;
&lt;li&gt;Future goals&lt;/li&gt;
&lt;li&gt;Questions!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please join us:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tuesday, 10 May · 17:30 – 18:30 CEST&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=P7wjB2DKAIA&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Streaming on youtube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Tabby CAD Suite version 20220406 released!</title>
        <link>http://blog.yosyshq.com/p/tabby-cad-suite-version-20220406-released/</link>
        <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/tabby-cad-suite-version-20220406-released/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2022/YOS_horiz.png" alt="Featured image of post Tabby CAD Suite version 20220406 released!" /&gt;&lt;p&gt;The April release of Tabby CAD Suite is now available for download.&lt;/p&gt;
&lt;h2 id=&#34;yosys&#34;&gt;
    &lt;a href=&#34;#yosys&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Yosys
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;sim&lt;/code&gt; command now allows co-simulation with stimulus values from aiger and btor2 witness files as well as traces in VCD or FST format.&lt;/li&gt;
&lt;li&gt;Co-simulation of designs with multiple clock domains was improved.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sby&#34;&gt;
    &lt;a href=&#34;#sby&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    SBY
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;--keep-going&lt;/code&gt; option was added to the smtbmc engine. With this option, the solver will continue to check the remaining properties even after an assertion fails. To use it, add the option between the engine and the solver in the &lt;code&gt;.sby&lt;/code&gt; file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  [engines]
  smtbmc --keep-going boolector
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The JUnit report produced by sby will now list the status individually for each property when the engine supports it (currently only with smtbmc).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;in-other-yosyshq-news&#34;&gt;
    &lt;a href=&#34;#in-other-yosyshq-news&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    In other YosysHQ news
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;We just welcomed 3 new people to the team; Jannis, Lofty and Krystine. They’ll be helping us to improve the formal and FPGA tooling, and improve our documentation.&lt;/li&gt;
&lt;li&gt;If you don’t already follow us on twitter - we post as &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/YosysHQ&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;YosysHQ&lt;/a&gt;. Whitequark just had a &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/whitequark/status/1510525555191558150&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;great ‘ask me anything’ on digital logic&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;As a small company, we really appreciate being recommended to people - please let us know if you have any leads!&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Open Source Silicon with Yosys</title>
        <link>http://blog.yosyshq.com/p/open-source-silicon-with-yosys/</link>
        <pubDate>Mon, 28 Feb 2022 11:23:54 +0100</pubDate>
        
        <guid>http://blog.yosyshq.com/p/open-source-silicon-with-yosys/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;Yosys&lt;/a&gt; is probably best known for providing synthesis for FPGA targets, but it&amp;rsquo;s a very flexible tool capable of a lot more.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://openlane-docs.readthedocs.io/en/rtd-develop/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OpenLane&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://www.siliconcompiler.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SiliconCompiler&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;http://coriolis.lip6.fr/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Coriolis2&lt;/a&gt; are 3 examples of open source ASIC flows, which has been an active field of development over the last year.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re very happy to see our tools get used in the first Google sponsored tapeouts, helping to make the world&amp;rsquo;s first chips made with an open source PDK, and open source all the way down to the designs.&lt;/p&gt;
&lt;p&gt;If you want to find out more about what happened in the world of open source silicon in 2021, you can see our CSO Matt Venn&amp;rsquo;s recent presentation for Hackaday Remoticon here:&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/iK2yGvFety4&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>Why Asynchronous Load Flip-Flops Should Be Avoided</title>
        <link>http://blog.yosyshq.com/p/async-load-ff/</link>
        <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/async-load-ff/</guid>
        <description>&lt;img src="http://blog.yosyshq.com/static-2021/asyncff.png" alt="Featured image of post Why Asynchronous Load Flip-Flops Should Be Avoided" /&gt;&lt;p&gt;Code: &lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ-Docs/Blog-Async-Load-FFs&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/YosysHQ-Docs/Blog-Async-Load-FFs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;part-1-the-bad-news&#34;&gt;
    &lt;a href=&#34;#part-1-the-bad-news&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Part 1: The Bad News
&lt;/h2&gt;&lt;p&gt;We have recently added support for asynchronous load flip-flops to Yosys for a customer project. However, we consider this a problematic feature in a (System-)Verilog synthesis tool, and thus I’d like to take this opportunity to explain why one should avoid using asynchronous load flip-flops in new (System-)Verilog designs.&lt;/p&gt;
&lt;h3 id=&#34;what-are-asynchronous-load-flip-flops&#34;&gt;
    &lt;a href=&#34;#what-are-asynchronous-load-flip-flops&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    What are asynchronous load flip-flops
&lt;/h3&gt;&lt;p&gt;An asynchronous load flip-flop is a type of flip-flop with asynchronous reset for which the reset value is not a compile-time / synthesis-time constant.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-SystemVerilog&#34; data-lang=&#34;SystemVerilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;async_load_ff_q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;async_load_ff_reset_val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dynamic_expression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;always_ff&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;async_load_ff_q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;async_load_ff_reset_val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;async_load_ff_q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This distinguishes them from the more common asynchronous set (reset) flip-flops, for which the reset value is a compile-time (synthesis-time) constant.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-SystemVerilog&#34; data-lang=&#34;SystemVerilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;async_reset_ff_q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;localparam&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;async_reset_ff_reset_val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;constant_expression&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;always_ff&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;async_reset_ff_q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;async_reset_ff_reset_val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;       &lt;span class=&#34;n&#34;&gt;async_reset_ff_q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;IEEE Std 1364.1-2002, the IEEE Standard for Verilog Register Transfer Level Synthesis, does allow such asynchronous load flip-flops in synthesis, but states that the synthesis results will only match the behavior of the original Verilog code under certain conditions.&lt;/p&gt;
&lt;h3 id=&#34;the-problem-with-verilog-and-asynchronous-load-flip-flops&#34;&gt;
    &lt;a href=&#34;#the-problem-with-verilog-and-asynchronous-load-flip-flops&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    The problem with Verilog and asynchronous load flip-flops
&lt;/h3&gt;&lt;p&gt;The key insight is that the way an asynchronous reset is modelled using Verilog always blocks is not sensitive to the data signals providing the asynchronous load value. Thus, if the data signals are changing while the asynchronous reset is active, the new data is not loaded into the flip-flop when neither clock nor the asynchronous reset is toggling.&lt;/p&gt;
&lt;p&gt;Consider the following SystemVerilog design (&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ-Docs/Blog-Async-Load-FFs/blob/main/dut.sv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dut.sv&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-SystemVerilog&#34; data-lang=&#34;SystemVerilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dut&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;always_ff&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// constant expression (async reset)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;always_ff&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk2&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// dynamic expression (async load)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the following test bench (&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ-Docs/Blog-Async-Load-FFs/blob/main/tb.sv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tb.sv&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-SystemVerilog&#34; data-lang=&#34;SystemVerilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;wire&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;dut&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dut&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clk1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do_clk1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;clk1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;endtask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do_clk2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;clk2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;endtask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;task&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do_arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`ifdef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DOUBLE_ARST&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;endtask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;initial&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;do_arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;nb&#34;&gt;$display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do_clk1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;nb&#34;&gt;$display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;do_arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;nb&#34;&gt;$display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;lt;--&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;repeat&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do_clk2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;nb&#34;&gt;$display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;do_arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;nb&#34;&gt;$display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running it without and with &lt;code&gt;-DDOUBLE_ARST&lt;/code&gt; produces the following output:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ make run0
iverilog -g2012 -o sim0 -s tb tb.sv dut.sv
./sim0
  0  x
 35  x
  0 35 &amp;lt;--
  0 90
  0  0

$ make run1
iverilog -g2012 -o sim1 -s tb -DDOUBLE_ARST tb.sv dut.sv
./sim1
  0  0
 35  0
  0  0 &amp;lt;--
  0 55
  0  0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the first case with a single pulse on arst, the second counter is reset to the non-zero value of the first counter from before the reset pulse.&lt;/p&gt;
&lt;p&gt;But a real-world asynchronous load flip-flop would of course behave like a transparent latch while the reset pulse is high, propagating the new (zero) value of the first counter to the second counter register. But this only happens in simulation when we pulse the reset signal a second time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://blog.yosyshq.com/static-2021/asyncff.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Double-Async-Reset Waveform&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;This can lead to non-trivial simulation-synthesis mismatches that are hard to debug, and may result in a chip that does not function as expected.&lt;/p&gt;
&lt;p&gt;Thus, asynchronous load flip-flops should be avoided in (System)Verilog designs, or at least it should be formally verified that the asynchronous load value of such a flip-flop can never change while the reset signal is active.&lt;/p&gt;
&lt;p&gt;This is in line with IEEE Std 1364.1-2002 requirements for sequential logic verification:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When asynchronous data is assigned, the asynchronous data shall not change during the period in which the asynchronous control (the condition under which the data is assigned) is active.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;IEEE Std 1364.1-2002, Section 4.2&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is worth noting that a similar problem exists with flip-flops that have both asynchronous set and reset: If both are asserted and then one is released after the other, the one that’s released later should take precedence over the one that’s released earlier. However, since the always block is not triggered by the falling edge of the set or reset signal, releasing just one of the two will have no effect on the flip-flop output. IEEE Std 1364.1-2002 also acknowledges this issue:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The problem occurs when both reset and preset are asserted at the same time and reset is removed first. When reset is removed (posedge rst_n), the always block is not activated. This means that the output will continue to drive the reset output to ‘0’ until the next rising clock edge. A real flip-flop of this type would immediately drive the output to ‘1’ because the set_n signal is an asynchronous preset. This potentially could cause a mismatch between pre-synthesis and post-synthesis simulations using this model.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;IEEE Std 1364.1-2002, Appendix B.6&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;part-2-the-good-news&#34;&gt;
    &lt;a href=&#34;#part-2-the-good-news&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Part 2: The Good News
&lt;/h2&gt;&lt;p&gt;In this section we discuss different design methods that avoid the use of behavioral Verilog code to model asynchronous load FFs.&lt;/p&gt;
&lt;h3 id=&#34;instantiate-vendor-primitives&#34;&gt;
    &lt;a href=&#34;#instantiate-vendor-primitives&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Instantiate (Vendor) Primitives
&lt;/h3&gt;&lt;p&gt;The best and easiest way of dealing with this issue is to instantiate FF primitives directly. This can either be vendor cells, or a user-defined module for which we chose different implementations for simulation and synthesis, one with correct simulation behavior, and one that is synthesizable, respectively.&lt;/p&gt;
&lt;p&gt;The new DUT would look something like this (&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ-Docs/Blog-Async-Load-FFs/blob/main/dut_myff.sv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dut_myff.sv&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-SystemVerilog&#34; data-lang=&#34;SystemVerilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dut&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;myff&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ff1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;  &lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;00&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;n&#34;&gt;ff2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When instantiating a Vendor primitive one should always double-check that the vendor simulation library does model asynchronous loads correctly, for example using the techniques described in the next two sections.&lt;/p&gt;
&lt;h3 id=&#34;simulation-model-using-verilog-udp&#34;&gt;
    &lt;a href=&#34;#simulation-model-using-verilog-udp&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Simulation model using Verilog UDP
&lt;/h3&gt;&lt;p&gt;Verilog UDP primitives can be used to correctly model the behavior of asynchronous load flip-flops. But UDPs are not synthesizable, so we need to also provide a synthesizable implementation of an asynchronous load flip-flop (&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ-Docs/Blog-Async-Load-FFs/blob/main/myff_udp.sv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;myff_udp.sv&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-SystemVerilog&#34; data-lang=&#34;SystemVerilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`ifdef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SYNTHESIS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myff&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rval&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;primitive&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myff&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// D C R V : Q : Q&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// async reset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// async set
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// posedge clock, d=0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// posedge clock, d=1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// negedge clock
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// any data edge
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// any arst edge
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// any rval edge
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;endtable&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;endprimitive&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running our test-bench now yields the expected result, even when we pulse the asynchronous load signal only once:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ make run2
iverilog -g2012 -o sim2 -s tb tb.sv dut_myff.sv myff_udp.sv
./sim2
  0  0
 35  0
  0  0 &amp;lt;--
  0 55
  0  0
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;simulation-model-using-procedural-assign-and-deassign&#34;&gt;
    &lt;a href=&#34;#simulation-model-using-procedural-assign-and-deassign&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    Simulation model using procedural assign and deassign
&lt;/h3&gt;&lt;p&gt;Another approach is to “fix up” the asynchronous load using procedural assign and deassign (&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ-Docs/Blog-Async-Load-FFs/blob/main/myff_ada.sv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;myff_ada.sv&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-SystemVerilog&#34; data-lang=&#34;SystemVerilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myff&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rval&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;always_ff&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`ifndef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SYNTHESIS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;deassign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running our test-bench on this version also yields the expected result:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;iverilog -g2012 -o sim3 -s tb tb.sv dut_myff.sv myff_ada.sv
./sim3
  0  0
 35  0
  0  0 &amp;lt;--
  0 55
  0  0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Of course it’s also possible to use procedural assign and deassign directly in the design to “fix up” the behavior of asynchronous load flip-flops (&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ-Docs/Blog-Async-Load-FFs/blob/main/dut_ada.sv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dut_ada.sv&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-SystemVerilog&#34; data-lang=&#34;SystemVerilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dut&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;always_ff&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;always_ff&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk2&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`ifndef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SYNTHESIS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;deassign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cnt2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;no&#34;&gt;`endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, sprinkling procedural assign and deassign statements and ifndef-SYNTHESIS-blocks all over the design is much more error prone than implementing this work-around only once in a custom cell type that can then be instantiated wherever needed.&lt;/p&gt;
&lt;h3 id=&#34;the-latchflip-flop-trick&#34;&gt;
    &lt;a href=&#34;#the-latchflip-flop-trick&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    The latch+flip-flop trick
&lt;/h3&gt;&lt;p&gt;The following technique is used on some FPGA architectures to emulate asynchronous-load flip-flops using latches and asynchronous-reset flip-flops only. It can be used to completely avoid asynchronous-load FFs while preserving the semantic of such elements (&lt;a class=&#34;link&#34; href=&#34;https://github.com/YosysHQ-Docs/Blog-Async-Load-FFs/blob/main/myff_hack.sv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;myff_hack.sv&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-SystemVerilog&#34; data-lang=&#34;SystemVerilog&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myff&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;input&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rval&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// a latch to store the async-load value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;latched_rval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;latched_rval&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// a regular FF to store the clocked data value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q_without_reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;q_without_reset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// an asynchronous-reset flip-flop to remember last event
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last_event_was_clock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;always&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;@(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clk&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;posedge&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last_event_was_clock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;      &lt;span class=&#34;n&#34;&gt;last_event_was_clock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// output either the latched reset value or clocked data value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;assign&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;last_event_was_clock&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q_without_reset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;latched_rval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running our test-bench a last time gives the expected result for this solution as well:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;iverilog -g2012 -o sim5 -s tb tb.sv dut_myff.sv myff_hack.sv
./sim5
  0  0
 35  0
  0  0 &amp;lt;--
  0 55
  0  0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a useful last resort solution for designs that absolutely require asynchronous-load flip-flop semantics, and where the risks associated with using different synthesis and simulation models for such a component are not acceptable.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>New pricing for small companies</title>
        <link>http://blog.yosyshq.com/p/pricing-for-small-companies/</link>
        <pubDate>Mon, 26 Jul 2021 15:35:40 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/pricing-for-small-companies/</guid>
        <description>&lt;p&gt;YosysHQ are pleased to announce a new pricing option for small companies with one full time engineer.&lt;/p&gt;
&lt;p&gt;For just €500 per month (excl. VAT), you can get our ‘Solo bundle’:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2 nodes of TabbyCAD Suite, offering industry compatible language support and our formal verification tools and verification IP.&lt;/li&gt;
&lt;li&gt;Unlimited number of users/processes per node. (Up to 32 CPUs per node.)&lt;/li&gt;
&lt;li&gt;Not time limited, use in your continuous integration systems.&lt;/li&gt;
&lt;li&gt;Support that includes potential for custom work and access to our technical team.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For two full time engineers, we have our ‘Solo bundle plus’ which adds another 2 TabbyCAD nodes for an additional €400 per month.&lt;/p&gt;
&lt;p&gt;We also have competitive prices for larger teams.&lt;/p&gt;
&lt;p&gt;For an evaluation license, or to discuss your requirements further please contact us at &lt;a class=&#34;link&#34; href=&#34;mailto:contact@yosyshq.com&#34; &gt;contact@yosyshq.com&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>App Note 109</title>
        <link>http://blog.yosyshq.com/p/ap109/</link>
        <pubDate>Wed, 07 Jul 2021 12:37:04 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/ap109/</guid>
        <description>&lt;p&gt;This Application Note was written with the intention of showing a brief introduction to SVA, and is definitely not a substitute for extensive training. To learn more about formal verification and SVA, it is recommended to book the course given by the FPV specialists at YosysHQ.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A brief history of SystemVerilog Assertions&lt;/li&gt;
&lt;li&gt;SVA layers definition and examples&lt;/li&gt;
&lt;li&gt;Assertion types, sequential property operators&lt;/li&gt;
&lt;li&gt;A short description of liveness and safety properties&lt;/li&gt;
&lt;li&gt;Practical examples using the sequence builder module written by our CTO Claire Xen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/ap109&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://yosyshq.readthedocs.io/projects/ap109&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Feel free to give us feedback and suggest new topics.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>App Note 120</title>
        <link>http://blog.yosyshq.com/p/ap120/</link>
        <pubDate>Thu, 20 May 2021 14:04:45 +0200</pubDate>
        
        <guid>http://blog.yosyshq.com/p/ap120/</guid>
        <description>&lt;p&gt;For a long time people have asked us for quality long form content that shows how to
get the best from our formal tools.&lt;/p&gt;
&lt;p&gt;We have started a series of app notes, with the first being about cover and witness for SVA properties. Otherwise known as &amp;lsquo;Am I testing what I think I&amp;rsquo;m testing&amp;rsquo;!&lt;/p&gt;
&lt;p&gt;What You will learn in this app note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Default clocking and default disable declarations&lt;/li&gt;
&lt;li&gt;Sequences and cycle delays&lt;/li&gt;
&lt;li&gt;Overlapping and non-overlapping implication syntax and semantic&lt;/li&gt;
&lt;li&gt;Weak precondition cover and witness&lt;/li&gt;
&lt;li&gt;How to apply that to a practical HDL code example&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://yosyshq.readthedocs.io/projects/ap120&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://yosyshq.readthedocs.io/projects/ap120&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Feel free to give us feedback and suggest new topics.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Hello World!</title>
        <link>http://blog.yosyshq.com/p/hello/</link>
        <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>http://blog.yosyshq.com/p/hello/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.yosyshq.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;YosysHQ.com&lt;/a&gt; is the new home for the team maintaining Yosys and the related Open Source EDA projects, and the commercial products and services we offer.&lt;/p&gt;
&lt;p&gt;Our team is led by N. Engelhardt as CEO, Claire Wolf as CTO, and Matt Venn as CSO. We are looking to work with more people, so feel free to contact us: &lt;a class=&#34;link&#34; href=&#34;mailto:contact@yosyshq.com&#34; &gt;contact@yosyshq.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tabby CAD Suite is a bundle of our well-known Open Source EDA software packages, combined with additional components that allow seamless integration of our tools in typical industrial digital design environments.&lt;/p&gt;
&lt;p&gt;We also provide support and training for users of our Tabby CAD Suite package and for developers building their work on top of our open source projects.&lt;/p&gt;
&lt;p&gt;In addition, we welcome opportunities to get involved with new projects large and small. We are looking to grow our collaborations with industry and academic partners on improving and expanding our synthesis, place and route, and formal verification flows.&lt;/p&gt;
&lt;p&gt;We look forward to a positive relationship with the Open Source EDA community and external partners.&lt;/p&gt;
&lt;p&gt;Make sure you visit our website &lt;a class=&#34;link&#34; href=&#34;https://www.yosyshq.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;www.yosyshq.com&lt;/a&gt; and send us an email or tweet at us &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/yosyshq&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;@YosysHQ&lt;/a&gt; to say hi!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
